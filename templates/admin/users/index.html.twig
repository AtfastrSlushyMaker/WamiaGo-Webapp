{% extends 'base.html.twig' %}

{% block title %}Users Management{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .card-view {
            display: none;
        }
        .view-active {
            display: block;
        }
        .user-card {
            transition: all 0.3s ease;
            border-radius: 8px;
        }
        .user-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0,0,0,0.1);
        }
        .user-avatar {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            background-color: #e9ecef;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 2rem;
            font-weight: bold;
            color: #6c757d;
            margin: 0 auto;
            overflow: hidden;
        }
        .user-avatar img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        .btn-toggle-view {
            border-radius: 30px;
            padding: 8px 16px;
        }
        .status-badge {
            padding: 5px 10px;
            border-radius: 20px;
            font-size: 0.75rem;
        }
        .modal-dialog {
            max-width: 600px;
        }
        .user-table tbody tr {
            transition: all 0.2s ease;
        }
        .user-table tbody tr:hover {
            background-color: rgba(0,0,0,0.03);
        }
        .loader {
            display: none;
            border: 4px solid #f3f3f3;
            border-top: 4px solid #3498db;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            animation: spin 1s linear infinite;
            margin: 20px auto;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .form-control:focus, .form-select:focus {
            box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.15);
        }
        .btn-icon {
            display: inline-flex;
            align-items: center;
            justify-content: center;
        }
        .toggle-container {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        .form-switch {
            padding-left: 2.5em;
        }
    </style>
{% endblock %}

{% block body %}
    <div class="container-fluid px-4">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h1 class="mt-4">Users Management</h1>
            <div class="d-flex align-items-center gap-3">
                <div class="toggle-container">
                    <span class="me-2"><i class="fas fa-list"></i> List</span>
                    <div class="form-check form-switch">
                        <input class="form-check-input" type="checkbox" id="viewToggle">
                    </div>
                    <span><i class="fas fa-th-large"></i> Cards</span>
                </div>
                <button type="button" class="btn btn-primary" id="addUserBtn">
                    <i class="fas fa-plus me-2"></i> Add User
                </button>
            </div>
        </div>

        <div class="alert alert-success alert-dismissible fade" role="alert" id="successAlert">
            <span id="successMessage"></span>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>

        <div class="alert alert-danger alert-dismissible fade" role="alert" id="errorAlert">
            <span id="errorMessage"></span>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
        
        <!-- List View -->
        <div class="card mb-4 list-view view-active">
            <div class="card-header d-flex justify-content-between align-items-center">
                <div>
                    <i class="fas fa-users me-1"></i>
                    Users List
                </div>
                <div class="d-flex gap-2">
                    <input type="text" id="searchInput" class="form-control" placeholder="Search users...">
                </div>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-striped table-hover user-table">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Name</th>
                                <th>Email</th>
                                <th>Role</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="userTableBody">
                            <!-- User rows will be loaded dynamically -->
                        </tbody>
                    </table>
                </div>
                <div class="loader" id="listLoader"></div>
                <div class="text-center" id="listEmpty" style="display: none;">
                    <p class="text-muted">No users found</p>
                </div>
            </div>
        </div>
        
        <!-- Card View -->
        <div class="card mb-4 card-view">
            <div class="card-header">
                <i class="fas fa-th-large me-1"></i>
                Users Grid
            </div>
            <div class="card-body">
                <div class="row" id="userCardGrid">
                    <!-- User cards will be loaded dynamically -->
                </div>
                <div class="loader" id="cardLoader"></div>
                <div class="text-center" id="cardEmpty" style="display: none;">
                    <p class="text-muted">No users found</p>
                </div>
            </div>
        </div>
    </div>

    <!-- User Modal -->
    <div class="modal fade" id="userModal" tabindex="-1" aria-labelledby="userModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="userModalLabel">Add New User</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="userForm">
                        <input type="hidden" id="userId">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="name" class="form-label">Name</label>
                                <input type="text" class="form-control" id="name" name="name" required>
                                <div class="invalid-feedback" id="nameError"></div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="email" class="form-label">Email</label>
                                <input type="email" class="form-control" id="email" name="email" required>
                                <div class="invalid-feedback" id="emailError"></div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="role" class="form-label">Role</label>
                                <select class="form-select" id="role" name="role" required>
                                    <option value="">Select a role</option>
                                    <option value="ROLE_USER">User</option>
                                    <option value="ROLE_ADMIN">Admin</option>
                                </select>
                                <div class="invalid-feedback" id="roleError"></div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="status" class="form-label">Status</label>
                                <select class="form-select" id="status" name="status" required>
                                    <option value="">Select a status</option>
                                    <option value="active">Active</option>
                                    <option value="inactive">Inactive</option>
                                </select>
                                <div class="invalid-feedback" id="statusError"></div>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label for="password" class="form-label">Password</label>
                            <input type="password" class="form-control" id="password" name="password">
                            <div class="invalid-feedback" id="passwordError"></div>
                            <div class="form-text" id="passwordHelpText">Leave blank to keep current password (when editing).</div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="saveUserBtn">Save User</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Delete Modal -->
    <div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title" id="deleteModalLabel">Confirm Delete</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete the user <strong id="deleteUserName"></strong>?</p>
                    <p class="text-danger"><i class="fas fa-exclamation-triangle me-2"></i> This action cannot be undone.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Delete User</button>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // DOM Elements
            const viewToggle = document.getElementById('viewToggle');
            const listView = document.querySelector('.list-view');
            const cardView = document.querySelector('.card-view');
            const userTableBody = document.getElementById('userTableBody');
            const userCardGrid = document.getElementById('userCardGrid');
            const listLoader = document.getElementById('listLoader');
            const cardLoader = document.getElementById('cardLoader');
            const listEmpty = document.getElementById('listEmpty');
            const cardEmpty = document.getElementById('cardEmpty');
            const searchInput = document.getElementById('searchInput');
            
            // Modals
            const userModal = new bootstrap.Modal(document.getElementById('userModal'));
            const deleteModal = new bootstrap.Modal(document.getElementById('deleteModal'));
            
            // Forms and fields
            const userForm = document.getElementById('userForm');
            const userId = document.getElementById('userId');
            const nameField = document.getElementById('name');
            const emailField = document.getElementById('email');
            const roleField = document.getElementById('role');
            const statusField = document.getElementById('status');
            const passwordField = document.getElementById('password');
            const passwordHelpText = document.getElementById('passwordHelpText');
            
            // Buttons
            const addUserBtn = document.getElementById('addUserBtn');
            const saveUserBtn = document.getElementById('saveUserBtn');
            const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');
            
            // Alerts
            const successAlert = document.getElementById('successAlert');
            const errorAlert = document.getElementById('errorAlert');
            const successMessage = document.getElementById('successMessage');
            const errorMessage = document.getElementById('errorMessage');
            
            // Toggle view
            viewToggle.addEventListener('change', function() {
                if (this.checked) {
                    listView.classList.remove('view-active');
                    cardView.classList.add('view-active');
                } else {
                    cardView.classList.remove('view-active');
                    listView.classList.add('view-active');
                }
            });
            
            // Load users
            function loadUsers() {
                listLoader.style.display = 'block';
                cardLoader.style.display = 'block';
                
                console.log('Fetching users from:', '/admin/users/api/list');
                
                fetch('/admin/users/api/list', {
                    headers: {
                        'Accept': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    credentials: 'same-origin' // Include cookies for authentication
                })
                .then(response => {
                    console.log('Response status:', response.status, response.statusText);
                    console.log('Response headers:', 
                        Array.from(response.headers.entries()).reduce((obj, [key, value]) => {
                            obj[key] = value;
                            return obj;
                        }, {})
                    );
                    
                    // Get the raw response text first
                    return response.text().then(text => {
                        console.log('Raw response (first 300 chars):', text.substring(0, 300));
                        
                        // Check if the response is HTML
                        if (text.includes('<!DOCTYPE html>') || text.includes('<html>')) {
                            throw new Error('HTML output detected in response');
                        }
                        
                        // If it's not HTML, try to parse as JSON
                        try {
                            return JSON.parse(text);
                        } catch (e) {
                            console.error('JSON parse error:', e);
                            throw new Error('Invalid JSON: ' + text.substring(0, 100) + '...');
                        }
                    });
                })
                .then(data => {
                    console.log('Parsed data:', data);
                    if (data.success) {
                        renderUsers(data.users);
                    } else {
                        showError(data.message || 'Error loading users');
                    }
                })
                .catch(error => {
                    console.error('Error loading users:', error);
                    showError('Error loading users: ' + error.message);
                })
                .finally(() => {
                    listLoader.style.display = 'none';
                    cardLoader.style.display = 'none';
                });
            }
            
            // Render users in table and card views
            function renderUsers(users) {
                userTableBody.innerHTML = '';
                userCardGrid.innerHTML = '';
                
                if (users.length === 0) {
                    listEmpty.style.display = 'block';
                    cardEmpty.style.display = 'block';
                    return;
                }
                
                listEmpty.style.display = 'none';
                cardEmpty.style.display = 'none';
                
                users.forEach(user => {
                    // Table row
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${user.id}</td>
                        <td>${user.name}</td>
                        <td>${user.email}</td>
                        <td>${user.role === 'ROLE_ADMIN' ? 'Admin' : 'User'}</td>
                        <td><span class="badge ${user.accountStatus === 'active' ? 'bg-success' : 'bg-danger'} status-badge">${user.accountStatus}</span></td>
                        <td>
                            <button type="button" class="btn btn-sm btn-primary btn-icon edit-user" data-id="${user.id}">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button type="button" class="btn btn-sm btn-danger btn-icon delete-user" data-id="${user.id}" data-name="${user.name}">
                                <i class="fas fa-trash"></i>
                            </button>
                        </td>
                    `;
                    userTableBody.appendChild(row);
                    
                    // Card
                    const initials = user.name.split(' ').map(n => n[0]).join('').toUpperCase();
                    const col = document.createElement('div');
                    col.className = 'col-lg-3 col-md-4 col-sm-6 mb-4';
                    col.innerHTML = `
                        <div class="card user-card h-100">
                            <div class="card-body text-center">
                                <div class="user-avatar mb-3">
                                    ${user.profilePicture ? `<img src="${user.profilePicture}" alt="${user.name}">` : initials}
                                </div>
                                <h5 class="card-title mb-0">${user.name}</h5>
                                <p class="card-text text-muted">${user.email}</p>
                                <p class="card-text">
                                    <span class="badge ${user.role === 'ROLE_ADMIN' ? 'bg-info' : 'bg-secondary'}">${user.role === 'ROLE_ADMIN' ? 'Admin' : 'User'}</span>
                                    <span class="badge ${user.accountStatus === 'active' ? 'bg-success' : 'bg-danger'}">${user.accountStatus}</span>
                                </p>
                            </div>
                            <div class="card-footer d-flex justify-content-around">
                                <button type="button" class="btn btn-sm btn-primary edit-user" data-id="${user.id}">
                                    <i class="fas fa-edit me-1"></i> Edit
                                </button>
                                <button type="button" class="btn btn-sm btn-danger delete-user" data-id="${user.id}" data-name="${user.name}">
                                    <i class="fas fa-trash me-1"></i> Delete
                                </button>
                            </div>
                        </div>
                    `;
                    userCardGrid.appendChild(col);
                });
                
                // Attach event listeners to buttons
                document.querySelectorAll('.edit-user').forEach(button => {
                    button.addEventListener('click', function() {
                        const id = this.getAttribute('data-id');
                        editUser(id);
                    });
                });
                
                document.querySelectorAll('.delete-user').forEach(button => {
                    button.addEventListener('click', function() {
                        const id = this.getAttribute('data-id');
                        const name = this.getAttribute('data-name');
                        showDeleteModal(id, name);
                    });
                });
            }
            
            // Add user modal
            addUserBtn.addEventListener('click', function() {
                resetForm();
                document.getElementById('userModalLabel').textContent = 'Add New User';
                passwordField.setAttribute('required', 'required');
                passwordHelpText.style.display = 'none';
                userModal.show();
            });
            
            // Edit user
            function editUser(id) {
                fetch(`/admin/users/api/user/${id}`)
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            const user = data.user;
                            resetForm();
                            
                            userId.value = user.id;
                            nameField.value = user.name;
                            emailField.value = user.email;
                            roleField.value = user.role;
                            statusField.value = user.accountStatus;
                            
                            document.getElementById('userModalLabel').textContent = 'Edit User';
                            passwordField.removeAttribute('required');
                            passwordHelpText.style.display = 'block';
                            
                            userModal.show();
                        } else {
                            showError(data.message || 'Error loading user data');
                        }
                    })
                    .catch(error => {
                        showError('Error loading user data: ' + error.message);
                    });
            }
            
            // Save user
            saveUserBtn.addEventListener('click', function() {
                if (!validateForm()) return;
                
                const id = userId.value;
                const isNew = id === '';
                
                const userData = {
                    name: nameField.value,
                    email: emailField.value,
                    role: roleField.value,
                    accountStatus: statusField.value,
                    password: passwordField.value
                };
                
                const url = isNew ? '/admin/users/api/new' : `/admin/users/api/edit/${id}`;
                
                fetch(url, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(userData)
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        userModal.hide();
                        showSuccess(data.message || (isNew ? 'User added successfully' : 'User updated successfully'));
                        loadUsers();
                    } else {
                        showError(data.message || 'Error saving user');
                    }
                })
                .catch(error => {
                    showError('Error saving user: ' + error.message);
                });
            });
            
            // Delete user
            function showDeleteModal(id, name) {
                document.getElementById('deleteUserName').textContent = name;
                confirmDeleteBtn.setAttribute('data-id', id);
                deleteModal.show();
            }
            
            confirmDeleteBtn.addEventListener('click', function() {
                const id = this.getAttribute('data-id');
                
                fetch(`/admin/users/api/delete/${id}`, {
                    method: 'POST'
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        deleteModal.hide();
                        showSuccess(data.message || 'User deleted successfully');
                        loadUsers();
                    } else {
                        showError(data.message || 'Error deleting user');
                    }
                })
                .catch(error => {
                    showError('Error deleting user: ' + error.message);
                });
            });
            
            // Form validation
            function validateForm() {
                let isValid = true;
                
                // Reset all error messages
                document.querySelectorAll('.invalid-feedback').forEach(el => {
                    el.textContent = '';
                });
                document.querySelectorAll('.form-control, .form-select').forEach(el => {
                    el.classList.remove('is-invalid');
                });
                
                // Name validation
                if (!nameField.value.trim()) {
                    document.getElementById('nameError').textContent = 'Name is required';
                    nameField.classList.add('is-invalid');
                    isValid = false;
                }
                
                // Email validation
                if (!emailField.value.trim()) {
                    document.getElementById('emailError').textContent = 'Email is required';
                    emailField.classList.add('is-invalid');
                    isValid = false;
                } else if (!isValidEmail(emailField.value)) {
                    document.getElementById('emailError').textContent = 'Please enter a valid email address';
                    emailField.classList.add('is-invalid');
                    isValid = false;
                }
                
                // Role validation
                if (!roleField.value) {
                    document.getElementById('roleError').textContent = 'Please select a role';
                    roleField.classList.add('is-invalid');
                    isValid = false;
                }
                
                // Status validation
                if (!statusField.value) {
                    document.getElementById('statusError').textContent = 'Please select a status';
                    statusField.classList.add('is-invalid');
                    isValid = false;
                }
                
                // Password validation (required for new users)
                if (passwordField.hasAttribute('required') && !passwordField.value) {
                    document.getElementById('passwordError').textContent = 'Password is required for new users';
                    passwordField.classList.add('is-invalid');
                    isValid = false;
                } else if (passwordField.value && passwordField.value.length < 6) {
                    document.getElementById('passwordError').textContent = 'Password must be at least 6 characters';
                    passwordField.classList.add('is-invalid');
                    isValid = false;
                }
                
                return isValid;
            }
            
            // Helper functions
            function resetForm() {
                userForm.reset();
                userId.value = '';
                document.querySelectorAll('.invalid-feedback').forEach(el => {
                    el.textContent = '';
                });
                document.querySelectorAll('.form-control, .form-select').forEach(el => {
                    el.classList.remove('is-invalid');
                });
            }
            
            function isValidEmail(email) {
                const re = /\S+@\S+\.\S+/;
                return re.test(email);
            }
            
            function showSuccess(message) {
                successMessage.textContent = message;
                successAlert.classList.add('show');
                setTimeout(() => {
                    successAlert.classList.remove('show');
                }, 5000);
            }
            
            function showError(message) {
                errorMessage.textContent = message;
                errorAlert.classList.add('show');
                setTimeout(() => {
                    errorAlert.classList.remove('show');
                }, 5000);
            }
            
            // Search functionality
            searchInput.addEventListener('input', function() {
                const searchTerm = this.value.toLowerCase();
                
                const tableRows = userTableBody.querySelectorAll('tr');
                tableRows.forEach(row => {
                    const name = row.cells[1].textContent.toLowerCase();
                    const email = row.cells[2].textContent.toLowerCase();
                    
                    if (name.includes(searchTerm) || email.includes(searchTerm)) {
                        row.style.display = '';
                    } else {
                        row.style.display = 'none';
                    }
                });
                
                const cards = userCardGrid.querySelectorAll('.col-lg-3');
                cards.forEach(card => {
                    const name = card.querySelector('.card-title').textContent.toLowerCase();
                    const email = card.querySelector('.card-text').textContent.toLowerCase();
                    
                    if (name.includes(searchTerm) || email.includes(searchTerm)) {
                        card.style.display = '';
                    } else {
                        card.style.display = 'none';
                    }
                });
            });
            
            // Initial load and test
            function testApiEndpoint() {
                console.log('Testing API endpoint');
                showInfo('Testing API connection...');
                
                fetch('/admin/users/api/test', {
                    headers: {
                        'Accept': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    credentials: 'same-origin'
                })
                .then(response => response.text())
                .then(text => {
                    console.log('Test endpoint response:', text);
                    try {
                        const data = JSON.parse(text);
                        console.log('Parsed test data:', data);
                        if (data.success) {
                            showSuccess('API connection successful. Loading users...');
                            setTimeout(loadUsers, 1000); // Load users after a delay
                        } else {
                            showError('API test returned error: ' + (data.message || 'Unknown error'));
                        }
                    } catch (e) {
                        console.error('Test endpoint JSON parse error:', e);
                        if (text.includes('<!DOCTYPE html>') || text.includes('<html>')) {
                            showError('Authentication issue detected. Please ensure you are logged in as admin.');
                        } else {
                            showError('Invalid response from test endpoint');
                        }
                    }
                })
                .catch(error => {
                    console.error('Test endpoint error:', error);
                    showError('Could not connect to API: ' + error.message);
                });
            }
            
            function showInfo(message) {
                // Clear any existing messages
                successAlert.classList.remove('show');
                errorAlert.classList.remove('show');
                
                // Create info alert if not exists
                let infoAlert = document.getElementById('infoAlert');
                let infoMessage = document.getElementById('infoMessage');
                
                if (!infoAlert) {
                    infoAlert = document.createElement('div');
                    infoAlert.className = 'alert alert-info alert-dismissible fade';
                    infoAlert.id = 'infoAlert';
                    
                    infoMessage = document.createElement('span');
                    infoMessage.id = 'infoMessage';
                    infoAlert.appendChild(infoMessage);
                    
                    const closeButton = document.createElement('button');
                    closeButton.className = 'btn-close';
                    closeButton.setAttribute('data-bs-dismiss', 'alert');
                    closeButton.setAttribute('aria-label', 'Close');
                    infoAlert.appendChild(closeButton);
                    
                    const alertsContainer = successAlert.parentNode;
                    alertsContainer.insertBefore(infoAlert, successAlert);
                }
                
                infoMessage.textContent = message;
                infoAlert.classList.add('show');
            }

            // Initial load
            testApiEndpoint();
        });
    </script>
{% endblock %} 