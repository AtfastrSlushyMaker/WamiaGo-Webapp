{% extends 'back-office/base.html.twig' %}

{% block title %}User Management{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .toggle-container {
            display: flex;
            justify-content: flex-end;
            margin-bottom: 20px;
        }
        
        .view-toggle {
            background-color: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 0.25rem;
            padding: 5px;
        }
        
        .view-toggle .btn {
            border-radius: 0.2rem;
            padding: 0.375rem 0.75rem;
            background-color: transparent;
            border: none;
            color: #6c757d;
        }
        
        .view-toggle .btn.active {
            background-color: #007bff;
            color: #fff;
        }
        
        /* Card View */
        .user-card {
            border-radius: 0.5rem;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            transition: transform 0.2s, box-shadow 0.2s;
            margin-bottom: 1.5rem;
        }
        
        .user-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 6px 12px rgba(0,0,0,0.15);
        }
        
        .user-card .card-header {
            border-radius: 0.5rem 0.5rem 0 0;
            padding: 1rem;
            text-align: center;
            position: relative;
        }
        
        .user-card .avatar {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            object-fit: cover;
            margin: 0 auto 10px;
            border: 3px solid #fff;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        
        .user-card .card-body {
            padding: 1rem;
        }
        
        .user-card .status-badge {
            position: absolute;
            top: 10px;
            right: 10px;
            border-radius: 20px;
            padding: 3px 10px;
            font-size: 0.75rem;
            font-weight: bold;
        }
        
        .user-card .card-actions {
            display: flex;
            justify-content: space-around;
            padding: 0.75rem;
            border-top: 1px solid #dee2e6;
        }
        
        /* Table View */
        .users-table th {
            vertical-align: middle;
        }
        
        .users-table .user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            object-fit: cover;
        }
        
        /* Modals */
        .modal-header {
            border-bottom: 2px solid #f8f9fa;
        }
        
        .modal-footer {
            border-top: 2px solid #f8f9fa;
        }
        
        .delete-modal .modal-header {
            background-color: #f8d7da;
            color: #721c24;
        }
        
        .delete-modal .btn-delete {
            background-color: #dc3545;
            color: white;
        }
        
        /* Animations */
        .fade-enter {
            opacity: 0;
        }
        
        .fade-enter-active {
            opacity: 1;
            transition: opacity 0.3s;
        }
        
        .fade-exit {
            opacity: 1;
        }
        
        .fade-exit-active {
            opacity: 0;
            transition: opacity 0.3s;
        }
        
        /* Loading indicator */
        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.3);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 9999;
            visibility: hidden;
            opacity: 0;
            transition: visibility 0s linear 0.3s, opacity 0.3s;
        }
        
        .loading-overlay.active {
            visibility: visible;
            opacity: 1;
            transition-delay: 0s;
        }
        
        .loading-spinner {
            width: 50px;
            height: 50px;
            border: 5px solid #f3f3f3;
            border-top: 5px solid #3498db;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
{% endblock %}

{% block content_header %}
    <div class="content-header">
        <div class="container-fluid">
            <div class="row mb-2">
                <div class="col-sm-6">
                    <h1 class="m-0">User Management</h1>
                </div>
                <div class="col-sm-6">
                    <ol class="breadcrumb float-sm-right">
                        <li class="breadcrumb-item"><a href="#">Home</a></li>
                        <li class="breadcrumb-item active">User Management</li>
                    </ol>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block content %}
    <div class="container-fluid">
        <div class="card">
            <div class="card-header">
                <div class="d-flex justify-content-between align-items-center">
                    <h3 class="card-title">Users</h3>
                    <div class="d-flex">
                        <div class="view-toggle btn-group mr-3">
                            <button type="button" class="btn btn-sm active" id="list-view-btn">
                                <i class="fas fa-list"></i> List
                            </button>
                            <button type="button" class="btn btn-sm" id="card-view-btn">
                                <i class="fas fa-th-large"></i> Card
                            </button>
                        </div>
                        <button type="button" class="btn btn-primary btn-sm" id="add-user-btn">
                            <i class="fas fa-plus"></i> Add User
                        </button>
                    </div>
                </div>
            </div>
            <div class="card-body">
                <!-- List View -->
                <div id="list-view" class="view-container">
                    <table class="table table-bordered table-striped table-hover users-table">
                        <thead>
                            <tr>
                                <th class="text-center" style="width: 60px;">#</th>
                                <th style="width: 100px;">Avatar</th>
                                <th>Name</th>
                                <th>Email</th>
                                <th>Phone</th>
                                <th>Role</th>
                                <th>Status</th>
                                <th class="text-center" style="width: 150px;">Actions</th>
                            </tr>
                        </thead>
                        <tbody id="users-table-body">
                            <!-- User rows will be dynamically populated here -->
                        </tbody>
                    </table>
                </div>
                
                <!-- Card View -->
                <div id="card-view" class="view-container" style="display:none;">
                    <div class="row" id="users-card-container">
                        <!-- User cards will be dynamically populated here -->
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Edit User Modal -->
    <div class="modal fade" id="edit-user-modal" tabindex="-1" role="dialog" aria-labelledby="editUserModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editUserModalLabel">Edit User</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form id="edit-user-form">
                        <input type="hidden" id="edit-user-id">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="edit-name">Name</label>
                                    <input type="text" class="form-control" id="edit-name" name="name" required>
                                    <div class="invalid-feedback" data-field="name"></div>
                                </div>
                                <div class="form-group">
                                    <label for="edit-email">Email</label>
                                    <input type="email" class="form-control" id="edit-email" name="email" required>
                                    <div class="invalid-feedback" data-field="email"></div>
                                </div>
                                <div class="form-group">
                                    <label for="edit-phone">Phone</label>
                                    <input type="tel" class="form-control" id="edit-phone" name="phone">
                                    <div class="invalid-feedback" data-field="phone"></div>
                                </div>
                                <div class="form-group">
                                    <label for="edit-password">Password</label>
                                    <input type="password" class="form-control" id="edit-password" name="password" 
                                           placeholder="Leave blank to keep current password">
                                    <div class="invalid-feedback" data-field="password"></div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="edit-role">Role</label>
                                    <select class="form-control" id="edit-role" name="role" required>
                                        {% for role in roles %}
                                            <option value="{{ role.value }}">{{ role.value }}</option>
                                        {% endfor %}
                                    </select>
                                    <div class="invalid-feedback" data-field="role"></div>
                                </div>
                                <div class="form-group">
                                    <label for="edit-account-status">Account Status</label>
                                    <select class="form-control" id="edit-account-status" name="accountStatus" required>
                                        {% for status in account_statuses %}
                                            <option value="{{ status.value }}">{{ status.value }}</option>
                                        {% endfor %}
                                    </select>
                                    <div class="invalid-feedback" data-field="accountStatus"></div>
                                </div>
                                <div class="form-group">
                                    <label for="edit-gender">Gender</label>
                                    <select class="form-control" id="edit-gender" name="gender">
                                        {% for gender in genders %}
                                            <option value="{{ gender.value }}">{{ gender.value }}</option>
                                        {% endfor %}
                                    </select>
                                    <div class="invalid-feedback" data-field="gender"></div>
                                </div>
                                <div class="form-check mt-4">
                                    <input type="checkbox" class="form-check-input" id="edit-is-verified" name="isVerified">
                                    <label class="form-check-label" for="edit-is-verified">Verified Account</label>
                                    <div class="invalid-feedback" data-field="isVerified"></div>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="save-user-btn">Save Changes</button>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Add New User Modal -->
    <div class="modal fade" id="add-user-modal" tabindex="-1" role="dialog" aria-labelledby="addUserModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addUserModalLabel">Add New User</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form id="add-user-form">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="add-name">Name</label>
                                    <input type="text" class="form-control" id="add-name" name="name" required>
                                    <div class="invalid-feedback" data-field="name"></div>
                                </div>
                                <div class="form-group">
                                    <label for="add-email">Email</label>
                                    <input type="email" class="form-control" id="add-email" name="email" required>
                                    <div class="invalid-feedback" data-field="email"></div>
                                </div>
                                <div class="form-group">
                                    <label for="add-phone">Phone</label>
                                    <input type="tel" class="form-control" id="add-phone" name="phone">
                                    <div class="invalid-feedback" data-field="phone"></div>
                                </div>
                                <div class="form-group">
                                    <label for="add-password">Password</label>
                                    <input type="password" class="form-control" id="add-password" name="password" required>
                                    <div class="invalid-feedback" data-field="password"></div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="add-role">Role</label>
                                    <select class="form-control" id="add-role" name="role" required>
                                        {% for role in roles %}
                                            <option value="{{ role.value }}">{{ role.value }}</option>
                                        {% endfor %}
                                    </select>
                                    <div class="invalid-feedback" data-field="role"></div>
                                </div>
                                <div class="form-group">
                                    <label for="add-account-status">Account Status</label>
                                    <select class="form-control" id="add-account-status" name="accountStatus" required>
                                        {% for status in account_statuses %}
                                            <option value="{{ status.value }}">{{ status.value }}</option>
                                        {% endfor %}
                                    </select>
                                    <div class="invalid-feedback" data-field="accountStatus"></div>
                                </div>
                                <div class="form-group">
                                    <label for="add-gender">Gender</label>
                                    <select class="form-control" id="add-gender" name="gender">
                                        {% for gender in genders %}
                                            <option value="{{ gender.value }}">{{ gender.value }}</option>
                                        {% endfor %}
                                    </select>
                                    <div class="invalid-feedback" data-field="gender"></div>
                                </div>
                                <div class="form-check mt-4">
                                    <input type="checkbox" class="form-check-input" id="add-is-verified" name="isVerified">
                                    <label class="form-check-label" for="add-is-verified">Verified Account</label>
                                    <div class="invalid-feedback" data-field="isVerified"></div>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-success" id="create-user-btn">Create User</button>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Delete Confirmation Modal -->
    <div class="modal fade delete-modal" id="delete-user-modal" tabindex="-1" role="dialog" aria-labelledby="deleteUserModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteUserModalLabel">Confirm Delete</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete the user <strong id="delete-user-name"></strong>?</p>
                    <p class="text-danger">This action cannot be undone.</p>
                    <input type="hidden" id="delete-user-id">
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-delete" id="confirm-delete-btn">Delete User</button>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Loading Overlay -->
    <div class="loading-overlay" id="loading-overlay">
        <div class="loading-spinner"></div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // View toggle functionality
            const listViewBtn = document.getElementById('list-view-btn');
            const cardViewBtn = document.getElementById('card-view-btn');
            const listView = document.getElementById('list-view');
            const cardView = document.getElementById('card-view');
            
            listViewBtn.addEventListener('click', function() {
                listViewBtn.classList.add('active');
                cardViewBtn.classList.remove('active');
                listView.style.display = 'block';
                cardView.style.display = 'none';
                localStorage.setItem('userViewPreference', 'list');
            });
            
            cardViewBtn.addEventListener('click', function() {
                cardViewBtn.classList.add('active');
                listViewBtn.classList.remove('active');
                cardView.style.display = 'block';
                listView.style.display = 'none';
                localStorage.setItem('userViewPreference', 'card');
            });
            
            // Restore user preference if available
            const userViewPreference = localStorage.getItem('userViewPreference');
            if (userViewPreference === 'card') {
                cardViewBtn.click();
            } else {
                listViewBtn.click();
            }
            
            // Add User Modal
            const addUserBtn = document.getElementById('add-user-btn');
            const addUserModal = new bootstrap.Modal(document.getElementById('add-user-modal'));
            const createUserBtn = document.getElementById('create-user-btn');
            const addUserForm = document.getElementById('add-user-form');
            
            addUserBtn.addEventListener('click', function() {
                clearFormErrors(addUserForm);
                addUserForm.reset();
                addUserModal.show();
            });
            
            createUserBtn.addEventListener('click', function() {
                createUser();
            });
            
            // Load users when page is ready
            loadUsers();
        });
        
        // Load users from API
        function loadUsers() {
            showLoading();
            
            fetch('{{ path("admin_api_users_list") }}')
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Error fetching users');
                    }
                    return response.json();
                })
                .then(users => {
                    populateUserTable(users);
                    populateUserCards(users);
                    hideLoading();
                })
                .catch(error => {
                    console.error('Error:', error);
                    hideLoading();
                    showToast('error', 'Error loading users: ' + error.message);
                });
        }
        
        // Populate table with users
        function populateUserTable(users) {
            const tableBody = document.getElementById('users-table-body');
            tableBody.innerHTML = '';
            
            users.forEach(user => {
                const statusClass = getStatusClass(user.accountStatus);
                const row = document.createElement('tr');
                row.setAttribute('data-user-id', user.id);
                
                row.innerHTML = `
                    <td class="text-center">${user.id}</td>
                    <td class="text-center">
                        <img src="/images/${user.profilePicture}" alt="Avatar" class="user-avatar">
                    </td>
                    <td>${user.name}</td>
                    <td>${user.email}</td>
                    <td>${user.phone || '-'}</td>
                    <td>
                        <span class="badge badge-info">${user.role}</span>
                    </td>
                    <td>
                        <span class="badge ${statusClass}">${user.accountStatus}</span>
                        ${user.isVerified ? '<span class="badge badge-success ml-1">Verified</span>' : ''}
                    </td>
                    <td class="text-center">
                        <button type="button" class="btn btn-sm btn-info edit-user-btn" data-user-id="${user.id}">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button type="button" class="btn btn-sm btn-danger delete-user-btn" data-user-id="${user.id}" data-user-name="${user.name}">
                            <i class="fas fa-trash"></i>
                        </button>
                    </td>
                `;
                
                tableBody.appendChild(row);
            });
            
            // Attach event listeners to buttons
            attachTableButtonListeners();
        }
        
        // Populate card view with users
        function populateUserCards(users) {
            const cardsContainer = document.getElementById('users-card-container');
            cardsContainer.innerHTML = '';
            
            users.forEach(user => {
                const statusClass = getStatusClass(user.accountStatus);
                const cardCol = document.createElement('div');
                cardCol.className = 'col-xl-3 col-lg-4 col-md-6';
                
                cardCol.innerHTML = `
                    <div class="card user-card" data-user-id="${user.id}">
                        <div class="card-header bg-light">
                            <img src="/images/${user.profilePicture}" alt="Avatar" class="avatar">
                            <h5 class="mb-0">${user.name}</h5>
                            <span class="badge ${statusClass} status-badge">${user.accountStatus}</span>
                        </div>
                        <div class="card-body">
                            <p><i class="fas fa-envelope mr-2"></i>${user.email}</p>
                            <p><i class="fas fa-phone-alt mr-2"></i>${user.phone || 'Not provided'}</p>
                            <p><i class="fas fa-user-tag mr-2"></i>${user.role}</p>
                            ${user.isVerified ? 
                                '<p><i class="fas fa-check-circle text-success mr-2"></i>Verified Account</p>' : 
                                '<p><i class="fas fa-times-circle text-danger mr-2"></i>Not Verified</p>'
                            }
                        </div>
                        <div class="card-actions">
                            <button type="button" class="btn btn-sm btn-info edit-user-btn" data-user-id="${user.id}">
                                <i class="fas fa-edit mr-1"></i> Edit
                            </button>
                            <button type="button" class="btn btn-sm btn-danger delete-user-btn" data-user-id="${user.id}" data-user-name="${user.name}">
                                <i class="fas fa-trash mr-1"></i> Delete
                            </button>
                        </div>
                    </div>
                `;
                
                cardsContainer.appendChild(cardCol);
            });
            
            // Attach event listeners to buttons
            attachCardButtonListeners();
        }
        
        // Helper functions for status classes
        function getStatusClass(status) {
            switch(status) {
                case 'ACTIVE':
                    return 'badge-success';
                case 'SUSPENDED':
                    return 'badge-warning';
                case 'BANNED':
                    return 'badge-danger';
                default:
                    return 'badge-secondary';
            }
        }
        
        // Attach event listeners to table buttons
        function attachTableButtonListeners() {
            document.querySelectorAll('.users-table .edit-user-btn').forEach(button => {
                button.addEventListener('click', function() {
                    const userId = this.getAttribute('data-user-id');
                    openEditUserModal(userId);
                });
            });
            
            document.querySelectorAll('.users-table .delete-user-btn').forEach(button => {
                button.addEventListener('click', function() {
                    const userId = this.getAttribute('data-user-id');
                    const userName = this.getAttribute('data-user-name');
                    openDeleteConfirmationModal(userId, userName);
                });
            });
        }
        
        // Attach event listeners to card buttons
        function attachCardButtonListeners() {
            document.querySelectorAll('.user-card .edit-user-btn').forEach(button => {
                button.addEventListener('click', function() {
                    const userId = this.getAttribute('data-user-id');
                    openEditUserModal(userId);
                });
            });
            
            document.querySelectorAll('.user-card .delete-user-btn').forEach(button => {
                button.addEventListener('click', function() {
                    const userId = this.getAttribute('data-user-id');
                    const userName = this.getAttribute('data-user-name');
                    openDeleteConfirmationModal(userId, userName);
                });
            });
        }
        
        // Open edit user modal with user data
        function openEditUserModal(userId) {
            showLoading();
            
            fetch(`{{ path('admin_api_user_get', {'id': 'USER_ID'}) }}`.replace('USER_ID', userId))
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Error fetching user details');
                    }
                    return response.json();
                })
                .then(user => {
                    // Populate form fields
                    document.getElementById('edit-user-id').value = user.id;
                    document.getElementById('edit-name').value = user.name;
                    document.getElementById('edit-email').value = user.email;
                    document.getElementById('edit-phone').value = user.phone || '';
                    document.getElementById('edit-role').value = user.role;
                    document.getElementById('edit-account-status').value = user.accountStatus;
                    document.getElementById('edit-gender').value = user.gender;
                    document.getElementById('edit-is-verified').checked = user.isVerified;
                    document.getElementById('edit-password').value = ''; // Clear password field
                    
                    // Clear any previous errors
                    clearFormErrors(document.getElementById('edit-user-form'));
                    
                    // Show modal
                    const editModal = new bootstrap.Modal(document.getElementById('edit-user-modal'));
                    editModal.show();
                    hideLoading();
                })
                .catch(error => {
                    console.error('Error:', error);
                    hideLoading();
                    showToast('error', 'Error loading user details: ' + error.message);
                });
                
            // Add event listener for save button
            document.getElementById('save-user-btn').onclick = function() {
                updateUser();
            };
        }
        
        // Update user data
        function updateUser() {
            const userId = document.getElementById('edit-user-id').value;
            const userData = {
                name: document.getElementById('edit-name').value,
                email: document.getElementById('edit-email').value,
                phone: document.getElementById('edit-phone').value,
                role: document.getElementById('edit-role').value,
                accountStatus: document.getElementById('edit-account-status').value,
                gender: document.getElementById('edit-gender').value,
                isVerified: document.getElementById('edit-is-verified').checked,
            };
            
            // Only include password if it's not empty
            const password = document.getElementById('edit-password').value;
            if (password) {
                userData.password = password;
            }
            
            showLoading();
            
            fetch(`{{ path('admin_api_user_update', {'id': 'USER_ID'}) }}`.replace('USER_ID', userId), {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': '{{ csrf_token('user_management') }}'
                },
                body: JSON.stringify(userData)
            })
                .then(response => response.json())
                .then(data => {
                    hideLoading();
                    
                    if (data.success) {
                        // Close modal
                        const editModal = bootstrap.Modal.getInstance(document.getElementById('edit-user-modal'));
                        editModal.hide();
                        
                        // Refresh user list
                        loadUsers();
                        showToast('success', data.message);
                    } else {
                        // Show validation errors
                        if (data.errors) {
                            displayFormErrors(document.getElementById('edit-user-form'), data.errors);
                        } else {
                            showToast('error', data.message || 'An error occurred while updating the user');
                        }
                    }
                })
                .catch(error => {
                    hideLoading();
                    console.error('Error:', error);
                    showToast('error', 'Error updating user: ' + error.message);
                });
        }
        
        // Create new user
        function createUser() {
            const userData = {
                name: document.getElementById('add-name').value,
                email: document.getElementById('add-email').value,
                phone: document.getElementById('add-phone').value,
                password: document.getElementById('add-password').value,
                role: document.getElementById('add-role').value,
                accountStatus: document.getElementById('add-account-status').value,
                gender: document.getElementById('add-gender').value,
                isVerified: document.getElementById('add-is-verified').checked,
            };
            
            showLoading();
            
            fetch('{{ path('admin_api_user_create') }}', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': '{{ csrf_token('user_management') }}'
                },
                body: JSON.stringify(userData)
            })
                .then(response => response.json())
                .then(data => {
                    hideLoading();
                    
                    if (data.success) {
                        // Close modal
                        const addModal = bootstrap.Modal.getInstance(document.getElementById('add-user-modal'));
                        addModal.hide();
                        
                        // Refresh user list
                        loadUsers();
                        showToast('success', data.message);
                    } else {
                        // Show validation errors
                        if (data.errors) {
                            displayFormErrors(document.getElementById('add-user-form'), data.errors);
                        } else {
                            showToast('error', data.message || 'An error occurred while creating the user');
                        }
                    }
                })
                .catch(error => {
                    hideLoading();
                    console.error('Error:', error);
                    showToast('error', 'Error creating user: ' + error.message);
                });
        }
        
        // Open delete confirmation modal
        function openDeleteConfirmationModal(userId, userName) {
            document.getElementById('delete-user-id').value = userId;
            document.getElementById('delete-user-name').textContent = userName;
            
            const deleteModal = new bootstrap.Modal(document.getElementById('delete-user-modal'));
            deleteModal.show();
            
            // Add event listener for confirm delete button
            document.getElementById('confirm-delete-btn').onclick = function() {
                deleteUser(userId);
            };
        }
        
        // Delete user
        function deleteUser(userId) {
            showLoading();
            
            fetch(`{{ path('admin_api_user_delete', {'id': 'USER_ID'}) }}`.replace('USER_ID', userId), {
                method: 'POST',
                headers: {
                    'X-CSRF-TOKEN': '{{ csrf_token('user_management') }}'
                }
            })
                .then(response => response.json())
                .then(data => {
                    hideLoading();
                    
                    if (data.success) {
                        // Close modal
                        const deleteModal = bootstrap.Modal.getInstance(document.getElementById('delete-user-modal'));
                        deleteModal.hide();
                        
                        // Refresh user list
                        loadUsers();
                        showToast('success', data.message);
                    } else {
                        showToast('error', data.message || 'An error occurred while deleting the user');
                    }
                })
                .catch(error => {
                    hideLoading();
                    console.error('Error:', error);
                    showToast('error', 'Error deleting user: ' + error.message);
                });
        }
        
        // Helper functions for form validation
        function clearFormErrors(form) {
            form.querySelectorAll('.is-invalid').forEach(field => {
                field.classList.remove('is-invalid');
            });
            
            form.querySelectorAll('.invalid-feedback').forEach(feedback => {
                feedback.textContent = '';
            });
        }
        
        function displayFormErrors(form, errors) {
            clearFormErrors(form);
            
            errors.forEach(error => {
                // Try to find the field by error path
                const fieldName = error.split(':')[0]; // Assumes format "field: message"
                const message = error.substring(error.indexOf(':') + 1).trim();
                
                const field = form.querySelector(`[name="${fieldName}"]`);
                if (field) {
                    field.classList.add('is-invalid');
                    const feedback = form.querySelector(`.invalid-feedback[data-field="${fieldName}"]`);
                    if (feedback) {
                        feedback.textContent = message;
                    }
                }
            });
        }
        
        // Loading indicator functions
        function showLoading() {
            document.getElementById('loading-overlay').classList.add('active');
        }
        
        function hideLoading() {
            document.getElementById('loading-overlay').classList.remove('active');
        }
        
        // Toast notification function
        function showToast(type, message) {
            // Check if Toast notification library is available
            if (typeof toastr !== 'undefined') {
                toastr[type](message);
            } else {
                // Fallback to alert
                alert(message);
            }
        }
    </script>
{% endblock %}
