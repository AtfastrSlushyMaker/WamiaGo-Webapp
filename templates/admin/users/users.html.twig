{% extends 'back-office/base.html.twig' %}

{% block title %}User Management  - WamiaGo{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="{{ asset('css/user-management.css') }}">
{% endblock %}

{% block content_header %}
    <div class="content-header">
        <div class="container-fluid">
            <div class="row mb-2 align-items-center">
                <div class="col-sm-6">
                    <h1 class="m-0"><i class="fas fa-users mr-3 text-primary"></i>User Management</h1>
                </div>
                <div class="col-sm-6">
                    <ol class="breadcrumb float-sm-right bg-transparent p-0 m-0">
                        <li class="breadcrumb-item"><a href="#" class="text-decoration-none"><i class="fas fa-home mr-1"></i>Home</a></li>
                        <li class="breadcrumb-item active">User Management</li>
                    </ol>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block content %}
    <div class="container-fluid user-management">
        <div class="row mb-4">
            <div class="col-md-12">
                <!-- Stats Cards -->
                <div class="row mb-4">
                    <div class="col-xl-3 col-md-6">
                        <div class="card bg-gradient-primary text-white mb-4" style="border-radius: 15px; box-shadow: 0 5px 15px rgba(71, 118, 230, 0.2);">
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        <h5 class="mb-0 font-weight-bold">Total Users</h5>
                                        <h2 class="mt-2 mb-0" id="total-users-count">-</h2>
                                    </div>
                                    <div class="icon-circle bg-white text-primary">
                                        <i class="fas fa-users fa-2x"></i>
                                    </div>
                                </div>
                            </div>
                            <div class="card-footer d-flex align-items-center justify-content-between" style="background-color: rgba(0,0,0,0.1); border: none;">
                                <a class="small text-white stretched-link" href="#">View Details</a>
                                <div class="small text-white"><i class="fas fa-angle-right"></i></div>
                            </div>
                        </div>
                    </div>
                    <div class="col-xl-3 col-md-6">
                        <div class="card bg-gradient-success text-white mb-4" style="border-radius: 15px; box-shadow: 0 5px 15px rgba(45, 206, 137, 0.2);">
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        <h5 class="mb-0 font-weight-bold">Active Users</h5>
                                        <h2 class="mt-2 mb-0" id="active-users-count">-</h2>
                                    </div>
                                    <div class="icon-circle bg-white text-success">
                                        <i class="fas fa-user-check fa-2x"></i>
                                    </div>
                                </div>
                            </div>
                            <div class="card-footer d-flex align-items-center justify-content-between" style="background-color: rgba(0,0,0,0.1); border: none;">
                                <a class="small text-white stretched-link" href="#">View Details</a>
                                <div class="small text-white"><i class="fas fa-angle-right"></i></div>
                            </div>
                        </div>
                    </div>
                    <div class="col-xl-3 col-md-6">
                        <div class="card bg-gradient-warning text-white mb-4" style="border-radius: 15px; box-shadow: 0 5px 15px rgba(245, 159, 0, 0.2);">
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        <h5 class="mb-0 font-weight-bold">Suspended</h5>
                                        <h2 class="mt-2 mb-0" id="suspended-users-count">-</h2>
                                    </div>
                                    <div class="icon-circle bg-white text-warning">
                                        <i class="fas fa-user-clock fa-2x"></i>
                                    </div>
                                </div>
                            </div>
                            <div class="card-footer d-flex align-items-center justify-content-between" style="background-color: rgba(0,0,0,0.1); border: none;">
                                <a class="small text-white stretched-link" href="#">View Details</a>
                                <div class="small text-white"><i class="fas fa-angle-right"></i></div>
                            </div>
                        </div>
                    </div>
                    <div class="col-xl-3 col-md-6">
                        <div class="card bg-gradient-danger text-white mb-4" style="border-radius: 15px; box-shadow: 0 5px 15px rgba(245, 54, 92, 0.2);">
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        <h5 class="mb-0 font-weight-bold">Banned Users</h5>
                                        <h2 class="mt-2 mb-0" id="banned-users-count">-</h2>
                                    </div>
                                    <div class="icon-circle bg-white text-danger">
                                        <i class="fas fa-user-slash fa-2x"></i>
                                    </div>
                                </div>
                            </div>
                            <div class="card-footer d-flex align-items-center justify-content-between" style="background-color: rgba(0,0,0,0.1); border: none;">
                                <a class="small text-white stretched-link" href="#">View Details</a>
                                <div class="small text-white"><i class="fas fa-angle-right"></i></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="card main-card">
            <div class="card-header">
                <div class="d-flex justify-content-between align-items-center">
                    <h3 class="card-title"><i class="fas fa-users-cog mr-2"></i>User Management</h3>
                    <div class="d-flex">
                        <div class="view-toggle btn-group mr-3">
                            <button type="button" class="btn active" id="list-view-btn">
                                <i class="fas fa-list-ul"></i> <span>List</span>
                            </button>
                            <button type="button" class="btn" id="card-view-btn">
                                <i class="fas fa-th-large"></i> <span>Grid</span>
                            </button>
                        </div>
                        <button type="button" class="btn btn-rounded btn-add-user" id="add-user-btn">
                            <i class="fas fa-plus-circle mr-1"></i> Add User
                        </button>
                    </div>
                </div>
            </div>
            <div class="card-body">
                <!-- Enhanced Search and Filter Bar -->
                <div class="filter-controls">
                    <div class="row align-items-end">
                        <div class="col-lg-4 col-md-6 mb-3 mb-lg-0">
                            <label for="user-search" class="form-label"><i class="fas fa-search mr-1"></i> Search</label>
                            <div class="input-group">
                                <input type="text" class="form-control" id="user-search" placeholder="Name, email, phone...">
                                <div class="input-group-append">
                                    <button class="btn btn-primary filter-btn" id="search-btn" type="button">
                                        <i class="fas fa-search"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                        
                        <div class="col-lg-2 col-md-3 col-sm-6 mb-3 mb-lg-0">
                            <label for="filter-status" class="form-label"><i class="fas fa-user-shield mr-1"></i> Status</label>
                            <select class="form-control custom-select" id="filter-status">
                                <option value="">All Statuses</option>
                                {% for status in account_statuses %}
                                    <option value="{{ status.value }}">{{ status.value }}</option>
                                {% endfor %}
                            </select>
                        </div>
                        
                        <div class="col-lg-2 col-md-3 col-sm-6 mb-3 mb-lg-0">
                            <label for="filter-role" class="form-label"><i class="fas fa-user-tag mr-1"></i> Role</label>
                            <select class="form-control custom-select" id="filter-role">
                                <option value="">All Roles</option>
                                {% for role in roles %}
                                    <option value="{{ role.value }}">{{ role.value }}</option>
                                {% endfor %}
                            </select>
                        </div>
                        
                        <div class="col-lg-2 col-md-3 col-sm-6 mb-3 mb-lg-0">
                            <label for="filter-verified" class="form-label"><i class="fas fa-check-circle mr-1"></i> Verification</label>
                            <select class="form-control custom-select" id="filter-verified">
                                <option value="">All Users</option>
                                <option value="true">Verified</option>
                                <option value="false">Not Verified</option>
                            </select>
                        </div>
                        
                        <div class="col-lg-2 col-md-3 col-sm-6">
                            <div class="d-flex">
                                <button type="button" class="btn btn-primary filter-btn flex-fill mr-2" id="apply-filters-btn">
                                    <i class="fas fa-filter mr-1"></i> Apply
                                </button>
                                <button type="button" class="btn btn-outline-secondary filter-btn" id="reset-filters-btn">
                                    <i class="fas fa-redo"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- List View -->
                <div id="list-view" class="view-container">
                    <div class="table-responsive">
                        <table class="table users-table">
                            <thead>
                                <tr>
                                    <th class="text-center" style="width: 60px;">#</th>
                                    <th style="width: 100px;">User</th>
                                    <th>Contact Info</th>
                                    <th>Role</th>
                                    <th>Status</th>
                                    <th class="text-center" style="width: 150px;">Actions</th>
                                </tr>
                            </thead>
                            <tbody id="users-table-body">
                                <!-- User rows will be dynamically populated here -->
                            </tbody>
                        </table>
                    </div>
                    
                    <!-- Enhanced Pagination -->
                    <div class="d-flex justify-content-between align-items-center mt-4">
                        <div class="text-muted">
                            Showing <span id="showing-results">0</span> of <span id="total-results">0</span> users
                        </div>
                        <div class="pagination-container" data-results-id="showing-results" data-total-id="total-results">
                            <!-- Dynamic pagination will be generated here -->
                        </div>
                        <div class="d-flex align-items-center">
                            <label for="page-size" class="mb-0 mr-2 text-nowrap">Items per page:</label>
                            <select id="page-size" class="form-control form-control-sm" style="width: 70px;">
                                <option value="10">10</option>
                                <option value="25">25</option>
                                <option value="50">50</option>
                                <option value="100">100</option>
                            </select>
                        </div>
                    </div>
                </div>
                
                <!-- Card View -->
                <div id="card-view" class="view-container" style="display:none;">
                    <div class="row" id="users-card-container">
                        <!-- User cards will be dynamically populated here -->
                    </div>
                    
                    <!-- Pagination for Card View -->
                    <div class="d-flex justify-content-between align-items-center mt-4">
                        <div class="text-muted">
                            Showing <span id="showing-results-cards">0</span> of <span id="total-results-cards">0</span> users
                        </div>
                        <nav aria-label="User navigation cards">
                            <ul class="pagination pagination-sm">
                                <li class="page-item disabled">
                                    <a class="page-link" href="#" tabindex="-1" aria-disabled="true">
                                        <i class="fas fa-chevron-left"></i>
                                    </a>
                                </li>
                                <li class="page-item active"><a class="page-link" href="#">1</a></li>
                                <li class="page-item"><a class="page-link" href="#">2</a></li>
                                <li class="page-item"><a class="page-link" href="#">3</a></li>
                                <li class="page-item">
                                    <a class="page-link" href="#">
                                        <i class="fas fa-chevron-right"></i>
                                    </a>
                                </li>
                            </ul>
                        </nav>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Include the modals with empty forms, they will be populated dynamically -->
    {% include 'admin/users/edit.html.twig' with {'form': form_edit|default(null)} %}
    {% include 'admin/users/new.html.twig' with {'form': form_new|default(null)} %}
    {% include 'admin/users/delete.html.twig' with {'form': form_delete|default(null)} %}
    
    <!-- Loading Overlay -->
    <div class="loading-overlay" id="loading-overlay">
        <div class="loading-spinner-container">
            <div class="loading-spinner"></div>
            <div class="loading-text">Processing...</div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <!-- Pass route URLs to the external JavaScript file -->
    <script>
        // Set route URLs as global variables for the JS file
        window.addUserRouteUrl = "{{ path('admin_user_new') }}";
        window.apiRouteUrl = "{{ path('admin_api_users_list') }}";
        window.userGetUrl = "{{ path('admin_api_user_get', {'id': 'USER_ID'}) }}";
        window.userEditUrl = "{{ path('admin_user_edit', {'id': 'USER_ID'}) }}";
        window.userUpdateUrl = "{{ path('admin_api_user_update', {'id': 'USER_ID'}) }}";
        window.userDeleteUrl = "{{ path('admin_user_delete', {'id': 'USER_ID'}) }}";
        window.userDeleteApiUrl = "{{ path('admin_api_user_delete', {'id': 'USER_ID'}) }}";
        window.userCreateUrl = "{{ path('admin_api_user_create') }}";
    </script>
    <script src="{{ asset('js/user-management.js') }}"></script>
{% endblock %}
            
            document.getElementById('add-cancel-btn').addEventListener('click', function() {
                addUserModal.hide();
            });
            
            document.getElementById('delete-cancel-btn').addEventListener('click', function() {
                deleteUserModal.hide();
            });
            
            // Add User Modal
            const addUserBtn = document.getElementById('add-user-btn');
            const createUserBtn = document.getElementById('create-user-btn');
            const addUserForm = document.getElementById('add-user-form');
            
            addUserBtn.addEventListener('click', function() {
                clearFormErrors(addUserForm);
                addUserForm.reset();
                
                // Fetch the new user form with CSRF token
                fetch("{{ path('admin_user_new') }}", {
                    headers: {
                        "X-Requested-With": "XMLHttpRequest"
                    }
                })
                .then(response => response.text())
                .then(html => {
                    // Replace modal content with the form
                    const tempDiv = document.createElement('div');
                    tempDiv.innerHTML = html;
                    const newForm = tempDiv.querySelector('form');
                    if (newForm) {
                        addUserForm.innerHTML = newForm.innerHTML;
                        
                        // Re-initialize password strength meter
                        initPasswordStrengthMeter();
                    }
                    
                    // Show the modal
                    addUserModal.show();
                });
            });
            
            createUserBtn.addEventListener('click', function() {
                createUser();
            });
            
            // Password visibility toggle
            function initPasswordToggle() {
                document.querySelectorAll('.toggle-password').forEach(button => {
                    button.addEventListener('click', function() {
                        const passwordInput = this.closest('.input-group').querySelector('input');
                        const icon = this.querySelector('i');
                        
                        if (passwordInput.type === 'password') {
                            passwordInput.type = 'text';
                            icon.classList.remove('fa-eye');
                            icon.classList.add('fa-eye-slash');
                        } else {
                            passwordInput.type = 'password';
                            icon.classList.remove('fa-eye-slash');
                            icon.classList.add('fa-eye');
                        }
                    });
                });
            }
            
            // Initialize password visibility toggles
            initPasswordToggle();
            
            // Initialize password strength meter
            function initPasswordStrengthMeter() {
                const addPasswordInput = document.getElementById('add-password');
                if (addPasswordInput) {
                    const strengthMeter = document.querySelector('.password-strength-meter');
                    const strengthText = document.querySelector('.password-strength-text');
                    
                    addPasswordInput.addEventListener('input', function() {
                        const password = this.value;
                        
                        if (password) {
                            strengthMeter.style.display = 'block';
                            const strength = checkPasswordStrength(password);
                            updatePasswordStrengthUI(strength, strengthMeter, strengthText);
                        } else {
                            strengthMeter.style.display = 'none';
                            strengthText.textContent = '';
                        }
                    });
                }
            }
            
            // Initialize password strength meter on page load
            initPasswordStrengthMeter();
            
            // Search functionality
            const searchInput = document.getElementById('user-search');
            const filterStatus = document.getElementById('filter-status');
            const filterRole = document.getElementById('filter-role');
            
            function applyFilters() {
                const searchTerm = searchInput.value.toLowerCase();
                const statusFilter = filterStatus.value;
                const roleFilter = filterRole.value;
                
                // Apply filters here when we have the actual data
                // For now, just reload users
                loadUsers();
            }
            
            searchInput.addEventListener('input', debounce(applyFilters, 500));
            filterStatus.addEventListener('change', applyFilters);
            filterRole.addEventListener('change', applyFilters);
            
            // Load users when page is ready
            loadUsers();
            
            // Helper function for debounce
            function debounce(func, wait) {
                let timeout;
                return function(...args) {
                    clearTimeout(timeout);
                    timeout = setTimeout(() => func.apply(this, args), wait);
                };
            }
            
            // Check password strength
            function checkPasswordStrength(password) {
                let strength = 0;
                
                if (password.length >= 8) strength += 1;
                if (/[A-Z]/.test(password)) strength += 1;
                if (/[a-z]/.test(password)) strength += 1;
                if (/[0-9]/.test(password)) strength += 1;
                if (/[^A-Za-z0-9]/.test(password)) strength += 1;
                
                return strength;
            }
            
            // Update password strength UI
            function updatePasswordStrengthUI(strength, meter, text) {
                const progressBar = meter.querySelector('.progress-bar');
                
                switch(strength) {
                    case 0:
                    case 1:
                        progressBar.style.width = '20%';
                        progressBar.className = 'progress-bar bg-danger';
                        text.textContent = 'Very Weak Password';
                        break;
                    case 2:
                        progressBar.style.width = '40%';
                        progressBar.className = 'progress-bar bg-warning';
                        text.textContent = 'Weak Password';
                        break;
                    case 3:
                        progressBar.style.width = '60%';
                        progressBar.className = 'progress-bar bg-info';
                        text.textContent = 'Moderate Password';
                        break;
                    case 4:
                        progressBar.style.width = '80%';
                        progressBar.className = 'progress-bar bg-primary';
                        text.textContent = 'Strong Password';
                        break;
                    case 5:
                        progressBar.style.width = '100%';
                        progressBar.className = 'progress-bar bg-success';
                        text.textContent = 'Very Strong Password';
                        break;
                }
            }
            
            // Load users from API
            function loadUsers() {
                showLoading();
                
                fetch('{{ path("admin_api_users_list") }}')
                    .then(function(response) {
                        if (!response.ok) {
                            console.error('API Response Status:', response.status, response.statusText);
                            return response.text().then(text => {
                                console.error('API Response Body:', text);
                                throw new Error('Error fetching users: ' + response.status + ' ' + response.statusText);
                            });
                        }
                        return response.json();
                    })
                    .then(function(data) {
                        // Handle the structured response with rows and total
                        console.log('Users loaded successfully:', data.rows.length, 'Total:', data.total);
                        populateUserTable(data.rows);
                        populateUserCards(data.rows);
                        updateUserCounts(data.rows);
                        hideLoading();
                    })
                    .catch(function(error) {
                        console.error('Error details:', error);
                        hideLoading();
                        showToast('error', 'Error loading users: ' + error.message);
                    });
            }
            
            // Update user counts in dashboard cards
            function updateUserCounts(users) {
                // Count total users
                document.getElementById('total-users-count').textContent = users.length;
                document.getElementById('showing-results').textContent = users.length;
                document.getElementById('total-results').textContent = users.length;
                document.getElementById('showing-results-cards').textContent = users.length;
                document.getElementById('total-results-cards').textContent = users.length;
                
                // Count active, suspended and banned users
                let activeCount = 0;
                let suspendedCount = 0;
                let bannedCount = 0;
                
                users.forEach(user => {
                    switch(user.accountStatus) {
                        case 'ACTIVE':
                            activeCount++;
                            break;
                        case 'SUSPENDED':
                            suspendedCount++;
                            break;
                        case 'BANNED':
                            bannedCount++;
                            break;
                    }
                });
                
                document.getElementById('active-users-count').textContent = activeCount;
                document.getElementById('suspended-users-count').textContent = suspendedCount;
                document.getElementById('banned-users-count').textContent = bannedCount;
            }
            
            // Populate table with users
            function populateUserTable(users) {
                const tableBody = document.getElementById('users-table-body');
                tableBody.innerHTML = '';
                
                users.forEach(user => {
                    const statusClass = getStatusClass(user.accountStatus);
                    const row = document.createElement('tr');
                    row.setAttribute('data-user-id', user.id);
                    
                    // Generate user initials from name
                    const nameParts = user.name.trim().split(' ');
                    const initials = nameParts.length > 1 
                        ? (nameParts[0][0] + nameParts[1][0]).toUpperCase()
                        : (nameParts[0][0] + (nameParts[0][1] || '')).toUpperCase();
                    
                    // Get proper gender icon
                    const genderIcon = getGenderIcon(user.gender);
                    
                    // Get status icon and class
                    const statusIconClass = getStatusIconClass(user.accountStatus);
                    
                    row.innerHTML = `
                        <td class="text-center">${user.id}</td>
                        <td>
                            <div class="d-flex align-items-center">
                                ${user.profilePicture && user.profilePicture !== 'default-avatar.png' 
                                    ? `<img src="/images/${user.profilePicture}" alt="Avatar" class="user-avatar">`
                                    : `<div class="avatar-initials role-${user.role}">${initials}</div>`
                                }
                                <div class="user-info-container">
                                    <span class="user-name">${user.name}</span>
                                    <span class="gender-indicator">
                                        <i class="${genderIcon.icon}" style="margin-right: 4px;"></i> ${user.gender || 'Not specified'}
                                    </span>
                                </div>
                            </div>
                        </td>
                        <td>
                            <div class="contact-info">
                                <div class="contact-info-item">
                                    <span class="user-detail-icon"><i class="fas fa-envelope"></i></span>
                                    <span class="user-detail-value">${user.email}</span>
                                </div>
                                <div class="contact-info-item">
                                    <span class="user-detail-icon"><i class="fas fa-phone-alt"></i></span>
                                    <span class="user-detail-value">${user.phoneNumber || 'Not provided'}</span>
                                </div>
                                ${user.dateOfBirth ?
                                `<div class="contact-info-item">
                                    <span class="user-detail-icon"><i class="fas fa-birthday-cake"></i></span>
                                    <span class="user-detail-value">${user.dateOfBirth}</span>
                                </div>` : ''}
                            </div>
                        </td>
                        <td>
                            <span class="badge badge-role">${user.role}</span>
                        </td>
                        <td>
                            <span class="user-status-pill status-${user.accountStatus.toLowerCase()}">
                                <i class="${statusIconClass.icon}"></i> ${user.accountStatus}
                            </span>
                            ${user.isVerified 
                                ? '<div class="mt-1"><i class="fas fa-check-circle text-success"></i> <small>Verified</small></div>' 
                                : '<div class="mt-1"><i class="fas fa-times-circle text-danger"></i> <small>Not Verified</small></div>'}
                        </td>
                        <td>
                            <div class="d-flex justify-content-center">
                                <button type="button" class="btn btn-icon btn-edit edit-user-btn" data-user-id="${user.id}" title="Edit User">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button type="button" class="btn btn-icon btn-delete delete-user-btn" data-user-id="${user.id}" data-user-name="${user.name}" title="Delete User">
                                    <i class="fas fa-trash-alt"></i>
                                </button>
                            </div>
                        </td>
                    `;
                    
                    tableBody.appendChild(row);
                });
                
                // Attach event listeners to buttons
                attachTableButtonListeners();
            }
            
            // Populate card view with users
            function populateUserCards(users) {
                const cardsContainer = document.getElementById('users-card-container');
                cardsContainer.innerHTML = '';
                
                users.forEach(user => {
                    const statusClass = getStatusClass(user.accountStatus);
                    const cardCol = document.createElement('div');
                    cardCol.className = 'col-xl-3 col-lg-4 col-md-6';
                    
                    // Generate a gradient background based on user role
                    const gradientClass = getGradientByRole(user.role);
                    
                    // Generate user initials from name
                    const nameParts = user.name.trim().split(' ');
                    const initials = nameParts.length > 1 
                        ? (nameParts[0][0] + nameParts[1][0]).toUpperCase()
                        : (nameParts[0][0] + (nameParts[0][1] || '')).toUpperCase();
                    
                    // Get status icon and class
                    const statusIconClass = getStatusIconClass(user.accountStatus);
                    
                    cardCol.innerHTML = `
                        <div class="card user-card shadow-sm" data-user-id="${user.id}">
                            <div class="card-header ${gradientClass}">
                                <span class="badge ${statusClass} status-badge">
                                    <i class="${statusIconClass.icon} mr-1"></i> ${user.accountStatus}
                                </span>
                            </div>
                            
                            <div class="avatar-container">
                                ${user.profilePicture && user.profilePicture !== 'default-avatar.png' 
                                    ? `<img src="/images/${user.profilePicture}" alt="Avatar" class="avatar">`
                                    : `<div class="avatar-initials role-${user.role}">${initials}</div>`
                                }
                                ${user.isVerified ? '<span class="verified-badge" title="Verified Account"><i class="fas fa-check-circle"></i></span>' : ''}
                            </div>
                            
                            <div class="card-body">
                                <h5 class="user-name">${user.name}</h5>
                                
                                <div class="d-flex justify-content-center mb-3">
                                    <span class="user-role badge badge-role">${user.role}</span>
                                    ${user.isVerified ? 
                                        '<span class="badge badge-success ml-2"><i class="fas fa-check-circle mr-1"></i>Verified</span>' : 
                                        '<span class="badge badge-secondary ml-2"><i class="fas fa-times-circle mr-1"></i>Not Verified</span>'
                                    }
                                </div>
                                
                                <div class="user-card-details">
                                    <div class="detail-item">
                                        <div class="detail-icon">
                                            <i class="fas fa-envelope"></i>
                                        </div>
                                        <div class="detail-content">
                                            <span class="detail-label">Email</span>
                                            <span class="detail-value text-truncate">${user.email}</span>
                                        </div>
                                    </div>
                                    
                                    <div class="detail-item">
                                        <div class="detail-icon">
                                            <i class="fas fa-phone-alt"></i>
                                        </div>
                                        <div class="detail-content">
                                            <span class="detail-label">Phone</span>
                                            <span class="detail-value">${user.phoneNumber || 'Not provided'}</span>
                                        </div>
                                    </div>
                                    
                                    <div class="detail-item">
                                        <div class="detail-icon">
                                            <i class="${getGenderIcon(user.gender).icon}" style="color: ${getGenderIcon(user.gender).color}"></i>
                                        </div>
                                        <div class="detail-content">
                                            <span class="detail-label">Gender</span>
                                            <span class="detail-value">${user.gender || 'Not specified'}</span>
                                        </div>
                                    </div>
                                    
                                    ${user.dateOfBirth ? `
                                    <div class="detail-item">
                                        <div class="detail-icon">
                                            <i class="fas fa-birthday-cake"></i>
                                        </div>
                                        <div class="detail-content">
                                            <span class="detail-label">Date of Birth</span>
                                            <span class="detail-value">${user.dateOfBirth}</span>
                                        </div>
                                    </div>
                                    ` : ''}
                                
                                <div class="user-info-item">
                                    <div class="info-icon">
                                        <i class="fas fa-user-tag"></i>
                                    </div>
                                    <div class="info-content">
                                        <span class="info-label">Role</span>
                                        <span class="info-value">
                                            <span class="badge badge-role">${user.role}</span>
                                        </span>
                                    </div>
                                </div>
                                
                                <div class="user-info-item">
                                    <div class="info-icon">
                                        <i class="fas fa-shield-alt"></i>
                                    </div>
                                    <div class="info-content">
                                        <span class="info-label">Verification</span>
                                        <span class="info-value">
                                            ${user.isVerified ? 
                                                '<span class="text-success"><i class="fas fa-check-circle mr-1"></i>Verified Account</span>' : 
                                                '<span class="text-danger"><i class="fas fa-times-circle mr-1"></i>Not Verified</span>'
                                            }
                                        </span>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="card-actions">
                                <button type="button" class="btn btn-rounded btn-sm btn-info edit-user-btn" data-user-id="${user.id}">
                                    <i class="fas fa-edit mr-1"></i> Edit
                                </button>
                                <button type="button" class="btn btn-rounded btn-sm btn-danger delete-user-btn" data-user-id="${user.id}" data-user-name="${user.name}">
                                    <i class="fas fa-trash-alt mr-1"></i> Delete
                                </button>
                            </div>
                        </div>
                    `;
                    
                    cardsContainer.appendChild(cardCol);
                });
                
                // Attach event listeners to buttons
                attachCardButtonListeners();
            }
            
            // Get card gradient by user role
            function getGradientByRole(role) {
                switch(role) {
                    case 'ADMIN':
                        return 'bg-gradient-primary';
                    case 'USER':
                        return 'bg-gradient-info';
                    case 'DRIVER':
                        return 'bg-gradient-success';
                    default:
                        return 'bg-gradient-secondary';
                }
            }
            
            // Helper functions for status classes
            function getStatusClass(status) {
                switch(status) {
                    case 'ACTIVE':
                        return 'badge-success';
                    case 'SUSPENDED':
                        return 'badge-warning';
                    case 'BANNED':
                        return 'badge-danger';
                    default:
                        return 'badge-secondary';
                }
            }
            
            // Helper function for status icons and classes
            function getStatusIconClass(status) {
                switch(status) {
                    case 'ACTIVE':
                        return {
                            icon: 'fas fa-check-circle',
                            class: 'status-active'
                        };
                    case 'SUSPENDED':
                        return {
                            icon: 'fas fa-pause-circle',
                            class: 'status-suspended'
                        };
                    case 'BANNED':
                        return {
                            icon: 'fas fa-ban',
                            class: 'status-banned'
                        };
                    default:
                        return {
                            icon: 'fas fa-question-circle',
                            class: 'status-unknown'
                        };
                }
            }
            
            // Helper function for gender icons
            function getGenderIcon(gender) {
                switch(gender) {
                    case 'MALE':
                        return {
                            icon: 'fas fa-mars',
                            color: '#007bff'
                        };
                    case 'FEMALE':
                        return {
                            icon: 'fas fa-venus',
                            color: '#e83e8c'
                        };
                    case 'OTHER':
                        return {
                            icon: 'fas fa-transgender',
                            color: '#6f42c1'
                        };
                    default:
                        return {
                            icon: 'fas fa-user',
                            color: '#6c757d'
                        };
                }
            }
            
            // Attach event listeners to table buttons
            function attachTableButtonListeners() {
                document.querySelectorAll('.users-table .edit-user-btn').forEach(function(button) {
                    button.addEventListener('click', function() {
                        const userId = this.getAttribute('data-user-id');
                        openEditUserModal(userId);
                    });
                });
                
                document.querySelectorAll('.users-table .delete-user-btn').forEach(function(button) {
                    button.addEventListener('click', function() {
                        const userId = this.getAttribute('data-user-id');
                        const userName = this.getAttribute('data-user-name');
                        openDeleteConfirmationModal(userId, userName);
                    });
                });
            }
            
            // Attach event listeners to card buttons
            function attachCardButtonListeners() {
                document.querySelectorAll('.user-card .edit-user-btn').forEach(function(button) {
                    button.addEventListener('click', function() {
                        const userId = this.getAttribute('data-user-id');
                        openEditUserModal(userId);
                    });
                });
                
                document.querySelectorAll('.user-card .delete-user-btn').forEach(function(button) {
                    button.addEventListener('click', function() {
                        const userId = this.getAttribute('data-user-id');
                        const userName = this.getAttribute('data-user-name');
                        openDeleteConfirmationModal(userId, userName);
                    });
                });
            }
            
            // Open edit user modal with user data
            function openEditUserModal(userId) {
                showLoading();
                
                // First get the user data
                fetch("{{ path('admin_api_user_get', {'id': 'USER_ID'}) }}".replace('USER_ID', userId))
                    .then(function(response) {
                        if (!response.ok) {
                            throw new Error('Error fetching user details');
                        }
                        return response.json();
                    })
                    .then(function(user) {
                        // Then get the form with CSRF token
                        return fetch("{{ path('admin_user_edit', {'id': 'USER_ID'}) }}".replace('USER_ID', userId), {
                            headers: {
                                "X-Requested-With": "XMLHttpRequest"
                            }
                        }).then(response => {
                            return Promise.all([user, response.text()]);
                        });
                    })
                    .then(function([user, html]) {
                        // Update header info
                        document.getElementById('edit-user-header-name').textContent = user.name;
                        document.getElementById('edit-user-header-email').textContent = user.email;
                        
                        // Update avatar if available
                        const avatarContainer = document.getElementById('edit-user-avatar-container');
                        const avatarImg = avatarContainer.querySelector('img');
                        avatarImg.src = `/images/${user.profilePicture}`;
                        
                        // Update user ID
                        document.getElementById('edit-user-id').value = user.id;
                        
                        // Replace form content with the fetched form
                        const editForm = document.getElementById('edit-user-form');
                        const tempDiv = document.createElement('div');
                        tempDiv.innerHTML = html;
                        const newForm = tempDiv.querySelector('form');
                        
                        if (newForm) {
                            editForm.innerHTML = newForm.innerHTML;
                            
                            // Populate form fields from the user data
                            document.getElementById('edit-name').value = user.name;
                            document.getElementById('edit-email').value = user.email;
                            document.getElementById('edit-phone').value = user.phoneNumber || '';
                            document.getElementById('edit-role').value = user.role;
                            document.getElementById('edit-account-status').value = user.accountStatus;
                            document.getElementById('edit-gender').value = user.gender || '';
                            document.getElementById('edit-is-verified').checked = user.isVerified;
                            document.getElementById('edit-password').value = ''; // Clear password field
                            
                            // Stylize the account status select based on status
                            const statusSelect = document.getElementById('edit-account-status');
                            updateStatusSelectStyles(statusSelect);
                            
                            // Re-initialize password visibility toggles
                            initPasswordToggle();
                        }
                        
                        // Show modal
                        editUserModal.show();
                        hideLoading();
                    })
                    .catch(function(error) {
                        console.error('Error:', error);
                        hideLoading();
                        showToast('error', 'Error loading user details: ' + error.message);
                    });
                    
                // Add event listener for save button
                document.getElementById('save-user-btn').onclick = function() {
                    updateUser();
                };
            }
            
            // Update status select styles based on selected status
            function updateStatusSelectStyles(select) {
                const selectedOption = select.options[select.selectedIndex];
                const statusColor = selectedOption.getAttribute('data-color') || 'secondary';
                
                // Remove all previous color classes
                select.classList.remove('border-success', 'border-warning', 'border-danger', 'text-success', 'text-warning', 'text-danger');
                
                // Add appropriate color classes based on selected status
                if (statusColor === 'success') {
                    select.classList.add('border-success', 'text-success');
                } else if (statusColor === 'warning') {
                    select.classList.add('border-warning', 'text-warning');
                } else if (statusColor === 'danger') {
                    select.classList.add('border-danger', 'text-danger');
                }
            }
            
            // Add event listeners for status select dropdowns
            document.addEventListener('DOMContentLoaded', function() {
                const editStatusSelect = document.getElementById('edit-account-status');
                const addStatusSelect = document.getElementById('add-account-status');
                
                if (editStatusSelect) {
                    editStatusSelect.addEventListener('change', function() {
                        updateStatusSelectStyles(this);
                    });
                }
                
                if (addStatusSelect) {
                    addStatusSelect.addEventListener('change', function() {
                        updateStatusSelectStyles(this);
                    });
                }
            });
            
            // Update user data
            function updateUser() {
                const userId = document.getElementById('edit-user-id').value;
                const form = document.getElementById('edit-user-form');
                const formData = new FormData(form);
                
                // Convert FormData to JSON
                const jsonData = {};
                formData.forEach((value, key) => {
                    jsonData[key] = value;
                });
                
                showLoading();
                
                fetch("{{ path('admin_api_user_update', {'id': 'USER_ID'}) }}".replace('USER_ID', userId), {
                    method: 'POST',
                    headers: {
                        "Content-Type": "application/json",
                        "X-CSRF-TOKEN": formData.get('_token')
                    },
                    body: JSON.stringify(jsonData)
                })
                    .then(function(response) {
                        return response.json();
                    })
                    .then(function(data) {
                        hideLoading();
                        
                        if (data.success) {
                            // Close modal
                            editUserModal.hide();
                            
                            // Refresh user list
                            loadUsers();
                            showToast('success', data.message || 'User updated successfully');
                            
                            // Show success animation
                            showFloatingSuccess('User updated successfully');
                        } else {
                            // Show validation errors
                            if (data.errors) {
                                displayFormErrors(form, data.errors);
                            } else {
                                showToast('error', data.message || 'An error occurred while updating the user');
                            }
                        }
                    })
                    .catch(function(error) {
                        hideLoading();
                        console.error('Error:', error);
                        showToast('error', 'Error updating user: ' + error.message);
                    });
            }
            
            // Create new user
            function createUser() {
                const form = document.getElementById('add-user-form');
                const formData = new FormData(form);
                
                // Convert FormData to JSON
                const jsonData = {};
                formData.forEach((value, key) => {
                    jsonData[key] = value;
                });
                
                showLoading();
                
                fetch("{{ path('admin_api_user_create') }}", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        "X-CSRF-TOKEN": formData.get('_token')
                    },
                    body: JSON.stringify(jsonData)
                })
                    .then(function(response) {
                        return response.json();
                    })
                    .then(function(data) {
                        hideLoading();
                        
                        if (data.success) {
                            // Close modal
                            addUserModal.hide();
                            
                            // Refresh user list
                            loadUsers();
                            showToast('success', data.message || 'User created successfully');
                            
                            // Show success animation
                            showFloatingSuccess('New user created successfully');
                        } else {
                            // Show validation errors
                            if (data.errors) {
                                displayFormErrors(form, data.errors);
                            } else {
                                showToast('error', data.message || 'An error occurred while creating the user');
                            }
                        }
                    })
                    .catch(function(error) {
                        hideLoading();
                        console.error('Error:', error);
                        showToast('error', 'Error creating user: ' + error.message);
                    });
            }
            
            // Open delete confirmation modal
            function openDeleteConfirmationModal(userId, userName) {
                // Fetch the delete form with CSRF token
                fetch("{{ path('admin_user_delete', {'id': 'USER_ID'}) }}".replace('USER_ID', userId), {
                    headers: {
                        "X-Requested-With": "XMLHttpRequest"
                    }
                })
                .then(response => response.text())
                .then(html => {
                    const tempDiv = document.createElement('div');
                    tempDiv.innerHTML = html;
                    
                    // Update user info
                    document.getElementById('delete-user-id').value = userId;
                    document.getElementById('delete-user-name').textContent = userName;
                    
                    // Replace form content with the fetched form
                    const deleteForm = document.getElementById('delete-user-form');
                    const newForm = tempDiv.querySelector('form');
                    if (newForm) {
                        deleteForm.innerHTML = newForm.innerHTML;
                    }
                    
                    // Show modal
                    deleteUserModal.show();
                });
                
                // Add event listener for confirm delete button
                document.getElementById('confirm-delete-btn').onclick = function() {
                    deleteUser(userId);
                };
            }
            
            // Delete user
            function deleteUser(userId) {
                showLoading();
                
                const form = document.getElementById('delete-user-form');
                const formData = new FormData(form);
                
                fetch("{{ path('admin_api_user_delete', {'id': 'USER_ID'}) }}".replace('USER_ID', userId), {
                    method: "POST",
                    headers: {
                        "X-CSRF-TOKEN": formData.get('_token')
                    }
                })
                    .then(function(response) {
                        return response.json();
                    })
                    .then(function(data) {
                        hideLoading();
                        
                        if (data.success) {
                            // Close modal
                            deleteUserModal.hide();
                            
                            // Refresh user list
                            loadUsers();
                            showToast('success', data.message || 'User deleted successfully');
                        } else {
                            showToast('error', data.message || 'An error occurred while deleting the user');
                        }
                    })
                    .catch(function(error) {
                        hideLoading();
                        console.error('Error:', error);
                        showToast('error', 'Error deleting user: ' + error.message);
                    });
            }
            
            // Helper functions for form validation
            function clearFormErrors(form) {
                if (!form) return;
                
                form.querySelectorAll('.is-invalid').forEach(function(field) {
                    field.classList.remove('is-invalid');
                });
                
                form.querySelectorAll('.invalid-feedback').forEach(function(feedback) {
                    feedback.textContent = '';
                });
            }
            
            function displayFormErrors(form, errors) {
                clearFormErrors(form);
                
                errors.forEach(function(error) {
                    // Try to find the field by error path
                    const parts = error.split(':');
                    const fieldName = parts[0]; // Assumes format "field: message"
                    const message = parts.slice(1).join(':').trim();
                    
                    const field = form.querySelector(`[name="${fieldName}"]`);
                    if (field) {
                        field.classList.add('is-invalid');
                        
                        // Add error message
                        let feedbackEl = field.nextElementSibling;
                        if (!feedbackEl || !feedbackEl.classList.contains('invalid-feedback')) {
                            feedbackEl = document.createElement('div');
                            feedbackEl.className = 'invalid-feedback';
                            field.parentNode.appendChild(feedbackEl);
                        }
                        feedbackEl.textContent = message;
                    }
                });
            }
            
            // Show floating success animation
            function showFloatingSuccess(message) {
                // Create a floating success element
                const successEl = document.createElement('div');
                successEl.className = 'floating-success';
                successEl.innerHTML = `
                    <div class="success-icon">
                        <i class="fas fa-check"></i>
                    </div>
                    <div class="success-message">${message}</div>
                `;
                
                // Add styles dynamically
                const style = document.createElement('style');
                style.innerHTML = `
                    .floating-success {
                        position: fixed;
                        top: 50%;
                        left: 50%;
                        transform: translate(-50%, -50%);
                        background-color: rgba(46, 125, 50, 0.9);
                        color: white;
                        padding: 20px;
                        border-radius: 10px;
                        display: flex;
                        flex-direction: column;
                        align-items: center;
                        z-index: 10000;
                        animation: float-in-out 2.5s ease-in-out forwards;
                        box-shadow: 0 8px 25px rgba(0,0,0,0.2);
                    }
                    
                    .success-icon {
                        background-color: white;
                        color: #2E7D32;
                        width: 60px;
                        height: 60px;
                        border-radius: 50%;
                        display: flex;
                        align-items: center;
                        justify-content: center;
                        margin-bottom: 15px;
                        font-size: 24px;
                    }
                    
                    .success-message {
                        font-weight: 500;
                        font-size: 16px;
                    }
                    
                    @keyframes float-in-out {
                        0% { opacity: 0; transform: translate(-50%, -50%) scale(0.8); }
                        15% { opacity: 1; transform: translate(-50%, -50%) scale(1); }
                        85% { opacity: 1; transform: translate(-50%, -50%) scale(1); }
                        100% { opacity: 0; transform: translate(-50%, -50%) scale(0.8); }
                    }
                `;
                
                document.head.appendChild(style);
                document.body.appendChild(successEl);
                
                // Remove after animation completes
                setTimeout(function() {
                    if (document.body.contains(successEl)) {
                        document.body.removeChild(successEl);
                    }
                }, 2500);
            }
            
            // Loading indicator functions
            function showLoading() {
                document.getElementById('loading-overlay').classList.add('active');
            }
            
            function hideLoading() {
                document.getElementById('loading-overlay').classList.remove('active');
            }
            
            // Toast notification function
            function showToast(type, message) {
                // Check if Toast notification library is available
                if (typeof toastr !== 'undefined') {
                    // Configure toastr options
                    toastr.options = {
                        closeButton: true,
                        progressBar: true,
                        positionClass: 'toast-top-right',
                        timeOut: 3000,
                        showMethod: 'fadeIn',
                        hideMethod: 'fadeOut'
                    };
                    
                    toastr[type](message);
                } else {
                    // Create custom toast if toastr is not available
                    const toast = document.createElement('div');
                    toast.className = `custom-toast toast-${type}`;
                    
                    let iconClass = 'info-circle';
                    if (type === 'success') iconClass = 'check-circle';
                    if (type === 'error') iconClass = 'exclamation-circle';
                    if (type === 'warning') iconClass = 'exclamation-triangle';
                    
                    toast.innerHTML = `
                        <div class="toast-icon">
                            <i class="fas fa-${iconClass}"></i>
                        </div>
                        <div class="toast-message">${message}</div>
                        <button class="toast-close">×</button>
                    `;
                    
                    // Add toast container if not exists
                    let toastContainer = document.querySelector('.toast-container');
                    if (!toastContainer) {
                        toastContainer = document.createElement('div');
                        toastContainer.className = 'toast-container';
                        document.body.appendChild(toastContainer);
                        
                        // Add toast styles
                        const style = document.createElement('style');
                        style.innerHTML = `
                            .toast-container {
                                position: fixed;
                                top: 20px;
                                right: 20px;
                                z-index: 9999;
                            }
                            
                            .custom-toast {
                                display: flex;
                                align-items: center;
                                background-color: white;
                                border-radius: 8px;
                                box-shadow: 0 3px 12px rgba(0,0,0,0.15);
                                margin-bottom: 10px;
                                max-width: 350px;
                                padding: 12px 15px;
                                position: relative;
                                border-left: 4px solid #ccc;
                                animation: toast-in 0.3s ease-out;
                            }
                            
                            .toast-success { border-left-color: #2E7D32; }
                            .toast-error { border-left-color: #d32f2f; }
                            .toast-warning { border-left-color: #f57f17; }
                            .toast-info { border-left-color: #1976d2; }
                            
                            .toast-icon {
                                margin-right: 12px;
                                font-size: 1.2rem;
                            }
                            
                            .toast-success .toast-icon { color: #2E7D32; }
                            .toast-error .toast-icon { color: #d32f2f; }
                            .toast-warning .toast-icon { color: #f57f17; }
                            .toast-info .toast-icon { color: #1976d2; }
                            
                            .toast-message {
                                flex: 1;
                                font-size: 14px;
                                color: #333;
                            }
                            
                            .toast-close {
                                background: none;
                                border: none;
                                color: #999;
                                cursor: pointer;
                                font-size: 18px;
                                line-height: 1;
                                padding: 0 5px;
                            }
                            
                            @keyframes toast-in {
                                0% { transform: translateX(100%); opacity: 0; }
                                100% { transform: translateX(0); opacity: 1; }
                            }
                        `;
                        document.head.appendChild(style);
                    }
                    
                    toastContainer.appendChild(toast);
                    
                    // Auto remove after 3 seconds
                    setTimeout(function() {
                        if (toastContainer.contains(toast)) {
                            toast.style.opacity = 0;
                            toast.style.transform = 'translateX(100%)';
                            toast.style.transition = 'opacity 0.3s, transform 0.3s';
                            setTimeout(function() {
                                if (toastContainer.contains(toast)) {
                                    toastContainer.removeChild(toast);
                                }
                            }, 300);
                        }
                    }, 3000);
                    
                    // Close button functionality
                    toast.querySelector('.toast-close').addEventListener('click', function() {
                        if (toastContainer.contains(toast)) {
                            toastContainer.removeChild(toast);
                        }
                    });
                }
            }
        });
    </script>
{% endblock %}
