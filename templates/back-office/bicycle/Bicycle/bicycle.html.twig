{% block stylesheets %}

<link href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" rel="stylesheet">
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
<link href="{{ asset('css/back/bicycle/bicycle.css') }}" rel="stylesheet">
<style>
    /* Modal Fixes - Added to fix positioning issues */
    .modal {
        position: fixed;
        top: 0;
        left: 0;
        z-index: 1060 !important;
        width: 100%;
        height: 100%;
        outline: 0;
        padding-right: 0 !important;
    }
    
    .modal-dialog {
        position: relative;
        width: auto;
        margin: 1.75rem auto;
        display: flex;
        align-items: center;
        min-height: calc(100% - 3.5rem);
    }
    
    .modal-dialog-centered {
        display: flex;
        align-items: center;
        min-height: calc(100% - 3.5rem);
        justify-content: center;
    }
    
    .modal-content {
        position: relative;
        width: 100%;
        background-color: #fff;
        border-radius: 0.5rem;
        box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
    }
    
    .modal-open {
        overflow: hidden !important;
    }
    
    .modal-backdrop {
        display: none !important;
    }
    
    /* Green Theme for Bicycle Fleet Management */
    
    /* Hero Section Styling */
    .hero-section {
        background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
        color: white;
        padding: 2rem;
        border-radius: 0.75rem;
        position: relative;
        overflow: hidden;
        transition: all 0.3s ease;
    }
    
    .hero-section:hover {
        transform: translateY(-5px);
        box-shadow: 0 0.75rem 2rem rgba(40, 167, 69, 0.2);
    }
    
    .hero-section::before {
        content: "";
        position: absolute;
        top: -50%;
        right: -10%;
        width: 300px;
        height: 300px;
        background: rgba(255, 255, 255, 0.1);
        border-radius: 50%;
        z-index: 1;
    }
    
    /* Quick Overview Cards */
    .hover-card {
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }
    
    .hover-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 0.5rem 1.5rem rgba(40, 167, 69, 0.15) !important;
    }
    
    .shadow-hover:hover {
        box-shadow: 0 0.5rem 1.5rem rgba(0, 0, 0, 0.15) !important;
    }
    
    /* Battery Status Animations */
    .pulse-animation {
        animation: pulse 2s infinite;
    }
    
    @keyframes pulse {
        0% { opacity: 1; }
        50% { opacity: 0.6; }
        100% { opacity: 1; }
    }
    
    .pulse-danger {
        animation: pulse-danger 2s infinite;
    }
    
    @keyframes pulse-danger {
        0% { color: #dc3545; }
        50% { color: #f06a75; }
        100% { color: #dc3545; }
    }
    
    /* Battery Status Circles */
    .battery-status-circle {
        width: 80px;
        height: 80px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        position: relative;
        font-size: 2rem;
    }
    
    .battery-percentage {
        position: absolute;
        bottom: 0;
        left: 50%;
        transform: translateX(-50%);
        font-size: 0.75rem;
        font-weight: bold;
        background: white;
        padding: 2px 8px;
        border-radius: 10px;
    }
    
    /* Battery health bar */
    .battery-health-bar {
        height: 8px;
        border-radius: 4px;
        background-color: #e9ecef;
        margin-top: 15px;
        overflow: hidden;
        display: flex;
    }
    
    .battery-segment {
        height: 100%;
        transition: width 0.5s ease;
    }
    
    /* Actions & Filters Card */
    .card-header {
        padding: 1rem 1.25rem;
        background-color: #f8f9fa;
        border-bottom: none;
    }
    
    /* Quick Action Buttons */
    .quick-action-buttons {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1rem;
    }
    
    .quick-action-btn {
        background-color: #fff;
        border: 1px solid #e9ecef;
        border-radius: 10px;
        padding: 15px;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        cursor: pointer;
    }
    
    .quick-action-btn:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.08);
    }
    
    .quick-action-btn .icon-wrapper {
        width: 45px;
        height: 45px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-right: 15px;
        font-size: 1.25rem;
    }
    
    .btn-add .icon-wrapper {
        background-color: rgba(40, 167, 69, 0.1);
        color: #28a745;
    }
    
    .btn-assign .icon-wrapper {
        background-color: rgba(13, 110, 253, 0.1);
        color: #0d6efd;
    }
    
    .btn-maintenance .icon-wrapper {
        background-color: rgba(255, 193, 7, 0.1);
        color: #ffc107;
    }
    
    .btn-battery .icon-wrapper {
        background-color: rgba(220, 53, 69, 0.1);
        color: #dc3545;
    }
    
    /* Table Styling */
    .bicycle-table {
        margin-bottom: 0;
    }
    
    .bicycle-mini-icon {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .bicycle-row {
        transition: all 0.15s ease-in-out;
    }
    
    .bicycle-row:hover {
        background-color: rgba(40, 167, 69, 0.05) !important;
    }
    
    .bicycle-table .action-buttons {
        white-space: nowrap;
    }
    
    /* Small Battery Indicator */
    .battery-indicator {
        width: 60px;
        height: 8px;
        border-radius: 4px;
        background-color: rgba(0, 0, 0, 0.05);
        overflow: hidden;
    }
    
    .battery-level-small {
        height: 100%;
        transition: width 0.5s ease;
    }
    
    /* Fade-in Animation for Rows */
    .fade-in-row {
        opacity: 0;
        animation: fadeIn 0.3s ease forwards;
    }
    
    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(10px); }
        to { opacity: 1; transform: translateY(0); }
    }
    
    /* Battery indicators */
    .battery-indicator.high i {
        color: #28a745;
    }
    
    .battery-indicator.medium i {
        color: #17a2b8;
    }
    
    .battery-indicator.low i {
        color: #ffc107;
    }
    
    .battery-indicator.critical i {
        color: #dc3545;
        animation: pulse-danger 2s infinite;
    }
    
    /* Pagination styling */
    .pagination-wrapper {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem;
        background-color: #f8f9fa;
        border-radius: 0 0 0.5rem 0.5rem;
    }
    
    .pagination-modern {
        display: flex;
    }
    
    .pagination-modern .page-item .page-link {
        border-radius: 0.5rem;
        border: none;
        margin: 0 0.15rem;
        width: 2.5rem;
        height: 2.5rem;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 500;
        color: #495057;
        transition: all 0.2s ease;
    }
    
    .pagination-modern .page-item.active .page-link {
        background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
        color: white;
        box-shadow: 0 0.25rem 0.75rem rgba(40, 167, 69, 0.25);
    }
    
    .pagination-modern .page-item .page-link:hover:not(.active) {
        background-color: #e9ecef;
        transform: translateY(-2px);
    }
    
    /* Modal improvements */
    .modal-header.bg-gradient-primary-to-secondary {
        background: linear-gradient(135deg, #28a745 0%, #20c997 100%) !important;
        color: white;
    }
    
    /* Bicycle delete dialog */
    .bicycle-icon-container {
        width: 80px;
        height: 80px;
        background-color: rgba(40, 167, 69, 0.1);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        color: #28a745;
    }
    
    .bicycle-delete-info {
        background-color: #f8f9fa;
        border-radius: 10px;
        padding: 15px;
    }
    
    /* Form styling */
    .form-group label {
        font-weight: 500;
        margin-bottom: 0.5rem;
    }
</style>
{% endblock %}

<!-- New Hero Section with Add Button -->
<div class="hero-section mb-4 p-4 text-white rounded-3 shadow-sm">
    <div class="row align-items-center">
        <div class="col-lg-7">
            <div class="d-flex align-items-center">
                <div class="tab-icon-container bg-white bg-opacity-25 rounded-circle p-3 me-3">
                    <i class="fas fa-bicycle fa-3x text-white"></i>
                </div>
                <div>
                    <h2 class="fw-bold mb-1">Bicycle Fleet Management</h2>
                    <p class="lead mb-0 opacity-75">Manage your entire fleet of e-bicycles with real-time tracking and analytics</p>
                </div>
            </div>
        </div>
        <div class="col-lg-5 text-lg-end mt-3 mt-lg-0">
            <div class="btn-group me-2">
                <button class="btn btn-light btn-lg shadow-sm dropdown-toggle" type="button" id="bicycleExportDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-download me-2"></i> Export
                </button>
                <ul class="dropdown-menu" aria-labelledby="bicycleExportDropdown">
                    <li><a class="dropdown-item" href="{{ path('admin_bicycle_export', app.request.query.all|merge({'format': 'csv'})) }}"><i class="fas fa-file-csv me-2 text-primary"></i>Export to CSV</a></li>
                    <li><a class="dropdown-item" href="{{ path('admin_bicycle_export', app.request.query.all|merge({'format': 'excel'})) }}"><i class="fas fa-file-excel me-2 text-success"></i>Export to Excel</a></li>
                    <li><a class="dropdown-item" href="{{ path('admin_bicycle_export', app.request.query.all|merge({'format': 'pdf'})) }}"><i class="fas fa-file-pdf me-2 text-danger"></i>Export to PDF</a></li>
                </ul>
            </div>
            <button class="btn btn-light btn-lg shadow-sm" data-bs-toggle="modal" data-bs-target="#addBicycleModal">
                <i class="fas fa-plus-circle me-2"></i> Add New Bicycle
            </button>
            <button class="btn btn-outline-light btn-lg ms-2" data-bs-toggle="modal" data-bs-target="#scheduleMaintenance">
                <i class="fas fa-tools me-2"></i> Schedule Maintenance
            </button>
        </div>
    </div>
</div>

<div class="bicycles-dashboard">
    <!-- Quick Overview Cards with Animation -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card h-100 hover-card border-success border-start border-4 rounded-3 shadow-hover">
                <div class="card-body">
                    <div class="d-flex align-items-center mb-3">
                        <div class="d-inline-flex align-items-center justify-content-center bg-success bg-opacity-10 rounded-circle me-3" style="width: 48px; height: 48px;">
                            <i class="fas fa-check-circle fa-2x text-success pulse-animation"></i>
                        </div>
                        <div>
                            <h3 class="card-title h5 mb-0">Available Bikes</h3>
                            <p class="text-muted small mb-0">Ready for rental</p>
                        </div>
                    </div>
                    <div class="d-flex align-items-center justify-content-between">
                        <div class="display-6 fw-bold">{{ availableCount|default(0) }}</div>
                        <span class="badge bg-success bg-opacity-10 text-success px-3 py-2">
                            <i class="fas fa-chart-bar me-1"></i> {{ availableCount|default(0) > 0 ? (availableCount / (availableCount + inUseCount + maintenanceCount + chargingCount) * 100)|number_format(1) ~ '%' : '0%' }}
                        </span>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card h-100 hover-card border-primary border-start border-4 rounded-3 shadow-hover">
                <div class="card-body">
                    <div class="d-flex align-items-center mb-3">
                        <div class="d-inline-flex align-items-center justify-content-center bg-primary bg-opacity-10 rounded-circle me-3" style="width: 48px; height: 48px;">
                            <i class="fas fa-bicycle fa-2x text-primary"></i>
                        </div>
                        <div>
                            <h3 class="card-title h5 mb-0">In Use</h3>
                        </div>
                    </div>
                    <div class="d-flex align-items-center justify-content-between">
                        <div class="display-6 fw-bold">{{ inUseCount|default(0) }}</div>
                        <span class="badge bg-primary bg-opacity-10 text-primary px-3 py-2">
                            <i class="fas fa-users me-1"></i> Active Rentals
                        </span>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card h-100 hover-card border-warning border-start border-4 rounded-3 shadow-hover">
                <div class="card-body">
                    <div class="d-flex align-items-center mb-3">
                        <div class="d-inline-flex align-items-center justify-content-center bg-warning bg-opacity-10 rounded-circle me-3" style="width: 48px; height: 48px;">
                            <i class="fas fa-tools fa-2x text-warning"></i>
                        </div>
                        <div>
                            <h3 class="card-title h5 mb-0">Maintenance</h3>
                            <p class="text-muted small mb-0">Under repair</p>
                        </div>
                    </div>
                    <div class="d-flex align-items-center justify-content-between">
                        <div class="display-6 fw-bold">{{ maintenanceCount|default(0) }}</div>
                        <span class="badge bg-warning bg-opacity-10 text-warning px-3 py-2">
                            <i class="fas fa-wrench me-1"></i> Service Required
                        </span>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card h-100 hover-card border-info border-start border-4 rounded-3 shadow-hover">
                <div class="card-body">
                    <div class="d-flex align-items-center mb-3">
                        <div class="d-inline-flex align-items-center justify-content-center bg-info bg-opacity-10 rounded-circle me-3" style="width: 48px; height: 48px;">
                            <i class="fas fa-bolt fa-2x text-info"></i>
                        </div>
                        <div>
                            <h3 class="card-title h5 mb-0">Charging</h3>
                            <p class="text-muted small mb-0">Recharging</p>
                        </div>
                    </div>
                    <div class="d-flex align-items-center justify-content-between">
                        <div class="display-6 fw-bold">{{ chargingCount|default(0) }}</div>
                        <span class="badge bg-info bg-opacity-10 text-info px-3 py-2">
                            <i class="fas fa-battery-half me-1"></i> Power Up
                        </span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Battery Statistics Card - Visual Enhancement -->
<div class="card mb-4 shadow-sm rounded-3 border-0 overflow-hidden">
    <div class="card-header bg-gradient-dark text-white d-flex justify-content-between align-items-center py-3">
        <h5 class="mb-0"><i class="fas fa-car-battery me-2 pulse-animation"></i>Battery Distribution</h5>
        <span class="badge bg-white text-dark">Fleet Health Indicator</span>
    </div>
    <div class="card-body p-0">
        {% set highCount = bicycles|filter(b => b.batteryLevel >= 90)|length %}
        {% set mediumCount = bicycles|filter(b => b.batteryLevel >= 50 and b.batteryLevel < 90)|length %}
        {% set lowCount = bicycles|filter(b => b.batteryLevel >= 25 and b.batteryLevel < 50)|length %}
        {% set criticalCount = bicycles|filter(b => b.batteryLevel < 25)|length %}
        {% set totalBikes = highCount + mediumCount + lowCount + criticalCount %}
        
        <div class="row g-0">
            <div class="col-md-3 p-4 text-center border-end">
                <div class="battery-status-circle bg-success bg-opacity-10 mx-auto mb-3">
                    <i class="fas fa-battery-full text-success"></i>
                    <span class="battery-percentage">{{ totalBikes > 0 ? ((highCount / totalBikes) * 100)|round }}% </span>
                </div>
                <h6 class="text-success fw-bold">90%+ Charge</h6>
                <div class="h3 mb-1">{{ highCount }}</div>
                <div class="text-muted small">Premium condition</div>
            </div>
            <div class="col-md-3 p-4 text-center border-end">
                <div class="battery-status-circle bg-primary bg-opacity-10 mx-auto mb-3">
                    <i class="fas fa-battery-three-quarters text-primary"></i>
                    <span class="battery-percentage">{{ totalBikes > 0 ? ((mediumCount / totalBikes) * 100)|round }}%</span>
                </div>
                <h6 class="text-primary fw-bold">50%-89% Charge</h6>
                <div class="h3 mb-1">{{ mediumCount }}</div>
                <div class="text-muted small">Good condition</div>
            </div>
            <div class="col-md-3 p-4 text-center border-end">
                <div class="battery-status-circle bg-warning bg-opacity-10 mx-auto mb-3">
                    <i class="fas fa-battery-half text-warning"></i>
                    <span class="battery-percentage">{{ totalBikes > 0 ? ((lowCount / totalBikes) * 100)|round }}%</span>
                </div>
                <h6 class="text-warning fw-bold">25%-49% Charge</h6>
                <div class="h3 mb-1">{{ lowCount }}</div>
                <div class="text-muted small">Needs charging soon</div>
            </div>
            <div class="col-md-3 p-4 text-center">
                <div class="battery-status-circle bg-danger bg-opacity-10 mx-auto mb-3">
                    <i class="fas fa-battery-quarter text-danger pulse-danger"></i>
                    <span class="battery-percentage">{{ totalBikes > 0 ? ((criticalCount / totalBikes) * 100)|round }}%</span>
                </div>
                <h6 class="text-danger fw-bold">Below 25% Charge</h6>
                <div class="h3 mb-1">{{ criticalCount }}</div>
                <div class="text-muted small">Immediate charging needed</div>
            </div>
        </div>
        <!-- Battery Progress Bar -->
        <div class="battery-health-bar">
            <div class="battery-segment bg-success" style="width: {{ totalBikes > 0 ? ((highCount / totalBikes) * 100)|round }}%"></div>
            <div class="battery-segment bg-primary" style="width: {{ totalBikes > 0 ? ((mediumCount / totalBikes) * 100)|round }}%"></div>
            <div class="battery-segment bg-warning" style="width: {{ totalBikes > 0 ? ((lowCount / totalBikes) * 100)|round }}%"></div>
            <div class="battery-segment bg-danger" style="width: {{ totalBikes > 0 ? ((criticalCount / totalBikes) * 100)|round }}%"></div>
        </div>
    </div>
</div>

    <!-- Actions & Filters - With Visual Enhancement -->
    <div class="row mb-4 g-4">
        <div class="col-lg-8">
            <div class="card shadow-sm border-0 rounded-3 overflow-hidden">
                <div class="card-header bg-light d-flex justify-content-between align-items-center py-3">
                    <h5 class="mb-0"><i class="fas fa-sliders-h me-2"></i>Search</h5>
                    <span class="badge bg-primary bg-opacity-10 text-primary">Find Bicycles Fast</span>
                </div>
                <div class="card-body">
                    <form action="{{ path('admin_bicycle_rentals', {'tab': 'bicycles'}) }}" method="GET" id="bicycleFilterForm">
                <div class="row g-3 mb-3">
                    <div class="col-lg-12">
                        <div class="search-box">
                            <div class="input-group">
                                <span class="input-group-text bg-primary text-white"><i class="fas fa-search"></i></span>
                                <input type="text" id="bicycleSearchInput" class="form-control" placeholder="Search by ID, model, status, or station..." value="{{ app.request.query.get('search') }}">
                                <button type="button" id="bicycleSearchClearBtn" class="btn btn-outline-secondary">
                                    <i class="fas fa-times"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Bicycles Table/Grid View - Visually Enhanced -->
    {% if bicycles|length > 0 %}
        <div class="table-responsive">
            <table class="table table-hover align-middle bicycle-table" id="bicyclesTable">
                <thead class="bg-light">
                    <tr>
                        <th class="text-center" style="width: 40px;">&nbsp;</th>
                        <th class="sortable" data-sort="id">ID</th>
                        <th class="sortable" data-sort="status">Status</th>
                        <th class="sortable" data-sort="battery">Battery</th>
                        <th class="sortable" data-sort="range">Range</th>
                        <th class="sortable" data-sort="location">Location</th>
                        <th class="sortable" data-sort="lastUpdate">Last Updated</th>
                        <th class="text-center">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    {% for bicycle in bicycles %}
                        <tr data-bicycle-id="{{ bicycle.idBike }}">
                            <td class="text-center">
                                <div class="form-check">
                                    <input class="form-check-input bicycle-checkbox" type="checkbox" value="{{ bicycle.idBike }}">
                                </div>
                            </td>
                            <td>
                                <span class="fw-medium">BIKE-{{ '%04d'|format(bicycle.idBike) }}</span>
                            </td>
                            <td>
                                {% if bicycle.status.value == 'available' %}
                                    <span class="badge bg-success-subtle text-success">Available</span>
                                {% elseif bicycle.status.value == 'in_use' %}
                                    <span class="badge bg-primary-subtle text-primary">In Use</span>
                                {% elseif bicycle.status.value == 'maintenance' %}
                                    <span class="badge bg-warning-subtle text-warning">Maintenance</span>
                                {% elseif bicycle.status.value == 'reserved' %}
                                    <span class="badge bg-info-subtle text-info">Reserved</span>
                                {% elseif bicycle.status.value == 'charging' %}
                                    <span class="badge bg-secondary-subtle text-secondary">Charging</span>
                                {% else %}
                                    <span class="badge bg-secondary-subtle text-secondary">{{ bicycle.status.value }}</span>
                                {% endif %}
                            </td>
                            <td>
                                <div class="d-flex align-items-center">
                                    <div class="battery-indicator me-2 {{ bicycle.batteryLevel >= 90 ? 'high' : (bicycle.batteryLevel >= 50 ? 'medium' : (bicycle.batteryLevel >= 25 ? 'low' : 'critical')) }}">
                                        <i class="fas fa-battery-{{ bicycle.batteryLevel >= 90 ? 'full' : (bicycle.batteryLevel >= 50 ? 'three-quarters' : (bicycle.batteryLevel >= 25 ? 'half' : 'quarter')) }}"></i>
                                    </div>
                                    <span class="fw-medium">{{ bicycle.batteryLevel }}%</span>
                                </div>
                            </td>
                            <td>
                                <div class="d-flex align-items-center">
                                    <i class="fas fa-route text-muted me-1"></i>
                                    <span>{{ bicycle.rangeKm }} km</span>
                                </div>
                            </td>
                            <td>
                                {% if bicycle.bicycleStation %}
                                    <a href="{{ path('admin_bicycle_station_detail', {'id': bicycle.bicycleStation.idStation}) }}">
                                        <div class="d-flex align-items-center">
                                            <i class="fas fa-map-marker-alt text-muted me-2"></i>
                                            <span>{{ bicycle.bicycleStation.name }}</span>
                                        </div>
                                    </a>
                                {% else %}
                                    <span class="text-muted fst-italic">No station assigned</span>
                                {% endif %}
                            </td>
                            <td>
                                <div class="d-flex align-items-center">
                                    <i class="fas fa-calendar-alt text-muted me-1"></i>
                                    <span>{{ bicycle.lastUpdated|date('M d, Y H:i') }}</span>
                                </div>
                            </td>
                            <td>
                                <div class="action-buttons">
                                    <div class="dropdown">
                                        <button class="btn btn-sm btn-icon btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                            <i class="fas fa-ellipsis-v"></i>
                                        </button>
                                        <ul class="dropdown-menu dropdown-menu-end">
                                            <li><a class="dropdown-item" href="{{ path('admin_bicycle_details', {'id': bicycle.idBike}) }}">
                                                <i class="fas fa-eye me-2"></i> View Details
                                            </a></li>
                                            <li><a class="dropdown-item edit-bicycle" href="#" data-bicycle-id="{{ bicycle.idBike }}">
                                                <i class="fas fa-edit me-2"></i> Edit Bicycle
                                            </a></li>
                                            <li><hr class="dropdown-divider"></li>
                                            <li><a class="dropdown-item" href="#" data-bs-toggle="modal" data-bs-target="#stationAssignModal" data-bicycle-id="{{ bicycle.idBike }}">
                                                <i class="fas fa-map-marker-alt me-2"></i> Change Station
                                            </a></li>
                                            <li class="dropdown-submenu">
                                                <a class="dropdown-item dropdown-toggle" href="#">
                                                    <i class="fas fa-exchange-alt me-2"></i> Change Status
                                                </a>
                                                <ul class="dropdown-menu">
                                                    {% if bicycle.status.value != 'available' %}
                                                    <li><a class="dropdown-item" href="{{ path('admin_bicycle_change_status', {'id': bicycle.idBike, 'status': 'available'}) }}">
                                                        <i class="fas fa-check text-success me-2"></i>Mark Available
                                                    </a></li>
                                                    {% endif %}
                                                    {% if bicycle.status.value != 'maintenance' %}
                                                    <li><a class="dropdown-item" href="{{ path('admin_bicycle_change_status', {'id': bicycle.idBike, 'status': 'maintenance'}) }}">
                                                        <i class="fas fa-tools text-warning me-2"></i>Send to Maintenance
                                                    </a></li>
                                                    {% endif %}
                                                    {% if bicycle.status.value != 'charging' %}
                                                    <li><a class="dropdown-item" href="{{ path('admin_bicycle_change_status', {'id': bicycle.idBike, 'status': 'charging'}) }}">
                                                        <i class="fas fa-bolt text-info me-2"></i>Send to Charging
                                                    </a></li>
                                                    {% endif %}
                                                </ul>
                                            </li>
                                            <li><hr class="dropdown-divider"></li>
                                            <li>
                                                <button class="dropdown-item text-danger delete-bicycle" type="button" data-bicycle-id="{{ bicycle.idBike }}">
                                                    <i class="fas fa-trash me-2"></i> Delete Bicycle
                                                </button>
                                            </li>
                                        </ul>
                                    </div>
                                </div>
                            </td>
                        </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
    {% else %}
        <div class="alert alert-info">
            <i class="fas fa-info-circle me-2"></i> No bicycles found.
        </div>
    {% endif %}
    
    <!-- Pagination -->
    <div class="d-flex justify-content-center mt-4">
        {{ knp_pagination_render(bicycles, 'back-office/bicycle/ajax-pagination.html.twig') }}
    </div>
</div>

<!-- Add Bicycle Modal -->
<div class="modal fade" id="addBicycleModal" data-bs-backdrop="false" data-bs-keyboard="true" tabindex="-1" aria-labelledby="addBicycleModalLabel" aria-hidden="true" style="z-index: 1060; padding-right: 0px !important; position: fixed; top: 0; left: 0; right: 0; bottom: 0; display: none;">
    <div class="modal-dialog modal-lg modal-dialog-centered" style="display: flex; align-items: center; justify-content: center; margin: 0 auto; min-height: 100vh; max-height: 100vh; width: 95%; max-width: 800px;">
        <div class="modal-content">
            <div class="modal-header bg-gradient-primary-to-secondary text-white">
                <h5 class="modal-title" id="addBicycleModalLabel">
                    <i class="fas fa-plus me-2"></i>Add New Bicycle
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" style="max-height: 70vh; overflow-y: auto;">
                {% if addBicycleForm %}               {{ form_start(addBicycleForm, {
    'attr': {
        'novalidate': 'novalidate', 
        'id': 'addBicycleForm', 
        'data-tab': app.request.query.get('tab', 'bicycles'),
        'class': 'needs-validation',
        'autocomplete': 'off'
    },
    'action': path('admin_bicycle_add'),
    'method': 'POST'
}) }}
{# Always set the tab parameter to ensure form returns to bicycles tab #}
<input type="hidden" name="tab" value="{{ app.request.query.get('tab', 'bicycles') }}">


                    <div class="row g-3">
                        <div class="col-md-6">
                            <div class="form-group">
                {{ form_label(addBicycleForm.batteryLevel, 'Battery Level (%)', {'label_attr': {'class': 'form-label'}}) }}
                                <div class="input-group">
                                    {{ form_widget(addBicycleForm.batteryLevel, {
                                        'attr': {
                                            'class': 'form-control' ~ (addBicycleForm.batteryLevel.vars.valid ? '' : ' is-invalid'),
                                            'min': '0',
                                            'max': '100'
                                        }
                                    }) }}
                                    <span class="input-group-text"><i class="fas fa-battery-half"></i></span>
                                    {{ form_errors(addBicycleForm.batteryLevel, {'attr': {'class': 'invalid-feedback'}}) }}
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                {{ form_label(addBicycleForm.rangeKm, 'Range (km)', {'label_attr': {'class': 'form-label'}}) }}
                                <div class="input-group">                                    {{ form_widget(addBicycleForm.rangeKm, {
                                        'attr': {
                                            'class': 'form-control' ~ (addBicycleForm.rangeKm.vars.valid ? '' : ' is-invalid')
                                        }
                                    }) }}
                                    <span class="input-group-text"><i class="fas fa-route"></i></span>
                                    {{ form_errors(addBicycleForm.rangeKm, {'attr': {'class': 'invalid-feedback'}}) }}
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                {{ form_label(addBicycleForm.status, 'Status', {'label_attr': {'class': 'form-label'}}) }}
                                {{ form_widget(addBicycleForm.status, {
                                    'attr': {
                                        'class': 'form-select' ~ (addBicycleForm.status.vars.valid ? '' : ' is-invalid')
                                    }
                                }) }}
                                {{ form_errors(addBicycleForm.status, {'attr': {'class': 'invalid-feedback'}}) }}
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                {{ form_label(addBicycleForm.bicycleStation, 'Station', {'label_attr': {'class': 'form-label'}}) }}
                                {{ form_widget(addBicycleForm.bicycleStation, {
                                    'attr': {
                                        'class': 'form-select' ~ (addBicycleForm.bicycleStation.vars.valid ? '' : ' is-invalid')
                                    }
                                }) }}
                                {{ form_errors(addBicycleForm.bicycleStation, {'attr': {'class': 'invalid-feedback'}}) }}
                            </div>
                        </div>                        <div class="col-md-6">
                            <div class="form-group">
                                {{ form_label(addBicycleForm.lastUpdated, 'Last Updated', {'label_attr': {'class': 'form-label'}}) }}
                                {{ form_widget(addBicycleForm.lastUpdated, {
                                    'attr': {
                                        'class': 'form-control' ~ (addBicycleForm.lastUpdated.vars.valid ? '' : ' is-invalid')
                                    }
                                }) }}
                                {{ form_errors(addBicycleForm.lastUpdated, {'attr': {'class': 'invalid-feedback'}}) }}
                            </div>
                        </div>
                    </div>
                    <div class="mt-4">
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-save me-1"></i> Save Bicycle
                        </button>
                        <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">
                            <i class="fas fa-times me-1"></i> Cancel
                        </button>
                    </div>
                {{ form_end(addBicycleForm) }}
                {% else %}
                <div class="alert alert-info">
                    <i class="fas fa-info-circle me-2"></i> Form is not available. Please reload the page or contact support.
                </div>
                {% endif %}
            </div>
        </div>
    </div>
</div>

<!-- Hidden template for edit form -->
<template id="editBicycleFormTemplate">
    {{ form_start(editBicycleForm, { 'attr': { 'novalidate': 'novalidate', 'id': 'editBicycleForm' } }) }}
        <input type="hidden" name="bicycleId" class="bicycle-id-field">
        <input type="hidden" name="tab" value="{{ app.request.query.get('tab', 'bicycles') }}">
        <div class="row g-3">
            <div class="col-md-6">
                <div class="form-group">                    {{ form_label(editBicycleForm.batteryLevel, 'Battery Level (%)', {'label_attr': {'class': 'form-label'}}) }}
                    <div class="input-group">
                        {{ form_widget(editBicycleForm.batteryLevel, {
                            'attr': {
                                'class': 'form-control' ~ (editBicycleForm.batteryLevel.vars.valid ? '' : ' is-invalid'),
                                'min': '0',
                                'max': '100'
                            }
                        }) }}
                        <span class="input-group-text"><i class="fas fa-battery-half"></i></span>
                        {{ form_errors(editBicycleForm.batteryLevel, {'attr': {'class': 'invalid-feedback'}}) }}
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">                    {{ form_label(editBicycleForm.rangeKm, 'Range (km)', {'label_attr': {'class': 'form-label'}}) }}
                    <div class="input-group">
                        {{ form_widget(editBicycleForm.rangeKm, {
                            'attr': {
                                'class': 'form-control' ~ (editBicycleForm.rangeKm.vars.valid ? '' : ' is-invalid')
                            }
                        }) }}
                        <span class="input-group-text"><i class="fas fa-route"></i></span>
                        {{ form_errors(editBicycleForm.rangeKm, {'attr': {'class': 'invalid-feedback'}}) }}
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    {{ form_label(editBicycleForm.status, 'Status', {'label_attr': {'class': 'form-label'}}) }}
                    {{ form_widget(editBicycleForm.status, {
                        'attr': {
                            'class': 'form-select' ~ (editBicycleForm.status.vars.valid ? '' : ' is-invalid')
                        }
                    }) }}
                    {{ form_errors(editBicycleForm.status, {'attr': {'class': 'invalid-feedback'}}) }}
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    {{ form_label(editBicycleForm.bicycleStation, 'Station', {'label_attr': {'class': 'form-label'}}) }}
                    {{ form_widget(editBicycleForm.bicycleStation, {
                        'attr': {
                            'class': 'form-select' ~ (editBicycleForm.bicycleStation.vars.valid ? '' : ' is-invalid')
                        }
                    }) }}
                    {{ form_errors(editBicycleForm.bicycleStation, {'attr': {'class': 'invalid-feedback'}}) }}
                </div>
            </div>
            <div class="col-12">
                <div class="form-group">                    {{ form_label(editBicycleForm.lastUpdated, 'Last Updated', {'label_attr': {'class': 'form-label'}}) }}
                    {{ form_widget(editBicycleForm.lastUpdated, {
                        'attr': {
                            'class': 'form-control' ~ (editBicycleForm.lastUpdated.vars.valid ? '' : ' is-invalid')
                        }
                    }) }}
                    {{ form_errors(editBicycleForm.lastUpdated, {'attr': {'class': 'invalid-feedback'}}) }}
                </div>
            </div>
        </div>
        <div class="mt-4">
            <button type="submit" class="btn btn-primary">
                <i class="fas fa-save me-1"></i> Update Bicycle
            </button>
            <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">
                <i class="fas fa-times me-1"></i> Cancel
            </button>
        </div>
    {{ form_end(editBicycleForm) }}
</template>

<!-- Edit Bicycle Modal -->
<div class="modal fade" id="editBicycleModal" data-bs-backdrop="false" data-bs-keyboard="true" tabindex="-1" aria-labelledby="editBicycleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="editBicycleModalLabel">
                    <i class="fas fa-edit me-2"></i>Edit Bicycle
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Content will be loaded here from the template -->
                <div class="text-center py-4">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading form...</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Delete Bicycle Modal -->
<div class="modal fade" id="deleteBicycleModal" data-bs-backdrop="false" data-bs-keyboard="true" tabindex="-1" aria-labelledby="deleteBicycleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="deleteBicycleModalLabel">
                    <i class="fas fa-trash me-2"></i>Delete Bicycle
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="text-center mb-3 bicycle-preview">
                    <div class="bicycle-icon-container mx-auto mb-3">
                        <i class="fas fa-bicycle" style="font-size: 32px;"></i>
                    </div>
                    <h5>Bicycle #<span id="deleteBicycleId"></span></h5>
                </div>
                
                <div class="bicycle-delete-info mb-3">
                    <div class="row">
                        <div class="col-6 mb-2">
                            <span class="fw-bold">Type:</span>
                            <span id="deleteBicycleType">--</span>
                        </div>
                        <div class="col-6 mb-2">
                            <span class="fw-bold">Battery:</span>
                            <span id="deleteBicycleBattery">--</span>
                        </div>
                        <div class="col-6 mb-2">
                            <span class="fw-bold">Range:</span>
                            <span id="deleteBicycleRange">--</span>
                        </div>
                        <div class="col-6 mb-2">
                            <span class="fw-bold">Status:</span>
                            <span id="deleteBicycleStatus">--</span>
                        </div>
                        <div class="col-12 mb-2">
                            <span class="fw-bold">Station:</span>
                            <span id="deleteBicycleStation">--</span>
                        </div>
                    </div>
                </div>
                
                <div class="alert alert-danger">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    <span><strong>Warning:</strong> This action cannot be undone and will permanently remove this bicycle from your fleet.</span>
                </div>
                
                <div class="form-check mt-3">
                    <input class="form-check-input" type="checkbox" id="confirmBicycleDelete" required>
                    <label class="form-check-label" for="confirmBicycleDelete">
                        I understand that this action is permanent
                    </label>
                </div>
            </div>
            <div class="modal-footer">                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>                  <form action="{{ path('admin_bicycle_delete') }}" method="POST" id="deleteBicycleForm">
                    <input type="hidden" name="bicycleId" id="deleteBicycleIdInput">
                    <input type="hidden" name="tab" value="{{ app.request.query.get('tab', 'bicycles') }}">
                    <button type="submit" id="deleteBicycleBtn" class="btn btn-danger" disabled>
                        <i class="fas fa-trash me-1"></i> Delete Bicycle
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Station Assignment Modal -->
<div class="modal fade" id="stationAssignModal" data-bs-backdrop="false" tabindex="-1" aria-labelledby="stationAssignModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-gradient-primary-to-secondary text-white">
                <h5 class="modal-title" id="stationAssignModalLabel">
                    <i class="fas fa-map-marker-alt me-2"></i>Assign Bicycles to Station
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                {% if stationAssignForm %}                {{ form_start(stationAssignForm, {'attr': {'novalidate': 'novalidate', 'id': 'stationAssignForm'}}) }}
                    <input type="hidden" name="tab" value="{{ app.request.query.get('tab', 'bicycles') }}">
                    <div class="row g-3">
                        <div class="col-md-6">
                            <div class="form-group">
                                {{ form_label(stationAssignForm.bicycles, 'Select Bicycles', {'label_attr': {'class': 'form-label'}}) }}
                                {{ form_widget(stationAssignForm.bicycles, {
                                    'attr': {
                                        'class': 'form-select' ~ (stationAssignForm.bicycles.vars.valid ? '' : ' is-invalid'),
                                        'multiple': 'multiple',
                                        'data-placeholder': 'Choose bicycles to assign...',
                                        'style': 'width: 100%'
                                    }
                                }) }}
                                {{ form_errors(stationAssignForm.bicycles, {'attr': {'class': 'invalid-feedback'}}) }}
                                <div class="form-text text-muted">Select multiple bicycles to assign</div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                {{ form_label(stationAssignForm.station, 'Destination Station', {'label_attr': {'class': 'form-label'}}) }}
                                {{ form_widget(stationAssignForm.station, {
                                    'attr': {
                                        'class': 'form-select' ~ (stationAssignForm.station.vars.valid ? '' : ' is-invalid')
                                    }
                                }) }}
                                {{ form_errors(stationAssignForm.station, {'attr': {'class': 'invalid-feedback'}}) }}
                            </div>
                        </div>
                        <div class="col-12 mt-3">
                            <div class="card bg-light border">
                                <div class="card-body">
                                    <h6 class="mb-3"><i class="fas fa-info-circle me-2"></i>Station Information</h6>
                                    <div id="stationInfo" class="d-flex align-items-center">
                                        <div id="stationCapacityVisual" class="me-3" style="height: 50px; width: 50px; border-radius: 50%; display: flex; align-items: center; justify-content: center; font-weight: bold; background-color: rgba(13, 110, 253, 0.1); color: #0d6efd;">
                                            --
                                        </div>
                                        <div>
                                            <div id="stationName" class="fw-bold mb-1">Please select a station</div>
                                            <div class="d-flex align-items-center text-muted small">
                                                <div class="me-3"><i class="fas fa-bicycle me-1"></i>Capacity: <span id="stationCapacity">--</span></div>
                                                <div><i class="fas fa-check me-1"></i>Available: <span id="stationAvailable">--</span></div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="mt-4">
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-save me-1"></i> Assign Bicycles
                        </button>
                        <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">
                            <i class="fas fa-times me-1"></i> Cancel
                        </button>
                    </div>
                {{ form_end(stationAssignForm) }}
                {% else %}
                <div class="alert alert-info">
                    <i class="fas fa-info-circle me-2"></i> Station assignment form is not available. Please reload the page or contact support.
                </div>
                {% endif %}
            </div>
        </div>
    </div>
</div>

<!-- Maintenance Scheduling Modal -->
<div class="modal fade" id="scheduleMaintenance" data-bs-backdrop="false" tabindex="-1" aria-labelledby="scheduleMaintenanceLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-warning text-dark">
                <h5 class="modal-title" id="scheduleMaintenanceLabel">
                    <i class="fas fa-tools me-2"></i>Schedule Maintenance
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                {% if maintenanceForm %}                {{ form_start(maintenanceForm, {'attr': {'novalidate': 'novalidate', 'id': 'maintenanceForm'}}) }}
                    <input type="hidden" name="tab" value="{{ app.request.query.get('tab', 'bicycles') }}">
                    <div class="row g-3">
                        <div class="col-md-6">
                            <div class="form-group">
                                {{ form_label(maintenanceForm.bicycles, 'Select Bicycles', {'label_attr': {'class': 'form-label'}}) }}
                                {{ form_widget(maintenanceForm.bicycles, {
                                    'attr': {
                                        'class': 'form-select' ~ (maintenanceForm.bicycles.vars.valid ? '' : ' is-invalid'),
                                        'multiple': 'multiple',
                                        'data-placeholder': 'Choose bicycles for maintenance...',
                                        'style': 'width: 100%'
                                    }
                                }) }}
                                {{ form_errors(maintenanceForm.bicycles, {'attr': {'class': 'invalid-feedback'}}) }}
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                {{ form_label(maintenanceForm.maintenanceType, 'Maintenance Type', {'label_attr': {'class': 'form-label'}}) }}
                                {{ form_widget(maintenanceForm.maintenanceType, {
                                    'attr': {
                                        'class': 'form-select' ~ (maintenanceForm.maintenanceType.vars.valid ? '' : ' is-invalid')
                                    }
                                }) }}
                                {{ form_errors(maintenanceForm.maintenanceType, {'attr': {'class': 'invalid-feedback'}}) }}
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                {{ form_label(maintenanceForm.scheduledDate, 'Scheduled Date', {'label_attr': {'class': 'form-label'}}) }}
                                <div class="input-group">
                                    {{ form_widget(maintenanceForm.scheduledDate, {
                                        'attr': {
                                            'class': 'form-control' ~ (maintenanceForm.scheduledDate.vars.valid ? '' : ' is-invalid')
                                        }
                                    }) }}
                                    <span class="input-group-text"><i class="fas fa-calendar-alt"></i></span>
                                    {{ form_errors(maintenanceForm.scheduledDate, {'attr': {'class': 'invalid-feedback'}}) }}
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                {{ form_label(maintenanceForm.priority, 'Priority', {'label_attr': {'class': 'form-label'}}) }}
                                {{ form_widget(maintenanceForm.priority, {
                                    'attr': {
                                        'class': 'form-select' ~ (maintenanceForm.priority.vars.valid ? '' : ' is-invalid')
                                    }
                                }) }}
                                {{ form_errors(maintenanceForm.priority, {'attr': {'class': 'invalid-feedback'}}) }}
                            </div>
                        </div>
                        <div class="col-12">
                            <div class="form-group">
                                {{ form_label(maintenanceForm.description, 'Description', {'label_attr': {'class': 'form-label'}}) }}
                                {{ form_widget(maintenanceForm.description, {
                                    'attr': {
                                        'class': 'form-control' ~ (maintenanceForm.description.vars.valid ? '' : ' is-invalid'),
                                        'rows': '3'
                                    }
                                }) }}
                                {{ form_errors(maintenanceForm.description, {'attr': {'class': 'invalid-feedback'}}) }}
                            </div>
                        </div>
                    </div>
                    <div class="mt-4">
                        <button type="submit" class="btn btn-warning text-dark">
                            <i class="fas fa-tools me-1"></i> Schedule Maintenance
                        </button>
                        <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">
                            <i class="fas fa-times me-1"></i> Cancel
                        </button>
                    </div>
                {{ form_end(maintenanceForm) }}
                {% else %}
                <div class="alert alert-info">
                    <i class="fas fa-info-circle me-2"></i> Maintenance form is not available. Please reload the page or contact support.
                </div>
                {% endif %}
            </div>
        </div>
    </div>
</div>

<!-- Bicycle Status Change Form -->
<form id="bicycleStatusForm" method="POST" action="{{ path('admin_bicycle_change_status') }}">
    <input type="hidden" id="statusChangeBicycleId" name="bicycleId">
    <input type="hidden" id="statusChangeValue" name="status">
    <input type="hidden" name="tab" value="{{ app.request.query.get('tab', 'bicycles') }}">
</form>

<!-- Include unified JavaScript file for bicycle management -->
<script src="{{ asset('js/back/bicycle/bicycle.js') }}"></script>

<!-- Modal and form initialization script -->
<script>
document.addEventListener('DOMContentLoaded', function() {
    console.log('Bicycle page initialized');
    
    // Wait for the page to fully load before manipulating modals
    setTimeout(() => {
        // Remove any existing backdrops once and for all
        document.querySelectorAll('.modal-backdrop').forEach(backdrop => {
            backdrop.remove();
        });
        document.body.classList.remove('modal-open');
        document.body.style.overflow = '';
        document.body.style.paddingRight = '';
        
        // Simple but effective function to initialize modals properly
        function initializeModal(modalId) {
            const modalElement = document.getElementById(modalId);
            if (!modalElement) return;
            
            console.log(`Initializing modal: ${modalId}`);
            
            // Clean up any existing instance first
            try {
                const existingModal = bootstrap.Modal.getInstance(modalElement);
                if (existingModal) {
                    existingModal.dispose();
                    console.log(`Disposed existing instance of ${modalId}`);
                }
            } catch (e) {
                // No existing instance, continue
            }
            
            // Set modal attributes to disable backdrop
            modalElement.setAttribute('data-bs-backdrop', 'false');
            modalElement.setAttribute('data-bs-keyboard', 'true');
            
            // Ensure modal dialog is centered
            const modalDialog = modalElement.querySelector('.modal-dialog');
            if (modalDialog) {
                modalDialog.classList.add('modal-dialog-centered');
            }
            
            // Create new modal instance with no backdrop
            const modal = new bootstrap.Modal(modalElement, {
                backdrop: false,
                keyboard: true
            });
            
            // Add shown event listener to ensure no backdrop is created
            modalElement.addEventListener('shown.bs.modal', function() {
                document.querySelectorAll('.modal-backdrop').forEach(backdrop => {
                    backdrop.remove();
                });
            });
            
            console.log(`Modal ${modalId} initialized successfully`);
        }
        
        // Initialize all modals
        ['addBicycleModal', 'editBicycleModal', 'deleteBicycleModal', 
         'stationAssignModal', 'scheduleMaintenance'].forEach(initializeModal);
        
        console.log('Checking for modal elements:',
            document.getElementById('addBicycleModal') ? 'Add modal found' : 'Add modal NOT found',
            document.getElementById('editBicycleModal') ? 'Edit modal found' : 'Edit modal NOT found'
        );
        console.log('Checking for forms:',
            document.getElementById('addBicycleForm') ? 'Add form found' : 'Add form NOT found'
        );
    }, 100); // Small delay to ensure all DOM elements are ready
      // Function to ensure modal is centered and has proper backdrop
    function setupModal(modalId) {
        const modal = document.getElementById(modalId);
        if (modal) {
            // First, destroy any existing bootstrap modal instance to avoid conflicts
            try {
                const existingModal = bootstrap.Modal.getInstance(modal);
                if (existingModal) {
                    existingModal.dispose();
                    console.log(`Disposed existing ${modalId} modal instance`);
                }
            } catch (e) {
                console.log(`No existing ${modalId} modal instance to dispose`);
            }
            
            // Ensure the modal has NO backdrop
            modal.setAttribute('data-bs-backdrop', 'false');
            modal.setAttribute('data-bs-keyboard', 'true');
            
            // Ensure the modal dialog is centered
            const dialog = modal.querySelector('.modal-dialog');
            if (dialog && !dialog.classList.contains('modal-dialog-centered')) {
                dialog.classList.add('modal-dialog-centered');
            }
            
            // Set proper z-index to ensure modal appears above other content
            modal.style.zIndex = '1060';
            
            // Add event listener to ensure proper positioning on show
            modal.addEventListener('show.bs.modal', function() {
                // Remove any existing backdrop elements that might have been created
                const existingBackdrops = document.querySelectorAll('.modal-backdrop');
                existingBackdrops.forEach(function(backdrop) {
                    backdrop.parentNode.removeChild(backdrop);
                });
                
                setTimeout(() => {
                    if (dialog) {
                        // Reset any manually applied styles
                        dialog.style.display = '';
                        dialog.style.marginTop = '';
                        
                        // Add styling to ensure proper centering
                        dialog.style.display = 'flex';
                        dialog.style.alignItems = 'center';
                        dialog.style.justifyContent = 'center';
                    }
                }, 50);
            });
            
            // Ensure modal content stays visible after shown
            modal.addEventListener('shown.bs.modal', function() {
                // Check if modal content is visible
                const content = modal.querySelector('.modal-content');
                if (content) {
                    content.style.display = 'block';
                }
                console.log(`Modal ${modalId} shown and visible`);
            });
            
            console.log(`Modal ${modalId} setup complete`);
        }
    }
      // Set up all modals with a small delay to ensure DOM is ready
    setTimeout(() => {
        setupModal('addBicycleModal');
        setupModal('editBicycleModal');
        setupModal('deleteBicycleModal');
        setupModal('stationAssignModal');
        setupModal('scheduleMaintenance');
        
        console.log('All modals have been properly initialized');
    }, 100);
            // Attach click handler to the 'Add New Bicycle' button to ensure modal shows correctly
    document.querySelectorAll('[data-bs-toggle="modal"][data-bs-target="#addBicycleModal"]').forEach(function(button) {
        console.log('Found add bicycle button, attaching click handler');
        button.addEventListener('click', function(e) {
            console.log('Add bicycle button clicked');
            // Ensure body has the right classes
            document.body.classList.add('modal-open');
            
            // Make sure we don't have duplicate backdrops
            const existingBackdrops = document.querySelectorAll('.modal-backdrop');
            existingBackdrops.forEach(function(backdrop) {
                backdrop.parentNode.removeChild(backdrop);
            });
        });
    });
    
    // Ensure all modals have proper positioning
    document.querySelectorAll('.modal').forEach(function(modal) {
        modal.addEventListener('show.bs.modal', function(e) {
            console.log(`Modal ${modal.id} show event`);
            const dialog = modal.querySelector('.modal-dialog');
            if (dialog && !dialog.classList.contains('modal-dialog-centered')) {
                dialog.classList.add('modal-dialog-centered');
            }
        });
    });    const editBicycleModal = document.getElementById('editBicycleModal');
    if (editBicycleModal) {
        console.log('Edit bicycle modal found - edit functionality handled by edit-bicycle-handler.js');
        // All edit bicycle functionality is now handled in edit-bicycle-handler.js
    }
      // Note: Real-time validation is now handled in the dedicated handler files
    // create-bicycle-handler.js and edit-bicycle-handler.js      // Note: Bicycle edit functionality is now handled in edit-bicycle-handler.js
    // Additional functionality is also handled in create-bicycle-handler.js
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`Server returned ${response.status}: ${response.statusText}`);
                        }
                        return response.json();
                    })
                    .then(data => {
                        console.log('Bicycle data received:', data);
                        
                        // Get the form template and clone it properly
                        const templateContent = document.getElementById('editBicycleFormTemplate');
                        if (!templateContent) {
                            throw new Error('Edit bicycle form template not found in the DOM');
                        }
                        
                        const formClone = document.importNode(templateContent.content, true);
                        
                        // Clear the modal body and append the cloned form
                        modalBody.innerHTML = '';
                        modalBody.appendChild(formClone);
                          // Get the form that was just added to the DOM
                        const editForm = modalBody.querySelector('#editBicycleForm');
                        
                        // Set form hidden id field
                        const idField = editForm.querySelector('input[name="bicycleId"]');
                        if (idField) idField.value = bicycleId;                          // Set form action URL - make sure it points to the correct controller action
                        const formAction = `/admin/bicycle/${bicycleId}/edit`;
                        editForm.setAttribute('action', formAction);
                        editForm.setAttribute('data-action-url', formAction);
                        console.log('Setting edit form action to:', formAction);
                        
                        // Set battery level
                        const batteryField = editForm.querySelector('[name$="[batteryLevel]"]');
                        if (batteryField) batteryField.value = data.batteryLevel;

                        // Set range
                        const rangeField = editForm.querySelector('[name$="[rangeKm]"]');
                        if (rangeField) rangeField.value = data.rangeKm;                        // Set status select
                        const statusSelect = editForm.querySelector('[name$="[status]"]');
                        if (statusSelect) {
                            Array.from(statusSelect.options).forEach(option => {
                                if (option.value === data.status) {
                                    option.selected = true;
                                }
                            });
                        }
                        
                        // Set station select if available
                        const stationSelect = editForm.querySelector('[name$="[bicycleStation]"]');
                        if (stationSelect && data.bicycleStation) {
                            Array.from(stationSelect.options).forEach(option => {
                                if (option.value === data.bicycleStation.idStation.toString()) {
                                    option.selected = true;
                                }
                            });
                        }
                        
                        // Set last updated
                        const lastUpdatedField = editForm.querySelector('[name$="[lastUpdated]"]');
                        if (lastUpdatedField) lastUpdatedField.value = data.lastUpdated;
                          // Add a hidden field to preserve the tab parameter
                        const urlParams = new URLSearchParams(window.location.search);
                        if (urlParams.has('tab')) {
                            let tabInput = document.createElement('input');
                            tabInput.type = 'hidden';
                            tabInput.name = 'tab';
                            tabInput.value = urlParams.get('tab');
                            editForm.appendChild(tabInput);
                        }
                        
                        // Add form submission handler
                        editForm.addEventListener('submit', function(e) {
                            e.preventDefault();
                            
                            const form = e.target;
                            const { isValid, errorMessages } = validateBicycleForm(form);
                            
                            if (!isValid) {
                                // Show validation errors
                                const errorAlert = document.createElement('div');
                                errorAlert.className = 'alert alert-danger mt-3';
                                errorAlert.innerHTML = '<i class="fas fa-exclamation-triangle me-2"></i><strong>Error:</strong> Please correct the following issues:<ul>' +
                                    errorMessages.map(msg => `<li>${msg}</li>`).join('') + '</ul>';
                                
                                // Remove existing alerts
                                const existingAlerts = form.querySelectorAll('.alert');
                                existingAlerts.forEach(alert => alert.remove());
                                
                                // Add new alert
                                form.insertAdjacentElement('afterbegin', errorAlert);
                                
                                // Focus first error
                                const firstError = form.querySelector('.is-invalid');
                                if (firstError) firstError.focus();
                            } else {
                                // Ensure tab parameter is preserved
                                const urlParams = new URLSearchParams(window.location.search);
                                if (urlParams.has('tab')) {
                                    let tabInput = form.querySelector('input[name="tab"]');
                                    if (!tabInput) {
                                        tabInput = document.createElement('input');
                                        tabInput.type = 'hidden';
                                        tabInput.name = 'tab';
                                        form.appendChild(tabInput);
                                    }
                                    tabInput.value = urlParams.get('tab');
                                }
                                  // Get bicycle ID and set form action
                                const bicycleId = form.querySelector('.bicycle-id-field').value;
                                if (!bicycleId) {
                                    console.error('No bicycle ID found in the form');
                                    return;
                                }
                                
                                // Set form action and submit
                                const formAction = `/admin/bicycle/${bicycleId}/edit`;
                                form.action = formAction;
                                console.log(`Submitting form to ${formAction} with bicycle ID ${bicycleId}`);
                                
                                // Submit the form
                                form.submit();
                            }                        });
                    })
                .catch(error => {
                        console.error('Error loading bicycle data:', error);
                        modalBody.innerHTML = `
                            <div class="alert alert-danger">
                                <h5 class="alert-heading"><i class="fas fa-exclamation-triangle me-2"></i>Error Loading Data</h5>
                                <p>There was a problem loading the bicycle data: ${error.message}</p>
                                <hr>
                                <p class="mb-0">Please try again or refresh the page.</p>
                            </div>
                            <div class="text-center mt-3">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                <button type="button" class="btn btn-primary reload-form-btn">
                                    <i class="fas fa-sync-alt me-2"></i>Try Again
                                </button>
                            </div>
                        `;
                        
                        // Add event listener for the reload button
                        const reloadBtn = modalBody.querySelector('.reload-form-btn');
                        if (reloadBtn) {
                            reloadBtn.addEventListener('click', function() {
                                // Trigger the edit button click event again
                                button.click();
                            });
                        }
                    });
            }
        });
    });
    
    // Client-side search functionality for bicycles
    const bicycleSearchInput = document.getElementById('bicycleSearchInput');
    const bicycleSearchClearBtn = document.getElementById('bicycleSearchClearBtn');
    
    if (bicycleSearchInput) {
        bicycleSearchInput.addEventListener('input', function() {
            const searchTerm = this.value.toLowerCase().trim();
            filterBicyclesTable(searchTerm);
        });
        
        // Clear search button
        if (bicycleSearchClearBtn) {
            bicycleSearchClearBtn.addEventListener('click', function() {
                bicycleSearchInput.value = '';
                filterBicyclesTable(''); // Reset filter
            });
        }
    }
    
    // Function to filter bicycles table based on search term
    function filterBicyclesTable(searchTerm) {
        const tableRows = document.querySelectorAll('#bicyclesTable tbody tr');
        let hasResults = false;
        
        // Add loading effect
        document.querySelector('#bicyclesTable').classList.add('opacity-50');
        
        tableRows.forEach(row => {
            if (!searchTerm) {
                // If search is empty, show all rows
                row.style.display = '';
                hasResults = true;
            } else {
                const cells = row.querySelectorAll('td');
                let rowMatches = false;
                
                // Check each cell for match
                cells.forEach(cell => {
                    const cellText = cell.textContent.toLowerCase();
                    if (cellText.includes(searchTerm)) {
                        rowMatches = true;
                    }
                });
                
                // Show or hide row based on match
                if (rowMatches) {
                    row.style.display = '';
                    hasResults = true;
                } else {
                    row.style.display = 'none';
                }
            }
        });
        
        // Show empty state if no results
        const emptyStateRow = document.querySelector('.empty-bicycle-search-results');
        if (!hasResults) {
            if (!emptyStateRow) {
                const tbody = document.querySelector('#bicyclesTable tbody');
                const newRow = document.createElement('tr');
                newRow.className = 'empty-bicycle-search-results';
                newRow.innerHTML = `
                    <td colspan="8">
                        <div class="text-center py-4">
                            <div class="mb-3">
                                <i class="fas fa-search fa-3x text-muted opacity-50"></i>
                            </div>
                            <h5>No bicycles found</h5>
                            <p class="text-muted mb-3">No bicycle records match your search criteria</p>
                            <button type="button" class="btn btn-primary clear-bicycle-search-btn">
                                <i class="fas fa-times-circle me-2"></i>Clear Search
                            </button>
                        </div>
                    </td>
                `;
                tbody.appendChild(newRow);
                
                // Add event listener to clear search button
                newRow.querySelector('.clear-bicycle-search-btn').addEventListener('click', function() {
                    bicycleSearchInput.value = '';
                    filterBicyclesTable('');
                });
            }
        } else if (emptyStateRow) {
            emptyStateRow.remove();
        }
        
        // Remove loading effect with small delay for visual feedback
        setTimeout(() => {
            document.querySelector('#bicyclesTable').classList.remove('opacity-50');
        }, 200);
    }
});
</script>

<!-- Edit Bicycle Form Handler - Handler moved to main bicycle validation script -->
<script>
document.addEventListener('DOMContentLoaded', function() {    // Initialize delete bicycle functionality
    const deleteBicycleModal = document.getElementById('deleteBicycleModal');
    const deleteBicycleBtn = document.getElementById('deleteBicycleBtn');
    const confirmDeleteCheckbox = document.getElementById('confirmBicycleDelete');
    const deleteBicycleIdInput = document.getElementById('deleteBicycleIdInput');
    
    // Add click handler for delete bicycle buttons
    document.querySelectorAll('.delete-bicycle').forEach(button => {
        button.addEventListener('click', function(e) {
            e.preventDefault();
            const bicycleId = this.getAttribute('data-bicycle-id');
            
            if (bicycleId) {
                // Set bicycle ID in hidden field
                deleteBicycleIdInput.value = bicycleId;
                document.getElementById('deleteBicycleId').textContent = bicycleId;
                
                // Reset checkbox
                confirmDeleteCheckbox.checked = false;
                deleteBicycleBtn.disabled = true;
                
                // Fetch bicycle data to display in modal
                fetch(`/admin/bicycle/${bicycleId}/data`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`Server returned ${response.status}: ${response.statusText}`);
                        }
                        return response.json();
                    })
                    .then(data => {
                        // Populate the modal with bicycle data
                        document.getElementById('deleteBicycleType').textContent = 'Electric';
                        document.getElementById('deleteBicycleBattery').textContent = `${data.batteryLevel}%`;
                        document.getElementById('deleteBicycleRange').textContent = `${data.rangeKm} km`;
                        document.getElementById('deleteBicycleStatus').textContent = data.status;
                        document.getElementById('deleteBicycleStation').textContent = data.bicycleStation ? data.bicycleStation.name : 'None';
                        
                        // Show modal
                        const modal = new bootstrap.Modal(deleteBicycleModal);
                        modal.show();
                    })
                    .catch(error => {
                        console.error('Error loading bicycle data:', error);
                        // Still show the modal with limited information
                        document.getElementById('deleteBicycleType').textContent = '--';
                        document.getElementById('deleteBicycleBattery').textContent = '--';
                        document.getElementById('deleteBicycleRange').textContent = '--';
                        document.getElementById('deleteBicycleStatus').textContent = '--';
                        document.getElementById('deleteBicycleStation').textContent = '--';
                        
                        const modal = new bootstrap.Modal(deleteBicycleModal);
                        modal.show();
                    });
            }
        });
    });
    
    // Handle checkbox toggle for delete confirmation
    if (confirmDeleteCheckbox) {
        confirmDeleteCheckbox.addEventListener('change', function() {
            deleteBicycleBtn.disabled = !this.checked;
        });
    }
    
    // Reset delete modal when hidden
    if (deleteBicycleModal) {
        deleteBicycleModal.addEventListener('hidden.bs.modal', function() {
            // Reset form values
            if (confirmDeleteCheckbox) confirmDeleteCheckbox.checked = false;
            if (deleteBicycleBtn) deleteBicycleBtn.disabled = true;
            
            // Reset bicycle info fields
            document.getElementById('deleteBicycleId').textContent = '';
            document.getElementById('deleteBicycleType').textContent = '--';
            document.getElementById('deleteBicycleBattery').textContent = '--';
            document.getElementById('deleteBicycleRange').textContent = '--';
            document.getElementById('deleteBicycleStatus').textContent = '--';
            document.getElementById('deleteBicycleStation').textContent = '--';
            
            // Remove any error messages if present
            const errorAlerts = deleteBicycleModal.querySelectorAll('.alert');
            errorAlerts.forEach(alert => alert.remove());
            
            console.log('Delete bicycle modal reset after closing');
        });
    }
});
</script>