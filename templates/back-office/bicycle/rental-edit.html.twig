{% extends 'back-office/base.html.twig' %}

{% block title %}Edit Rental #{{ rental.idUserRental }}{% endblock %}

{% block content %}
<div class="container-fluid">
    <!-- Header with breadcrumbs -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div class="d-flex align-items-center">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb mb-0">
                    <li class="breadcrumb-item"><a href="{{ path('admin_bicycle_rentals', {tab:"rentals"}) }}">Rentals</a></li>
                    <li class="breadcrumb-item"><a href="{{ path('admin_bicycle_rental_show', {'id': rental.idUserRental}) }}">Rental #{{ rental.idUserRental }}</a></li>
                    <li class="breadcrumb-item active">Edit Rental</li>
                </ol>
            </nav>
        </div>
        <a href="{{ path('admin_bicycle_rental_show', {'id': rental.idUserRental}) }}" class="btn btn-outline-secondary">
            <i class="fas fa-arrow-left me-1"></i> Back to Details
        </a>
    </div>

    <!-- Rental ID and Status Banner -->
    {% set status = 'Reserved' %}
    {% set statusColor = 'warning' %}
    {% set statusBadge = '<i class="fas fa-clock me-1"></i> Reserved' %}
    {% if rental.startTime and rental.endTime %}
        {% set status = 'Completed' %}
        {% set statusColor = 'success' %}
        {% set statusBadge = '<i class="fas fa-check-circle me-1"></i> Completed' %}
    {% elseif rental.startTime %}
        {% set status = 'Active' %}
        {% set statusColor = 'primary' %}
        {% set statusBadge = '<i class="fas fa-bicycle me-1"></i> Active' %}
    {% endif %}

    <div class="card mb-4 border-{{ statusColor }}">
        <div class="card-body p-3 d-flex justify-content-between align-items-center">
            <div>
                <h4 class="m-0">
                    <i class="fas fa-hashtag me-1"></i> Rental ID: <span class="fw-bold">B{{ '%05d'|format(rental.idUserRental) }}</span>
                    <span class="badge bg-{{ statusColor }} ms-2">{{ statusBadge|raw }}</span>
                </h4>
            </div>
            {% if status == 'Active' %}
                <div class="timer-badge">
                    {% set duration_seconds = date().timestamp - rental.startTime.timestamp %}
                    {% set hours = (duration_seconds / 3600)|round(0, 'floor') %}
                    {% set minutes = ((duration_seconds % 3600) / 60)|round(0, 'floor') %}
                    <i class="fas fa-stopwatch me-2"></i> Active for {{ hours }}h {{ minutes }}m
                </div>
            {% endif %}
        </div>
    </div>

    <!-- Flash messages -->
    {% for label, messages in app.flashes %}
        {% for message in messages %}
            <div class="alert alert-{{ label }} alert-dismissible fade show" role="alert">
                <i class="fas fa-{% if label == 'success' %}check-circle{% elseif label == 'danger' or label == 'error' %}exclamation-triangle{% else %}info-circle{% endif %} me-2"></i>
                {{ message }}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        {% endfor %}
    {% endfor %}

    <div class="row">
        <!-- Main Form Card -->
        <div class="col-lg-8">
            <div class="card shadow-sm">
                <div class="card-header bg-white py-3">
                    <h5 class="card-title mb-0"><i class="fas fa-edit me-2"></i>Edit Rental Information</h5>
                </div>
                <div class="card-body">
                    {{ form_start(form, {'attr': {'novalidate': 'novalidate', 'class': 'rental-form'}}) }}
                    
                    <div class="mb-4">
                        <h6 class="text-uppercase text-muted fw-bold small mb-3">
                            <i class="fas fa-info-circle me-2"></i>Basic Information
                        </h6>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label"><i class="fas fa-user me-1"></i> User</label>
                                {{ form_widget(form.user, {'attr': {'class': 'form-select'}}) }}
                                {{ form_errors(form.user) }}
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label"><i class="fas fa-bicycle me-1"></i> Bicycle</label>
                                {{ form_widget(form.bicycle, {'attr': {'class': 'form-select'}}) }}
                                {{ form_errors(form.bicycle) }}
                            </div>
                        </div>
                    </div>
                    
                    <div class="mb-4">
                        <h6 class="text-uppercase text-muted fw-bold small mb-3">
                            <i class="fas fa-map-marker-alt me-2"></i>Station Information
                        </h6>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label"><i class="fas fa-map-pin me-1"></i> Start Station</label>
                                {{ form_widget(form.startStation, {'attr': {'class': 'form-select'}}) }}
                                {{ form_errors(form.startStation) }}
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label"><i class="fas fa-flag-checkered me-1"></i> End Station</label>
                                {{ form_widget(form.endStation, {'attr': {'class': 'form-select'}}) }}
                                <small class="text-muted"><i class="fas fa-info-circle me-1"></i> Optional if rental is not completed yet</small>
                                {{ form_errors(form.endStation) }}
                            </div>
                        </div>
                    </div>
                    
                    <div class="mb-4">
                        <h6 class="text-uppercase text-muted fw-bold small mb-3">
                            <i class="fas fa-clock me-2"></i>Time Information
                        </h6>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label"><i class="fas fa-play me-1"></i> Start Time</label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fas fa-calendar-alt"></i></span>
                                    {{ form_widget(form.startTime, {'attr': {'class': 'form-control'}}) }}
                                </div>
                                {{ form_errors(form.startTime) }}
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label"><i class="fas fa-stop me-1"></i> End Time</label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fas fa-calendar-check"></i></span>
                                    {{ form_widget(form.endTime, {'attr': {'class': 'form-control'}}) }}
                                </div>
                                <small class="text-muted"><i class="fas fa-info-circle me-1"></i> Leave empty for ongoing rentals</small>
                                {{ form_errors(form.endTime) }}
                            </div>
                        </div>
                    </div>
                    
                    <div class="mb-4">
                        <h6 class="text-uppercase text-muted fw-bold small mb-3">
                            <i class="fas fa-chart-line me-2"></i>Usage Information
                        </h6>
                        <div class="row">
                            <div class="col-md-4 mb-3">
                                <label class="form-label"><i class="fas fa-coins me-1"></i> Cost (TND)</label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fas fa-dollar-sign"></i></span>
                                    {{ form_widget(form.cost, {'attr': {'class': 'form-control', 'step': '0.001', 'min': '0'}}) }}
                                </div>
                                {{ form_errors(form.cost) }}
                            </div>
                            <div class="col-md-4 mb-3">
                                <label class="form-label"><i class="fas fa-route me-1"></i> Distance (km)</label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fas fa-tachometer-alt"></i></span>
                                    {{ form_widget(form.distanceKm, {'attr': {'class': 'form-control', 'step': '0.1', 'min': '0'}}) }}
                                    <span class="input-group-text">km</span>
                                </div>
                                {{ form_errors(form.distanceKm) }}
                            </div>
                            <div class="col-md-4 mb-3">
                                <label class="form-label"><i class="fas fa-battery-half me-1"></i> Battery Used (%)</label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fas fa-bolt"></i></span>
                                    {{ form_widget(form.batteryUsed, {'attr': {'class': 'form-control', 'step': '0.1', 'min': '0', 'max': '100'}}) }}
                                    <span class="input-group-text">%</span>
                                </div>
                                {{ form_errors(form.batteryUsed) }}
                            </div>
                        </div>
                    </div>
                    
                    {% if status == 'Active' %}
                    <div class="mb-4">
                        <div class="alert alert-info">
                            <div class="d-flex">
                                <div class="flex-shrink-0">
                                    <i class="fas fa-info-circle fa-2x me-3"></i>
                                </div>
                                <div>
                                    <h6 class="alert-heading mb-1"><i class="fas fa-flag-checkered me-1"></i> Complete this rental</h6>
                                    <p class="mb-2">Check this box if you want to mark this rental as completed:</p>
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="completeRental" name="completeRental" value="1">
                                        <label class="form-check-label" for="completeRental">
                                            <i class="fas fa-check-circle me-1"></i> Mark as completed
                                        </label>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    {% endif %}
                    
                    <div class="d-flex justify-content-end mt-4">
                        <a href="{{ path('admin_bicycle_rental_show', {'id': rental.idUserRental}) }}" class="btn btn-outline-secondary me-2">
                            <i class="fas fa-times me-1"></i> Cancel
                        </a>
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-save me-1"></i> Update Rental
                        </button>
                    </div>
                    
                    {{ form_end(form) }}
                </div>
            </div>
        </div>
        
        <!-- Sidebar Cards -->
        <div class="col-lg-4">
            <!-- Bicycle Information Card -->
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-white py-3">
                    <h5 class="card-title mb-0"><i class="fas fa-bicycle me-2"></i>Bicycle Information</h5>
                </div>
                <div class="card-body">
                    {% if rental.bicycle %}
                        {% set isPremium = rental.bicycle.batteryLevel > 90 %}
                        <div class="text-center mb-4">
                            <div class="bicycle-icon-container mb-3">
                                <i class="fas fa-bicycle fa-3x text-{{ isPremium ? 'success' : 'primary' }}"></i>
                            </div>
                            <h5 class="mb-1">{{ isPremium ? 'Premium' : 'Standard' }} E-Bike</h5>
                            <p class="text-muted mb-0">Bike #{{ rental.bicycle.idBike }}</p>
                        </div>
                        <div class="mb-3">
                            <label class="form-label text-muted d-flex align-items-center">
                                <i class="fas fa-battery-three-quarters me-2"></i> Battery Level
                            </label>
                            <div class="progress" style="height: 15px;">
                                <div class="progress-bar bg-{{ isPremium ? 'success' : 'primary' }}" role="progressbar" 
                                    style="width: {{ rental.bicycle.batteryLevel }}%;" 
                                    aria-valuenow="{{ rental.bicycle.batteryLevel }}" aria-valuemin="0" aria-valuemax="100">
                                    {{ rental.bicycle.batteryLevel }}%
                                </div>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label text-muted d-flex align-items-center">
                                <i class="fas fa-route me-2"></i> Range
                            </label>
                            <p class="mb-0 ps-4">{{ rental.bicycle.rangeKm }} km</p>
                        </div>
                        <div class="mb-3">
                            <label class="form-label text-muted d-flex align-items-center">
                                <i class="fas fa-info-circle me-2"></i> Status
                            </label>
                            <p class="mb-0 ps-4">
                                {% set bicycleStatus = rental.bicycle.status.value %}
                                <span class="badge {% if bicycleStatus == 'available' %}bg-success{% elseif bicycleStatus == 'in_use' %}bg-primary{% elseif bicycleStatus == 'maintenance' %}bg-warning{% else %}bg-secondary{% endif %}">
                                    <i class="fas fa-{{ bicycleStatus == 'available' ? 'check' : (bicycleStatus == 'in_use' ? 'bicycle' : (bicycleStatus == 'maintenance' ? 'tools' : 'times')) }} me-1"></i>
                                    {{ bicycleStatus|capitalize|replace({'_': ' '}) }}
                                </span>
                            </p>
                        </div>
                    {% else %}
                        <div class="text-center py-4">
                            <i class="fas fa-bicycle fa-3x text-muted mb-3"></i>
                            <h5>No Bicycle Information</h5>
                            <p class="text-muted">This rental is not associated with any bicycle.</p>
                        </div>
                    {% endif %}
                </div>
            </div>
            
            <!-- Quick Actions Card -->
            <div class="card shadow-sm">
                <div class="card-header bg-white py-3">
                    <h5 class="card-title mb-0"><i class="fas fa-bolt me-2"></i>Quick Actions</h5>
                </div>
                <div class="card-body">
                    <div class="d-grid gap-2">
                        <a href="{{ path('admin_bicycle_rental_show', {'id': rental.idUserRental}) }}" class="btn btn-outline-primary">
                            <i class="fas fa-eye me-2"></i>View Details
                        </a>
                        {% if status == 'Reserved' %}
                            <button type="button" class="btn btn-success activate-rental-btn" data-rental-id="{{ rental.idUserRental }}">
                                <i class="fas fa-play me-2"></i>Activate Rental
                            </button>
                        {% endif %}
                        {% if status != 'Completed' %}
                            <button type="button" class="btn btn-outline-danger cancel-rental-btn" data-rental-id="{{ rental.idUserRental }}">
                                <i class="fas fa-times me-2"></i>Cancel Rental
                            </button>
                        {% endif %}
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<form id="activateRentalForm" method="POST" style="display: none;"></form>
<form id="cancelRentalForm" method="POST" style="display: none;"></form>
<div class="modal fade" id="confirmActionModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmActionTitle"><i class="fas fa-question-circle"></i> Confirm Action</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="confirmActionBody">
                Are you sure you want to proceed with this action?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal"><i class="fas fa-times"></i> Cancel</button>
                <button type="button" class="btn btn-primary" id="confirmActionBtn"><i class="fas fa-check"></i> Confirm</button>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block stylesheets %}
{{ parent() }}
<style>
    /* Major overhaul: modern, clean, and visually rich form styling */
    .bicycle-icon-container {
        width: 80px;
        height: 80px;
        border-radius: 50%;
        background: linear-gradient(135deg, #e7f1ff 0%, #cfe2ff 100%);
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto;
        box-shadow: 0 2px 12px rgba(13,110,253,0.08);
    }
    .timer-badge {
        background: linear-gradient(90deg, #e3f2fd 0%, #bbdefb 100%);
        color: #0d6efd;
        padding: 8px 20px;
        border-radius: 50px;
        font-weight: 600;
        font-size: 1.1rem;
        animation: pulse 2s infinite;
        box-shadow: 0 1px 6px rgba(13,110,253,0.08);
    }
    @keyframes pulse {
        0% { opacity: 1; }
        50% { opacity: 0.7; }
        100% { opacity: 1; }
    }
    
    .card {
        border-radius: 0.5rem;
        border: none;
    }
    
    .card-header {
        border-radius: 0.5rem 0.5rem 0 0;
        border-bottom: 1px solid #e9ecef;
    }
    
    .form-label {
        font-weight: 500;
        color: #495057;
    }
    
    .text-uppercase {
        letter-spacing: 0.05em;
    }
    
    .input-group-text {
        background-color: #f8f9fa;
        border-color: #dee2e6;
    }
    
    .form-control, .form-select {
        border-color: #dee2e6;
        padding: 0.375rem 0.75rem;
    }
    
    .form-control:focus, .form-select:focus {
        border-color: #86b7fe;
        box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
    }
    
    .btn-primary {
        background-color: #0d6efd;
        border-color: #0d6efd;
    }
    
    .btn-primary:hover {
        background-color: #0b5ed7;
        border-color: #0a58ca;
    }
    
    .alert-info {
        background-color: #cff4fc;
        border-color: #b6effb;
        color: #055160;
    }
    
    .form-check-input:checked {
        background-color: #0d6efd;
        border-color: #0d6efd;
    }
    
    /* Validation styling */
    .form-control.is-invalid,
    .form-select.is-invalid,
    .was-validated .form-control:invalid,
    .was-validated .form-select:invalid {
        border-color: #dc3545;
        padding-right: calc(1.5em + 0.75rem);
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='%23dc3545'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e");
        background-repeat: no-repeat;
        background-position: right calc(0.375em + 0.1875rem) center;
        background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
    }
    
    .invalid-feedback {
        display: none;
        width: 100%;
        margin-top: 0.25rem;
        font-size: 0.875em;
        color: #dc3545;
    }
    
    .form-control.is-invalid ~ .invalid-feedback,
    .form-select.is-invalid ~ .invalid-feedback,
    .input-group.is-invalid ~ .invalid-feedback {
        display: block;
    }
</style>
{% endblock %}

{% block javascripts %}
{{ parent() }}
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize Select2 for better dropdowns if available
        if (typeof $.fn.select2 !== 'undefined') {
            $('select').select2({
                theme: 'bootstrap-5',
                width: '100%'
            });
        }
        
        // Form field elements
        const form = document.querySelector('.rental-form');
        const userField = document.getElementById('bicycle_rental_user');
        const bicycleField = document.getElementById('bicycle_rental_bicycle');
        const startStationField = document.getElementById('bicycle_rental_startStation');
        const endStationField = document.getElementById('bicycle_rental_endStation');
        const startTimeField = document.getElementById('bicycle_rental_startTime');
        const endTimeField = document.getElementById('bicycle_rental_endTime');
        const costField = document.getElementById('bicycle_rental_cost');
        const distanceKmField = document.getElementById('bicycle_rental_distanceKm');
        const batteryUsedField = document.getElementById('bicycle_rental_batteryUsed');
        const completeRentalCheckbox = document.getElementById('completeRental');
        
        // Add validation feedback elements
        addValidationFeedback(userField, 'Please select a user');
        addValidationFeedback(bicycleField, 'Please select a bicycle');
        addValidationFeedback(startStationField, 'Please select a start station');
        addValidationFeedback(costField, 'Cost must be greater than 0');
        
        // Attach input event listeners for real-time validation as users type
        userField?.addEventListener('change', function() {
            validateField(this);
        });
        
        bicycleField?.addEventListener('change', function() {
            validateField(this);
            updateCostEstimate();
        });
        
        startStationField?.addEventListener('change', function() {
            validateField(this);
        });
        
        if (completeRentalCheckbox) {
            completeRentalCheckbox.addEventListener('change', function() {
                if (this.checked) {
                    // If completing rental, require end station
                    addValidationFeedback(endStationField, 'Please select an end station');
                    validateField(endStationField);
                    validateField(distanceKmField, 'Distance is required for completed rentals');
                    validateField(batteryUsedField, 'Battery usage is required for completed rentals');
                } else {
                    // If not completing, these fields are optional
                    removeInvalidFeedback(endStationField);
                    removeInvalidFeedback(distanceKmField);
                    removeInvalidFeedback(batteryUsedField);
                }
            });
        }
        
        // Auto-calculate cost when both times are filled and bicycle is selected
        function updateCostEstimate() {
            if (startTimeField && endTimeField && bicycleField && costField && 
                startTimeField.value && endTimeField.value && bicycleField.value) {
                try {
                    const startTime = new Date(startTimeField.value);
                    const endTime = new Date(endTimeField.value);
                    
                    if (endTime > startTime) {
                        // Calculate hours difference
                        const diffHours = Math.max(1, Math.ceil((endTime - startTime) / (1000 * 60 * 60)));
                        
                        // Get bicycle premium status (basic logic for demo)
                        const isPremium = bicycleField.options[bicycleField.selectedIndex].text.includes('Premium');
                        const hourlyRate = isPremium ? 5.0 : 3.5;
                        
                        // Calculate and set cost
                        costField.value = (diffHours * hourlyRate).toFixed(3);
                        validateField(costField);
                    } else {
                        addInvalidFeedback(endTimeField, 'End time must be after start time');
                    }
                } catch(e) {
                    console.error('Error calculating cost:', e);
                }
            }
        }
        
        // Set up validation for time fields
        if (startTimeField) {
            startTimeField.addEventListener('change', function() {
                if (endTimeField && endTimeField.value) {
                    validateEndTime();
                }
                updateCostEstimate();
            });
            
            // Also validate on input for better UX
            startTimeField.addEventListener('input', function() {
                if (endTimeField && endTimeField.value) {
                    validateEndTime();
                }
            });
        }
        
        if (endTimeField) {
            endTimeField.addEventListener('change', function() {
                validateEndTime();
                updateCostEstimate();
            });
            
            // Also validate on input for better UX
            endTimeField.addEventListener('input', function() {
                validateEndTime();
            });
        }
        
        function validateEndTime() {
            if (startTimeField && endTimeField && startTimeField.value && endTimeField.value) {
                const start = new Date(startTimeField.value);
                const end = new Date(endTimeField.value);
                
                if (end <= start) {
                    addInvalidFeedback(endTimeField, 'End time must be after start time');
                    return false;
                } else {
                    removeInvalidFeedback(endTimeField);
                    return true;
                }
            }
            return true;
        }
        
        // Validate battery used percentage
        if (batteryUsedField) {
            batteryUsedField.addEventListener('change', validateBatteryUsed);
            batteryUsedField.addEventListener('input', validateBatteryUsed);
            
            function validateBatteryUsed() {
                const value = parseFloat(batteryUsedField.value);
                if (batteryUsedField.value === '') {
                    // Empty is allowed unless completing rental
                    if (completeRentalCheckbox && completeRentalCheckbox.checked) {
                        addInvalidFeedback(batteryUsedField, 'Battery used is required for completed rentals');
                        return false;
                    }
                    removeInvalidFeedback(batteryUsedField);
                    return true;
                } else if (isNaN(value) || value < 0) {
                    addInvalidFeedback(batteryUsedField, 'Battery used must be a positive number');
                    return false;
                } else if (value > 100) {
                    addInvalidFeedback(batteryUsedField, 'Battery used cannot exceed 100%');
                    return false;
                } else {
                    removeInvalidFeedback(batteryUsedField);
                    return true;
                }
            }
        }
        
        // Validate distance
        if (distanceKmField) {
            distanceKmField.addEventListener('change', validateDistance);
            distanceKmField.addEventListener('input', validateDistance);
            
            function validateDistance() {
                const value = parseFloat(distanceKmField.value);
                if (distanceKmField.value === '') {
                    // Empty is allowed unless completing rental
                    if (completeRentalCheckbox && completeRentalCheckbox.checked) {
                        addInvalidFeedback(distanceKmField, 'Distance is required for completed rentals');
                        return false;
                    }
                    removeInvalidFeedback(distanceKmField);
                    return true;
                } else if (isNaN(value) || value < 0) {
                    addInvalidFeedback(distanceKmField, 'Distance must be a positive number');
                    return false;
                } else {
                    removeInvalidFeedback(distanceKmField);
                    return true;
                }
            }
        }
        
        // Validate cost
        if (costField) {
            costField.addEventListener('change', function() {
                validateField(this);
            });
            
            costField.addEventListener('input', function() {
                validateField(this);
            });
        }
        
        // Form submission validation
        if (form) {
            form.addEventListener('submit', function(event) {
                if (!validateForm()) {
                    event.preventDefault();
                    event.stopPropagation();
                    
                    // Add validation class to help with styling
                    form.classList.add('was-validated');
                    
                    // Scroll to the first error
                    const firstError = document.querySelector('.is-invalid');
                    if (firstError) {
                        firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
                        firstError.focus();
                    }
                }
            });
        }
        
        // Validation helpers
        function validateForm() {
            let isValid = true;
            
            // Required fields validation
            if (!validateField(userField)) isValid = false;
            if (!validateField(bicycleField)) isValid = false;
            if (!validateField(startStationField)) isValid = false;
            if (!validateField(costField)) isValid = false;
            
            // If completing rental, validate end station
            if (completeRentalCheckbox && completeRentalCheckbox.checked) {
                if (!validateField(endStationField)) isValid = false;
                
                // When completing a rental, distance and battery used are required
                if (distanceKmField && !validateDistance()) isValid = false;
                if (batteryUsedField && !validateBatteryUsed()) isValid = false;
            }
            
            // Validate end time if provided
            if (startTimeField && startTimeField.value && endTimeField && endTimeField.value) {
                if (!validateEndTime()) isValid = false;
            }
            
            return isValid;
        }
        
        function validateField(field, customMessage) {
            if (!field) return true;
            
            if (field === costField) {
                const value = parseFloat(field.value);
                if (isNaN(value) || value <= 0) {
                    addInvalidFeedback(field, 'Cost must be greater than 0');
                    return false;
                } else {
                    removeInvalidFeedback(field);
                    return true;
                }
            }
            
            // For selects and most fields, just check if not empty
            if (!field.value || field.value === '') {
                field.classList.add('is-invalid');
                if (customMessage) {
                    addInvalidFeedback(field, customMessage);
                }
                return false;
            } else {
                field.classList.remove('is-invalid');
                return true;
            }
        }
        
        function addValidationFeedback(field, message) {
            if (!field) return;
            
            // Create feedback div if it doesn't exist
            let container = field.closest('.mb-3');
            if (!container) return;
            
            let feedback = container.querySelector('.invalid-feedback');
            if (!feedback) {
                feedback = document.createElement('div');
                feedback.className = 'invalid-feedback';
                feedback.textContent = message;
                
                // Find the right place to insert feedback
                const inputGroup = field.closest('.input-group');
                if (inputGroup) {
                    inputGroup.parentNode.appendChild(feedback);
                } else {
                    field.parentNode.appendChild(feedback);
                }
            }
        }
        
        function addInvalidFeedback(field, message) {
            if (!field) return;
            
            field.classList.add('is-invalid');
            
            // Update or create feedback message
            let container = field.closest('.mb-3');
            if (!container) return;
            
            let feedback = container.querySelector('.invalid-feedback');
            if (feedback) {
                feedback.textContent = message;
                feedback.style.display = 'block';
            } else {
                addValidationFeedback(field, message);
            }
        }
        
        function removeInvalidFeedback(field) {
            if (!field) return;
            field.classList.remove('is-invalid');
            
            // Hide feedback message
            let container = field.closest('.mb-3');
            if (container) {
                let feedback = container.querySelector('.invalid-feedback');
                if (feedback) {
                    feedback.style.display = 'none';
                }
            }
        }
        
        // Handle modal confirmations
        const confirmModal = new bootstrap.Modal(document.getElementById('confirmActionModal'));
        let activeForm = null;
        
        // Rest of your existing modal code
        document.querySelectorAll('.activate-rental-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const rentalId = this.getAttribute('data-rental-id');
                const form = document.getElementById('activateRentalForm');
                form.setAttribute('action', `{{ path('admin_bicycle_rental_activate', {'id': '0'}) }}`.replace('/0', `/${rentalId}`));
                document.getElementById('confirmActionTitle').innerHTML = '<i class="fas fa-play me-1"></i> Activate Rental';
                document.getElementById('confirmActionBody').textContent = 'Are you sure you want to activate this rental? This will mark the bicycle as in use and start the rental timer.';
                document.getElementById('confirmActionBtn').className = 'btn btn-success';
                document.getElementById('confirmActionBtn').innerHTML = '<i class="fas fa-play me-1"></i> Activate';
                activeForm = form;
                confirmModal.show();
            });
        });
        
        document.querySelectorAll('.cancel-rental-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const rentalId = this.getAttribute('data-rental-id');
                const form = document.getElementById('cancelRentalForm');
                form.setAttribute('action', `{{ path('admin_bicycle_rental_cancel', {'id': '0'}) }}`.replace('/0', `/${rentalId}`));
                document.getElementById('confirmActionTitle').innerHTML = '<i class="fas fa-ban me-1"></i> Cancel Rental';
                document.getElementById('confirmActionBody').textContent = 'Are you sure you want to cancel this rental? This action cannot be undone.';
                document.getElementById('confirmActionBtn').className = 'btn btn-danger';
                document.getElementById('confirmActionBtn').innerHTML = '<i class="fas fa-ban me-1"></i> Cancel Rental';
                activeForm = form;
                confirmModal.show();
            });
        });
        
        document.getElementById('confirmActionBtn')?.addEventListener('click', function() {
            if (activeForm) {
                activeForm.submit();
            }
            confirmModal.hide();
        });
    });
</script>
{% endblock %}