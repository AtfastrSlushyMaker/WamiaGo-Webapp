{% extends 'back-office/base.html.twig' %}

{% block title %}Create New Bicycle Rental{% endblock %}

{% block content %}
<div class="container-fluid">
    <div class="row mb-4">
        <div class="col-12">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="{{ path('admin_bicycle_rentals_index') }}" class="text-decoration-none"><i class="fas fa-list me-1"></i>Rentals</a></li>
                    <li class="breadcrumb-item active" aria-current="page"><i class="fas fa-plus me-1"></i>New Rental</li>
                </ol>
            </nav>
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1 class="h3 mb-2"><i class="fas fa-bicycle text-primary me-2"></i>Create New Bicycle Rental</h1>
                    <p class="text-muted"><i class="fas fa-info-circle me-1"></i> Create a new rental record for a customer</p>
                </div>
                <a href="{{ path('admin_bicycle_rentals_index') }}" class="btn btn-outline-secondary">
                    <i class="fas fa-arrow-left me-2"></i>Back to Rentals
                </a>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-8">
            <div class="card border-0 shadow-sm mb-4">
                <div class="card-header bg-primary text-white py-3">
                    <h5 class="mb-0"><i class="fas fa-clipboard-list me-2"></i>Rental Information</h5>
                </div>
                <div class="card-body p-4">
                    {{ form_start(form, {'attr': {'id': 'rental-form', 'class': 'needs-validation', 'novalidate': 'novalidate'}}) }}
                    
                    <div class="row g-3 mb-4">
                        <div class="col-md-6">
                            <div class="form-group mb-3">
                                <label class="form-label fw-semibold mb-2"><i class="fas fa-user-circle me-1 text-primary"></i> Select User</label>
                                <div class="input-group input-group-lg shadow-sm">
                                    <span class="input-group-text bg-light border-0"><i class="fas fa-search"></i></span>
                                    {{ form_widget(form.user, {'attr': {'class': 'form-select custom-select border-0 ps-1'}}) }}
                                </div>
                                {{ form_errors(form.user, {'attr': {'class': 'text-danger mt-1'}}) }}
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group mb-3">
                                <label for="stationId" class="form-label fw-semibold mb-2"><i class="fas fa-map-marker-alt me-1 text-danger"></i> Pickup Station</label>
                                <div class="input-group input-group-lg shadow-sm">
                                    <span class="input-group-text bg-light border-0"><i class="fas fa-building"></i></span>
                                    <select id="stationId" name="stationId" class="form-select custom-select border-0 ps-1" required>
                                        <option value="">-- Select a station --</option>
                                        {% for station in stations %}
                                            <option value="{{ station.idStation }}">{{ station.name }}</option>
                                        {% endfor %}
                                    </select>
                                </div>
                                <div class="invalid-feedback">Please select a pickup station</div>
                                
                                <!-- Hidden field to store station choice -->
                                <div style="display: none;">
                                    {{ form_widget(form.startStation) }}
                                    {{ form_errors(form.startStation) }}
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="row g-3 mb-4">
                        <div class="col-md-6">
                            <div class="form-group mb-3">
                                <label for="bicycleId" class="form-label fw-semibold mb-2"><i class="fas fa-bicycle me-1 text-primary"></i> Select Bicycle</label>
                                <div class="input-group input-group-lg shadow-sm">
                                    <span class="input-group-text bg-light border-0"><i class="fas fa-biking"></i></span>
                                    <select id="bicycleId" name="bicycleId" class="form-select custom-select border-0 ps-1" required disabled>
                                        <option value="">-- Choose a bicycle --</option>
                                        <!-- Options will be loaded dynamically -->
                                    </select>
                                </div>
                                <div class="invalid-feedback">Please select a bicycle</div>
                                <small class="text-muted mt-2 d-block"><i class="fas fa-info-circle"></i> First select a station to see available bicycles</small>
                                
                                <!-- Hidden field to store bicycle choice -->
                                <div style="display: none;">
                                    {{ form_widget(form.bicycle) }}
                                    {{ form_errors(form.bicycle) }}
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group mb-3">
                                <label class="form-label fw-semibold mb-2"><i class="fas fa-coins me-1 text-warning"></i> Estimated Cost</label>
                                <div class="input-group input-group-lg shadow-sm">
                                    <span class="input-group-text bg-light border-0"><i class="fas fa-tag"></i></span>
                                    {{ form_widget(form.cost, {'attr': {'class': 'form-control custom-input border-0 ps-1', 'step': '0.001', 'min': '0', 'placeholder': 'Auto-calculated'}}) }}
                                    <span class="input-group-text bg-light border-0 fw-bold">TND</span>
                                </div>
                                {{ form_errors(form.cost, {'attr': {'class': 'text-danger mt-1'}}) }}
                                <small class="text-muted mt-2 d-block"><i class="fas fa-clock me-1"></i> Base cost for approximately 1 hour</small>
                            </div>
                        </div>
                    </div>

                    <div class="row g-3 mb-4">
                        <div class="col-md-6">
                            <div class="form-group mb-3">
                                <label class="form-label fw-semibold mb-2"><i class="fas fa-calendar me-1 text-info"></i> Start Time</label>
                                <div class="input-group input-group-lg shadow-sm">
                                    <span class="input-group-text bg-light border-0"><i class="fas fa-clock"></i></span>
                                    {{ form_widget(form.startTime, {'attr': {'class': 'form-control custom-input border-0 ps-1'}}) }}
                                </div>
                                {{ form_errors(form.startTime, {'attr': {'class': 'text-danger mt-1'}}) }}
                                <small class="text-muted mt-2 d-block"><i class="fas fa-info-circle"></i> Leave empty for reservation only (no immediate start)</small>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group mb-3">
                                <label class="form-label fw-semibold mb-2"><i class="fas fa-flag-checkered me-1 text-success"></i> End Station</label>
                                <div class="input-group input-group-lg shadow-sm">
                                    <span class="input-group-text bg-light border-0"><i class="fas fa-map-marker-alt"></i></span>
                                    {{ form_widget(form.endStation, {'attr': {'class': 'form-select custom-select border-0 ps-1'}}) }}
                                </div>
                                {{ form_errors(form.endStation, {'attr': {'class': 'text-danger mt-1'}}) }}
                                <small class="text-muted mt-2 d-block"><i class="fas fa-info-circle"></i> Optional - specify if already known</small>
                            </div>
                        </div>
                    </div>

                    <div class="row g-3 mb-4">
                        <div class="col-md-4">
                            <div class="form-group mb-3">
                                <label class="form-label fw-semibold mb-2"><i class="fas fa-calendar-check me-1 text-info"></i> End Time</label>
                                <div class="input-group input-group-lg shadow-sm">
                                    <span class="input-group-text bg-light border-0"><i class="fas fa-clock"></i></span>
                                    {{ form_widget(form.endTime, {'attr': {'class': 'form-control custom-input border-0 ps-1'}}) }}
                                </div>
                                {{ form_errors(form.endTime, {'attr': {'class': 'text-danger mt-1'}}) }}
                                <small class="text-muted mt-2 d-block"><i class="fas fa-info-circle"></i> Leave empty for ongoing rentals</small>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group mb-3">
                                <label class="form-label fw-semibold mb-2"><i class="fas fa-route me-1 text-primary"></i> Distance (km)</label>
                                <div class="input-group input-group-lg shadow-sm">
                                    <span class="input-group-text bg-light border-0"><i class="fas fa-road"></i></span>
                                    {{ form_widget(form.distanceKm, {'attr': {'class': 'form-control custom-input border-0 ps-1', 'step': '0.1', 'min': '0'}}) }}
                                    <span class="input-group-text bg-light border-0">km</span>
                                </div>
                                {{ form_errors(form.distanceKm, {'attr': {'class': 'text-danger mt-1'}}) }}
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group mb-3">
                                <label class="form-label fw-semibold mb-2"><i class="fas fa-battery-half me-1 text-warning"></i> Battery Used</label>
                                <div class="input-group input-group-lg shadow-sm">
                                    <span class="input-group-text bg-light border-0"><i class="fas fa-bolt"></i></span>
                                    {{ form_widget(form.batteryUsed, {'attr': {'class': 'form-control custom-input border-0 ps-1', 'step': '0.1', 'min': '0', 'max': '100'}}) }}
                                    <span class="input-group-text bg-light border-0">%</span>
                                </div>
                                {{ form_errors(form.batteryUsed, {'attr': {'class': 'text-danger mt-1'}}) }}
                            </div>
                        </div>
                    </div>

                    <div class="bicycle-details mt-4 p-4 bg-light rounded-4 shadow-sm" style="display: none;">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <h6 class="text-primary mb-0 fw-bold"><i class="fas fa-info-circle me-2"></i>Bicycle Details</h6>
                            <span class="badge type-badge">Standard</span>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-6">
                                <div class="bicycle-specs bg-white p-3 rounded-3 mb-3 shadow-sm">
                                    <div class="d-flex justify-content-between mb-2">
                                        <span class="fw-medium"><i class="fas fa-battery-three-quarters text-success me-2"></i>Battery Level:</span>
                                        <span class="battery-percentage fw-bold">75%</span>
                                    </div>
                                    <div class="progress" style="height: 12px;">
                                        <div class="battery-level progress-bar" role="progressbar" style="width: 75%;" 
                                            aria-valuenow="75" aria-valuemin="0" aria-valuemax="100"></div>
                                    </div>
                                </div>
                                
                                <div class="bicycle-specs bg-white p-3 rounded-3 shadow-sm">
                                    <div class="d-flex justify-content-between mb-2">
                                        <span class="fw-medium"><i class="fas fa-route text-info me-2"></i>Range:</span>
                                        <span class="range-km fw-bold">25 km</span>
                                    </div>
                                    <div class="d-flex align-items-center">
                                        <i class="fas fa-road text-muted me-2"></i>
                                        <div class="progress flex-grow-1" style="height: 8px;">
                                            <div class="range-indicator progress-bar bg-info" role="progressbar" style="width: 75%;" 
                                                aria-valuenow="75" aria-valuemin="0" aria-valuemax="100"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="price-card text-center p-4 bg-white rounded-3 shadow-sm h-100">
                                    <i class="fas fa-tag text-primary mb-2" style="font-size: 2rem;"></i>
                                    <h6 class="text-muted mb-2">Hourly Rate</h6>
                                    <h3 class="hourly-rate mb-0 fw-bold">3.500 TND</h3>
                                    <small class="text-muted">per hour</small>
                                    <div class="mt-3">
                                        <span class="bicycle-id badge bg-light text-dark"><i class="fas fa-hashtag me-1"></i></span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="form-actions mt-4 pt-4 border-top text-end">
                        <a href="{{ path('admin_bicycle_rentals_index') }}" class="btn btn-outline-secondary btn-lg me-2">
                            <i class="fas fa-times me-2"></i>Cancel
                        </a>
                        <button type="submit" class="btn btn-primary btn-lg px-5">
                            <i class="fas fa-save me-2"></i>Create Rental
                        </button>
                    </div>
                    
                    {{ form_end(form) }}
                </div>
            </div>
        </div>
        
        <div class="col-lg-4">
            <!-- Quick Help Card -->
            <div class="card border-0 shadow-sm mb-4">
                <div class="card-header bg-info text-white py-3">
                    <h5 class="mb-0"><i class="fas fa-question-circle me-2"></i>Instructions</h5>
                </div>
                <div class="card-body p-4">
                    <ol class="instruction-list">
                        <li class="mb-3 d-flex">
                            <div class="step-icon me-3">
                                <i class="fas fa-user-check text-primary"></i>
                            </div>
                            <div>
                                <strong>Select a user</strong> who will be renting the bicycle
                            </div>
                        </li>
                        <li class="mb-3 d-flex">
                            <div class="step-icon me-3">
                                <i class="fas fa-map-marked-alt text-primary"></i>
                            </div>
                            <div>
                                <strong>Choose a station</strong> with available bicycles
                            </div>
                        </li>
                        <li class="mb-3 d-flex">
                            <div class="step-icon me-3">
                                <i class="fas fa-bicycle text-primary"></i>
                            </div>
                            <div>
                                <strong>Select an available bicycle</strong> from that station
                            </div>
                        </li>
                        <li class="mb-3 d-flex">
                            <div class="step-icon me-3">
                                <i class="fas fa-calculator text-primary"></i>
                            </div>
                            <div>
                                The <strong>estimated cost</strong> will be automatically calculated based on the bicycle type
                            </div>
                        </li>
                        <li class="mb-3 d-flex">
                            <div class="step-icon me-3">
                                <i class="fas fa-crown text-warning"></i>
                            </div>
                            <div>
                                <strong>Premium bicycles</strong> (battery > 90%) have a higher hourly rate
                            </div>
                        </li>
                        <li class="mb-3 d-flex">
                            <div class="step-icon me-3">
                                <i class="fas fa-clock text-success"></i>
                            </div>
                            <div>
                                For <strong>immediate rental</strong>, set a start time. Leave empty to create a reservation.
                            </div>
                        </li>
                    </ol>
                </div>
            </div>
            
            <!-- Rental Status Info -->
            <div class="card border-0 shadow-sm mb-4">
                <div class="card-body p-4">
                    <div class="d-flex">
                        <div class="icon-circle bg-info text-white me-3">
                            <i class="fas fa-info"></i>
                        </div>
                        <div>
                            <h6 class="fw-bold mb-2"><i class="fas fa-clipboard-check me-1"></i> Rental Status</h6>
                            <p class="mb-0">New rentals are created with <span class="badge bg-warning text-dark"><i class="fas fa-clock me-1"></i>Reserved</span> status until the user activates them.</p>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Rental Type Info -->
            <div class="card border-0 shadow-sm mb-4">
                <div class="card-header bg-success text-white py-3">
                    <h5 class="mb-0"><i class="fas fa-tags me-2"></i>Bicycle Types</h5>
                </div>
                <div class="card-body p-4">
                    <div class="bicycle-type-item d-flex align-items-center mb-4 p-3 bg-white rounded-3 shadow-sm">
                        <div class="icon-circle bg-success text-white me-3">
                            <i class="fas fa-crown"></i>
                        </div>
                        <div>
                            <h6 class="mb-1 fw-bold">Premium E-Bike</h6>
                            <p class="small text-muted mb-1"><i class="fas fa-battery-full me-1"></i> Battery level > 90%</p>
                            <div class="price-tag bg-success bg-opacity-10 text-success fw-bold">
                                <i class="fas fa-tag me-1"></i> 5.000 TND/hour
                            </div>
                        </div>
                    </div>
                    
                    <div class="bicycle-type-item d-flex align-items-center p-3 bg-white rounded-3 shadow-sm">
                        <div class="icon-circle bg-primary text-white me-3">
                            <i class="fas fa-bicycle"></i>
                        </div>
                        <div>
                            <h6 class="mb-1 fw-bold">Standard E-Bike</h6>
                            <p class="small text-muted mb-1"><i class="fas fa-battery-half me-1"></i> Battery level ≤ 90%</p>
                            <div class="price-tag bg-primary bg-opacity-10 text-primary fw-bold">
                                <i class="fas fa-tag me-1"></i> 3.500 TND/hour
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
{{ parent() }}
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Elements
    const stationSelect = document.getElementById('stationId');
    const bicycleSelect = document.getElementById('bicycleId');
    const bicycleDetails = document.querySelector('.bicycle-details');
    const bicycleType = document.querySelector('.type-badge');
    const bicycleId = document.querySelector('.bicycle-id');
    const batteryPercentage = document.querySelector('.battery-percentage');
    const rangeKm = document.querySelector('.range-km');
    const batteryLevel = document.querySelector('.battery-level');
    const rangeIndicator = document.querySelector('.range-indicator');
    const hourlyRate = document.querySelector('.hourly-rate');
    const costInput = document.querySelector('[name="bicycle_rental[cost]"]');
    const form = document.getElementById('rental-form');
    const startTimeField = document.querySelector('[name="bicycle_rental[startTime]"]');
    const endTimeField = document.querySelector('[name="bicycle_rental[endTime]"]');
    const distanceKmField = document.querySelector('[name="bicycle_rental[distanceKm]"]');
    const batteryUsedField = document.querySelector('[name="bicycle_rental[batteryUsed]"]');
    const userField = document.querySelector('[name="bicycle_rental[user]"]');
    
    // Synchronize hidden form fields with our custom selectors
    const formBicycleField = document.querySelector('[name="bicycle_rental[bicycle]"]');
    const formStartStationField = document.querySelector('[name="bicycle_rental[startStation]"]');
    
    // Set default values for measurement fields
    if (distanceKmField && !distanceKmField.value) {
        distanceKmField.value = '0';
    }
    
    if (batteryUsedField && !batteryUsedField.value) {
        batteryUsedField.value = '0';
    }
    
    // Add validation event listeners to selects and inputs for real-time feedback
    userField?.addEventListener('change', function() {
        validateField(this);
    });
    
    stationSelect?.addEventListener('change', function() {
        validateField(this);
    });
    
    bicycleSelect?.addEventListener('change', function() {
        validateField(this);
    });
    
    costInput?.addEventListener('change', function() {
        validateField(this, 'Cost must be greater than 0');
    });
    
    costInput?.addEventListener('input', function() {
        validateField(this, 'Cost must be greater than 0');
    });
    
    // Form validation
    if (form) {
        form.addEventListener('submit', function(event) {
            // Validate essential fields
            let valid = true;
            
            // User field validation
            if (!validateField(userField, 'Please select a user')) valid = false;
            
            // Station validation
            if (!validateField(stationSelect, 'Please select a station')) valid = false;
            
            // Bicycle validation
            if (!validateField(bicycleSelect, 'Please select a bicycle')) valid = false;
            
            // Cost validation
            if (!validateField(costInput, 'Cost must be greater than 0')) valid = false;
            
            // Start time and end time validation
            if (startTimeField && endTimeField && startTimeField.value && endTimeField.value) {
                if (!validateEndTime()) valid = false;
            }
            
            // Distance validation
            if (distanceKmField && distanceKmField.value) {
                if (!validateDistance()) valid = false;
            }
            
            // Battery used validation
            if (batteryUsedField && batteryUsedField.value) {
                if (!validateBatteryUsed()) valid = false;
            }
            
            // If validation fails, find the first error field and scroll to it
            if (!valid) {
                event.preventDefault();
                event.stopPropagation();
                
                // Add validation class to help with styling
                form.classList.add('was-validated');
                
                const firstErrorField = document.querySelector('.is-invalid');
                if (firstErrorField) {
                    firstErrorField.scrollIntoView({ behavior: 'smooth', block: 'center' });
                    firstErrorField.focus();
                }
            }
        });
    }
    
    // Field validation helpers
    function validateField(field, message) {
        if (!field) return true;
        
        // Special validation for cost
        if (field === costInput) {
            const value = parseFloat(field.value);
            if (!field.value || isNaN(value) || value <= 0) {
                setFieldInvalid(field, message || 'Cost must be greater than 0');
                return false;
            } else {
                setFieldValid(field);
                return true;
            }
        }
        
        // For selects and other fields, check if not empty
        if (!field.value) {
            setFieldInvalid(field, message || 'This field is required');
            return false;
        } else {
            setFieldValid(field);
            return true;
        }
    }
    
    function setFieldInvalid(field, message) {
        if (!field) return;
        
        field.classList.add('is-invalid');
        
        // Find or create feedback element
        let feedback = field.parentNode.querySelector('.invalid-feedback');
        if (!feedback) {
            feedback = document.createElement('div');
            feedback.className = 'invalid-feedback';
            
            // Determine where to insert the feedback
            const parent = field.closest('.input-group') || field.parentNode;
            parent.parentNode.appendChild(feedback);
        }
        
        feedback.textContent = message;
        feedback.style.display = 'block';
    }
    
    function setFieldValid(field) {
        if (!field) return;
        
        field.classList.remove('is-invalid');
        
        // Hide any feedback
        const parent = field.closest('.form-group') || field.parentNode;
        const feedback = parent.querySelector('.invalid-feedback');
        if (feedback) {
            feedback.style.display = 'none';
        }
    }
    
    // Validate end time in relation to start time
    function validateEndTime() {
        if (!startTimeField || !endTimeField) return true;
        
        const startTime = new Date(startTimeField.value);
        const endTime = new Date(endTimeField.value);
        
        if (endTime <= startTime) {
            setFieldInvalid(endTimeField, 'End time must be after start time');
            return false;
        } else {
            setFieldValid(endTimeField);
            return true;
        }
    }
    
    // Set up validation for time fields
    if (startTimeField) {
        startTimeField.addEventListener('change', function() {
            if (endTimeField && endTimeField.value) {
                validateEndTime();
                updateCostEstimate();
            }
        });
        
        // Also validate on input for better UX
        startTimeField.addEventListener('input', function() {
            if (endTimeField && endTimeField.value) {
                validateEndTime();
            }
        });
    }
    
    if (endTimeField) {
        endTimeField.addEventListener('change', function() {
            validateEndTime();
            updateCostEstimate();
        });
        
        // Also validate on input for better UX
        endTimeField.addEventListener('input', function() {
            validateEndTime();
        });
    }
    
    // Validate distance
    function validateDistance() {
        if (!distanceKmField) return true;
        
        const value = parseFloat(distanceKmField.value);
        if (isNaN(value) || value < 0) {
            setFieldInvalid(distanceKmField, 'Distance must be a positive number');
            return false;
        } else {
            setFieldValid(distanceKmField);
            return true;
        }
    }
    
    if (distanceKmField) {
        distanceKmField.addEventListener('change', validateDistance);
        distanceKmField.addEventListener('input', validateDistance);
    }
    
    // Validate battery used percentage
    function validateBatteryUsed() {
        if (!batteryUsedField) return true;
        
        const value = parseFloat(batteryUsedField.value);
        if (isNaN(value) || value < 0) {
            setFieldInvalid(batteryUsedField, 'Battery used must be a positive number');
            return false;
        } else if (value > 100) {
            setFieldInvalid(batteryUsedField, 'Battery used cannot exceed 100%');
            return false;
        } else {
            setFieldValid(batteryUsedField);
            return true;
        }
    }
    
    if (batteryUsedField) {
        batteryUsedField.addEventListener('change', validateBatteryUsed);
        batteryUsedField.addEventListener('input', validateBatteryUsed);
    }
    
    // Update bicycles when station changes
    stationSelect.addEventListener('change', function() {
        // Update hidden start station field
        if (formStartStationField) {
            formStartStationField.value = this.value;
        }
        
        // Reset bicycle selection
        bicycleSelect.innerHTML = '<option value="">-- Loading bicycles... --</option>';
        bicycleSelect.disabled = !this.value;
        
        // Hide bicycle details
        if (bicycleDetails) {
            bicycleDetails.style.display = 'none';
        }
        
        const stationId = this.value;
        if (stationId) {
            // Fetch available bicycles for this station
            fetch(`{{ path('admin_station_available_bicycles', {'id': '0'}) }}`.replace('/0', `/${stationId}`))
                .then(response => response.json())
                .then(bicycles => {
                    if (bicycles.length === 0) {
                        bicycleSelect.innerHTML = '<option value="">No available bicycles at this station</option>';
                        setFieldInvalid(bicycleSelect, 'No available bicycles');
                    } else {
                        bicycleSelect.innerHTML = '<option value="">-- Choose a bicycle --</option>';
                        bicycles.forEach(bicycle => {
                            const option = document.createElement('option');
                            option.value = bicycle.id;
                            option.dataset.batteryLevel = bicycle.batteryLevel;
                            option.dataset.rangeKm = bicycle.rangeKm;
                            option.dataset.type = bicycle.type;
                            option.dataset.hourlyRate = bicycle.hourlyRate;
                            
                            const isPremium = bicycle.batteryLevel > 90;
                            const icon = isPremium ? '👑 ' : '';
                            option.textContent = `${icon}Bicycle #${bicycle.id} - ${bicycle.batteryLevel}% battery`;
                            bicycleSelect.appendChild(option);
                        });
                        setFieldValid(bicycleSelect);
                    }
                })
                .catch(error => {
                    console.error('Error fetching bicycles:', error);
                    bicycleSelect.innerHTML = '<option value="">Error loading bicycles</option>';
                    setFieldInvalid(bicycleSelect, 'Error loading bicycles');
                });
        }
    });
    
    // Update bicycle details when bicycle changes
    bicycleSelect.addEventListener('change', function() {
        const selectedOption = this.options[this.selectedIndex];
        
        if (this.value) {
            const battery = parseFloat(selectedOption.dataset.batteryLevel);
            const range = parseFloat(selectedOption.dataset.rangeKm);
            const type = selectedOption.dataset.type;
            const rate = parseFloat(selectedOption.dataset.hourlyRate);
            const isPremium = battery > 90;
            
            // Update the hidden bicycle field
            if (formBicycleField) {
                formBicycleField.value = this.value;
            }
            
            // Update UI if elements exist
            if (bicycleType) bicycleType.textContent = isPremium ? 'Premium' : 'Standard';
            if (bicycleType) bicycleType.className = `badge ${isPremium ? 'bg-success' : 'bg-primary'} text-white`;
            if (bicycleId) bicycleId.innerHTML = `<i class="fas fa-hashtag me-1"></i>Bicycle #${this.value}`;
            if (batteryPercentage) batteryPercentage.textContent = `${battery}%`;
            if (rangeKm) rangeKm.textContent = `${range} km`;
            if (batteryLevel) batteryLevel.style.width = `${battery}%`;
            if (rangeIndicator) rangeIndicator.style.width = `${(range/50)*100}%`; // Assuming max range is 50km
            
            // Set color based on battery level
            if (batteryLevel) {
                if (battery > 70) {
                    batteryLevel.className = 'battery-level progress-bar bg-success';
                } else if (battery > 30) {
                    batteryLevel.className = 'battery-level progress-bar bg-warning';
                } else {
                    batteryLevel.className = 'battery-level progress-bar bg-danger';
                }
            }
            
            // Update hourly rate
            if (hourlyRate) hourlyRate.textContent = `${rate.toFixed(3)} TND`;
            
            // Set estimated cost (for 1 hour by default)
            if (costInput) {
                costInput.value = rate.toFixed(3);
                validateField(costInput);
            }
            
            // Show bicycle details with animation if element exists
            if (bicycleDetails) {
                bicycleDetails.style.display = 'block';
                bicycleDetails.classList.add('animate__animated', 'animate__fadeIn');
            }
            
            // Validate
            setFieldValid(this);
        } else {
            // Hide bicycle details
            if (bicycleDetails) {
                bicycleDetails.style.display = 'none';
            }
            
            // Clear hidden field
            if (formBicycleField) {
                formBicycleField.value = '';
            }
            
            setFieldInvalid(this, 'Please select a bicycle');
        }
    });
    
    // Calculate cost when rental duration changes (if start and end times are provided)
    function updateCostEstimate() {
        const bicycleValue = bicycleSelect.value;
        if (!bicycleValue || !costInput) return;
        
        const selectedOption = bicycleSelect.options[bicycleSelect.selectedIndex];
        let rate = parseFloat(selectedOption.dataset.hourlyRate);
        
        // Calculate duration if both start and end times are provided
        if (startTimeField && endTimeField && startTimeField.value && endTimeField.value) {
            const startTime = new Date(startTimeField.value);
            const endTime = new Date(endTimeField.value);
            
            if (endTime > startTime) {
                // Calculate hours difference (minimum 1 hour)
                const diffHours = Math.max(1, Math.ceil((endTime - startTime) / (1000 * 60 * 60)));
                costInput.value = (rate * diffHours).toFixed(3);
                setFieldValid(costInput);
                return;
            }
        }
        
        // Default to 1 hour rate
        costInput.value = rate.toFixed(3);
    }
    
    // Initialize Select2 for better dropdowns if available
    if (typeof $.fn.select2 !== 'undefined') {
        $('select:not(#bicycleId)').select2({
            theme: 'bootstrap-5',
            width: '100%'
        });
    }
});
</script>
{% endblock %}

{% block stylesheets %}
{{ parent() }}
<style>
    .card {
        border-radius: 0.5rem;
        border: none;
        box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
    }
    
    .card-header {
        border-radius: 0.5rem 0.5rem 0 0;
        border-bottom: 1px solid #e9ecef;
    }
    
    .form-label {
        font-weight: 500;
        color: #495057;
    }
    
    .form-control, .form-select {
        border-color: #dee2e6;
        padding: 0.375rem 0.75rem;
    }
    
    .form-control:focus, .form-select:focus {
        border-color: #86b7fe;
        box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
    }
    
    .bicycle-details {
        border-radius: 0.5rem;
        padding: 1rem;
        border: 1px solid #e9ecef;
        background-color: #f8f9fa;
        margin-top: 1rem;
        transition: all 0.3s ease;
    }
    
    .bicycle-specs {
        transition: all 0.3s ease;
    }
    
    .battery-level, .range-indicator {
        height: 12px;
        border-radius: 6px;
        transition: width 0.5s ease;
    }
    
    .step-icon {
        width: 36px;
        height: 36px;
        border-radius: 50%;
        background-color: #e7f1ff;
        color: #0d6efd;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .price-tag {
        display: inline-block;
        padding: 0.25rem 0.5rem;
        border-radius: 0.5rem;
        margin-top: 0.25rem;
        font-size: 0.875rem;
    }
    
    .icon-circle {
        width: 48px;
        height: 48px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.25rem;
    }
    
    /* Validation styling */
    .form-control.is-invalid,
    .form-select.is-invalid,
    .was-validated .form-control:invalid,
    .was-validated .form-select:invalid {
        border-color: #dc3545;
        padding-right: calc(1.5em + 0.75rem);
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='%23dc3545'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e");
        background-repeat: no-repeat;
        background-position: right calc(0.375em + 0.1875rem) center;
        background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
    }
    
    .invalid-feedback {
        display: none;
        width: 100%;
        margin-top: 0.25rem;
        font-size: 0.875em;
        color: #dc3545;
    }
    
    .form-control.is-invalid ~ .invalid-feedback,
    .form-select.is-invalid ~ .invalid-feedback,
    .input-group.is-invalid ~ .invalid-feedback {
        display: block;
    }
    
    /* Animation classes for smoother UX */
    .animate__animated {
        animation-duration: 0.5s;
    }
    
    @keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
    }
    
    .animate__fadeIn {
        animation-name: fadeIn;
    }
</style>
{% endblock %}