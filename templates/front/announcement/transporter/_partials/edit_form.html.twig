{{ form_start(form, {
    'attr': {
        'id': 'edit-announcement-form', 
        'class': 'announcement-form',
        'action': path('app_transporter_announcement_update', {'id': announcement.id_announcement})
    }
}) }}
    <div class="form-card">
        <!-- Title Field -->
        <div class="form-group floating-label">
            {{ form_widget(form.title, {'attr': {
                'class': 'form-control' ~ (form.title.vars.valid ? '' : ' is-invalid'),
                'placeholder': ' '
            }}) }}
            {{ form_label(form.title) }}
            <div class="invalid-feedback">{{ form_errors(form.title)|striptags }}</div>
        </div>

        <!-- Content Field -->
        <div class="form-group floating-label">
            {{ form_widget(form.content, {'attr': {
                'class': 'form-control' ~ (form.content.vars.valid ? '' : ' is-invalid'),
                'placeholder': ' ',
                'rows': 6
            }}) }}
            {{ form_label(form.content) }}
            <div class="invalid-feedback">{{ form_errors(form.content)|striptags }}</div>
        </div>

        <!-- Zone and Status Fields -->
        <div class="form-row">
            <div class="form-group col-md-6 floating-label">
                {{ form_widget(form.zone, {'attr': {
                    'class': 'form-select' ~ (form.zone.vars.valid ? '' : ' is-invalid')
                }}) }}
                {{ form_label(form.zone) }}
                <div class="invalid-feedback">{{ form_errors(form.zone)|striptags }}</div>
            </div>

            <div class="form-group col-md-6">
                <div class="form-check form-switch">
                    {{ form_widget(form.status, {'attr': {
                        'class': 'form-check-input',
                        'role': 'switch'
                    }}) }}
                    {{ form_label(form.status, null, {
                        'label_attr': {'class': 'form-check-label'}
                    }) }}
                </div>
            </div>
        </div>

        <!-- Form Actions -->
        <div class="form-actions">
            <button type="submit" class="btn btn-primary btn-lg btn-3d">
                <i class="fas fa-save me-2"></i>Update Announcement
            </button>
            <button type="button" class="btn btn-outline-secondary btn-lg btn-3d" data-bs-dismiss="modal">
                <i class="fas fa-times me-2"></i>Cancel
            </button>
        </div>
    </div>
{{ form_end(form) }}

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Initialiser VanillaTilt pour les éléments 3D
    if (typeof VanillaTilt !== 'undefined') {
        VanillaTilt.init(document.querySelectorAll("[data-3d]"), {
            max: 5,
            speed: 400,
            glare: true,
            "max-glare": 0.2,
        });
    }
    
    // Gestion de la soumission du formulaire
    const form = document.getElementById('edit-announcement-form');
    if (form) {
        form.addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = new FormData(form);
            const submitButton = form.querySelector('button[type="submit"]');
            const originalText = submitButton.innerHTML;
            
            submitButton.disabled = true;
            submitButton.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i> Updating...';
            
            try {
                const response = await fetch(form.action, {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showToast(data.message, 'success');
                    
                    // Fermer le modal après un délai
                    setTimeout(() => {
                        bootstrap.Modal.getInstance(document.getElementById('editModal')).hide();
                        
                        // Mettre à jour la carte correspondante dans la liste
                        updateAnnouncementCard(data.announcement);
                    }, 1500);
                } else {
                    displayFormErrors(form, data.errors || {});
                    showToast(data.message || 'Error updating announcement', 'error');
                }
            } catch (error) {
                showToast('Network error: ' + error.message, 'error');
            } finally {
                submitButton.disabled = false;
                submitButton.innerHTML = originalText;
            }
        });
    }
    
    function displayFormErrors(form, errors) {
        // Réinitialiser les erreurs précédentes
        form.querySelectorAll('.is-invalid').forEach(el => {
            el.classList.remove('is-invalid');
        });
        
        form.querySelectorAll('.invalid-feedback').forEach(el => {
            el.textContent = '';
        });
        
        // Afficher les nouvelles erreurs
        Object.entries(errors).forEach(([field, message]) => {
            const input = form.querySelector(`[name*="${field}"]`);
            if (input) {
                input.classList.add('is-invalid');
                const feedback = input.closest('.form-group')?.querySelector('.invalid-feedback');
                if (feedback) {
                    feedback.textContent = message;
                }
            }
        });
    }
    
    function updateAnnouncementCard(announcementData) {
        const card = document.querySelector(`.announcement-card[data-id="${announcementData.id}"]`);
        if (!card) return;
        
        // Mettre à jour les éléments de la carte
        if (card.querySelector('.card-title')) {
            card.querySelector('.card-title').textContent = announcementData.title;
        }
        
        if (card.querySelector('.card-content')) {
            card.querySelector('.card-content').textContent = 
                announcementData.content.length > 120 
                    ? announcementData.content.substring(0, 120) + '...' 
                    : announcementData.content;
        }
        
        if (card.querySelector('.card-badge')) {
            const badge = card.querySelector('.card-badge');
            badge.className = `card-badge ${announcementData.status ? 'active' : 'inactive'}`;
            badge.textContent = announcementData.status ? 'ACTIVE' : 'INACTIVE';
        }
        
        // Mettre à jour la zone si nécessaire
        if (card.querySelector('.meta-item span')) {
            card.querySelectorAll('.meta-item span')[0].textContent = announcementData.zone;
        }
        
        // Mettre à jour la date si nécessaire
        if (card.querySelectorAll('.meta-item span')[1]) {
            card.querySelectorAll('.meta-item span')[1].textContent = announcementData.date;
        }
    }
});
</script>