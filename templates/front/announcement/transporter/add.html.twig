{% extends 'front/base.html.twig' %}

{% block title %}Create New Announcement | WamiaGo{% endblock %}

{% block page_stylesheets %}
    <link rel="stylesheet" href="{{ asset('css/front/announcement/transporter-create-announcement.css') }}">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">
    <style>
        .voice-recorder {
            background: #fff;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            margin-bottom: 15px;
        }

        .recording-controls {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .record-btn {
            background: #ff4b4b;
            border: none;
            width: 50px;
            height: 50px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .record-btn.recording {
            animation: pulse 1.5s infinite;
            background: #ff0000;
        }

        .record-btn i {
            color: white;
            font-size: 20px;
        }

        .timer {
            font-family: 'Roboto Mono', monospace;
            font-size: 1.2rem;
            color: #333;
            min-width: 85px;
        }

        .recording-status {
            display: flex;
            align-items: center;
            gap: 10px;
            color: #666;
        }

        .status-indicator {
            width: 10px;
            height: 10px;
            border-radius: 50%;
            background: #ccc;
        }

        .status-indicator.active {
            background: #ff4b4b;
            animation: blink 1s infinite;
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }

        @keyframes blink {
            0% { opacity: 1; }
            50% { opacity: 0.4; }
            100% { opacity: 1; }
        }

        .alert {
            position: relative;
            margin-top: 1rem;
        }

        .alert-dismissible .btn-close {
            position: absolute;
            top: 0;
            right: 0;
            padding: 1.25rem;
        }
    </style>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Roboto+Mono&display=swap">
{% endblock %}

{% block content %}
<!-- Hero Section with 3D Background -->
<div class="announcement-hero">
    <!-- Background Image with Parallax Effect -->
    <img src="{{ asset('images/front/announcements/3d-transport-bg.png') }}" 
         alt="Professional transport services" 
         class="hero-img"
         loading="lazy">
    
    <!-- Decorative Animated Circles -->
    <div class="decorative-circle circle-1"></div>
    <div class="decorative-circle circle-2"></div>
    <div class="decorative-circle circle-3"></div>
    <div class="decorative-circle circle-4"></div>
    
    <!-- Hero Content -->
    <div class="hero-content animate__animated animate__fadeIn">
        <h1>Create Your Transport Announcement</h1>
        <p class="lead">Connect with clients across Tunisia through our professional network</p>
        
        <!-- Professional Service Highlights -->
        <div class="service-highlights">
            <div class="highlight-item">
                <i class="fas fa-check-circle"></i>
                <span>Reach thousands of potential clients</span>
            </div>
            <div class="highlight-item">
                <i class="fas fa-check-circle"></i>
                <span>Real-time notifications</span>
            </div>
        </div>
        
        <div class="scroll-indicator">
            <i class="fas fa-chevron-down"></i>
        </div>
    </div>
</div>

<!-- Main Form Section -->
<div class="announcement-container">
    <div class="announcement-form-container">
        <div class="form-intro">
            <h2><i class="fas fa-truck-moving me-2"></i>Transport Service Details</h2>
            <p>Fill in all required information to create an attractive announcement</p>
        </div>

        {{ form_start(form, {'attr': {'id': 'announcement-form', 'class': 'announcement-form'}}) }}
            <div class="form-card">
                <!-- Title Field -->
                <div class="form-group floating-label">
    {{ form_widget(form.title, {'attr': {
        'class': 'form-control' ~ (form.title.vars.errors|length ? ' is-invalid' : ''),
        'placeholder': ' '
    }}) }}
    {{ form_label(form.title) }}
    <div class="invalid-feedback">
        {% for error in form.title.vars.errors %}
            {{ error.message }}
        {% endfor %}
    </div>
</div>

                <!-- Content Field -->
                <div class="form-group floating-label">
                    {{ form_widget(form.content, {'attr': {
                        'class': 'form-control' ~ (form.content.vars.valid ? '' : ' is-invalid'),
                        'placeholder': ' ',
                        'rows': 6,
                        'data-3d': 'true'
                    }}) }}
                    {{ form_label(form.content) }}
                    <div class="invalid-feedback">{{ form_errors(form.content)|striptags }}</div>
                </div>

                <!-- Voice Recorder -->
                <div class="voice-recorder">
                    <div class="recording-controls">
                        <button type="button" id="recordButton" class="record-btn">
                            <i class="fas fa-microphone"></i>
                        </button>
                        <div class="timer" id="timer">00:00</div>
                        <div class="recording-status">
                            <div class="status-indicator" id="statusIndicator"></div>
                            <span id="statusText">Click to start recording</span>
                        </div>
                    </div>
                </div>

                <!-- Zone and Status Fields -->
                <div class="form-row">
                    <div class="form-group col-md-6 floating-label">
                        {{ form_widget(form.zone, {'attr': {
                            'class': 'form-select' ~ (form.zone.vars.valid ? '' : ' is-invalid'),
                            'data-3d': 'true'
                        }}) }}
                        {{ form_label(form.zone) }}
                        <div class="invalid-feedback">{{ form_errors(form.zone)|striptags }}</div>
                    </div>

                    <div class="form-group col-md-6">
                        <div class="form-check form-switch">
                            {{ form_widget(form.status, {'attr': {
                                'class': 'form-check-input',
                                'role': 'switch',
                                'data-3d': 'true'
                            }}) }}
                            {{ form_label(form.status, null, {
                                'label_attr': {'class': 'form-check-label'}
                            }) }}
                        </div>
                    </div>
                </div>

                <!-- Form Actions -->
                <div class="form-actions">
                    <button type="submit" class="btn btn-primary btn-lg btn-3d">
                        <i class="fas fa-paper-plane me-2"></i>Publish Announcement
                    </button>
                    <a href="{{ path('app_transporter_announcement_list') }}" class="btn btn-outline-secondary btn-lg btn-3d">
                        <i class="fas fa-times me-2"></i>Cancel
                    </a>
                </div>

                <!-- Professional Tips Section -->
        <div class="professional-tips mt-5">
            <h4><i class="fas fa-lightbulb"></i> Professional Tips</h4>
            <ul>
                <li>Be specific about your services and capacity</li>
                <li>Include clear pricing information if possible</li>
        
                <li>Respond quickly to client inquiries</li>
            </ul>
        </div>

        <!-- Trust Badges -->
        <div class="trust-badges">
            <div class="badge-item">
                <i class="fas fa-shield-alt"></i>
                <span>Secure Platform</span>
            </div>
            <div class="badge-item">
                <i class="fas fa-headset"></i>
                <span>24/7 Support</span>
            </div>
            <div class="badge-item">
                <i class="fas fa-check-circle"></i>
                <span>Verified Transporters</span>
            </div>
        </div>
            </div>
        {{ form_end(form) }}
    </div>
</div>
{% endblock %}

{% block page_javascripts %}
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/vanilla-tilt@1.7.0/dist/vanilla-tilt.min.js"></script>
    <script src="{{ asset('js/front/announcement/transporter-announcement.js') }}"></script>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="https://aka.ms/csspeech/jsbrowserpackageraw"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            let isRecording = false;
            let recognizer = null;
            let startTime = null;
            let timerInterval = null;

            const recordButton = document.getElementById('recordButton');
            const timer = document.getElementById('timer');
            const statusIndicator = document.getElementById('statusIndicator');
            const statusText = document.getElementById('statusText');
            const contentField = document.querySelector('#{{ form.content.vars.id }}');

            async function initializeSpeechService() {
                try {
                    const response = await fetch('/api/speech/config');
                    if (!response.ok) {
                        throw new Error('Failed to fetch speech configuration');
                    }
                    
                    const config = await response.json();
                    if (!config.authToken || !config.region) {
                        throw new Error('Invalid speech configuration');
                    }

                    const speechConfig = SpeechSDK.SpeechConfig.fromAuthorizationToken(
                        config.authToken,
                        config.region
                    );
                    speechConfig.speechRecognitionLanguage = config.language;
                    
                    return speechConfig;
                } catch (error) {
                    console.error('Speech config error:', error);
                    throw new Error('Failed to initialize speech service: ' + error.message);
                }
            }

            async function startRecording() {
                try {
                    if (!isRecording) {
                        // Initialize speech service
                        const speechConfig = await initializeSpeechService();
                        const audioConfig = SpeechSDK.AudioConfig.fromDefaultMicrophoneInput();
                        recognizer = new SpeechSDK.SpeechRecognizer(speechConfig, audioConfig);

                        recognizer.recognizing = (s, e) => {
                            if (e.result.text) {
                                contentField.value = e.result.text;
                            }
                        };

                        await recognizer.startContinuousRecognitionAsync();
                        
                        isRecording = true;
                        startTime = Date.now();
                        timerInterval = setInterval(updateTimer, 1000);
                        
                        recordButton.classList.add('recording');
                        statusIndicator.classList.add('active');
                        recordButton.innerHTML = '<i class="fas fa-stop"></i>';
                        statusText.textContent = 'Recording...';
                    }
                } catch (error) {
                    console.error('Speech recognition error:', error);
                    showError(error.message || 'Failed to start recording. Please try again.');
                    await stopRecording();
                }
            }

            async function stopRecording() {
                if (recognizer && isRecording) {
                    try {
                        await recognizer.stopContinuousRecognitionAsync();
                        recognizer.close();
                    } catch (error) {
                        console.error('Error stopping recognition:', error);
                    } finally {
                        recognizer = null;
                    }
                }
                
                isRecording = false;
                clearInterval(timerInterval);
                timer.textContent = '00:00';
                
                recordButton.classList.remove('recording');
                statusIndicator.classList.remove('active');
                recordButton.innerHTML = '<i class="fas fa-microphone"></i>';
                statusText.textContent = 'Click to start recording';
            }

            function updateTimer() {
                const elapsed = Date.now() - startTime;
                const minutes = Math.floor(elapsed / 60000);
                const seconds = Math.floor((elapsed % 60000) / 1000);
                timer.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
            }

            function showError(message) {
                const errorDiv = document.createElement('div');
                errorDiv.className = 'alert alert-danger alert-dismissible fade show mt-2';
                errorDiv.innerHTML = `
                    <strong>Error:</strong> ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                `;
                recordButton.parentElement.appendChild(errorDiv);
                
                setTimeout(() => {
                    errorDiv.remove();
                }, 5000);
            }

            recordButton.addEventListener('click', async () => {
                try {
                    if (!isRecording) {
                        await startRecording();
                    } else {
                        await stopRecording();
                    }
                } catch (error) {
                    console.error('Recording operation failed:', error);
                    showError('An unexpected error occurred. Please try again.');
                    await stopRecording();
                }
            });
        });
    </script>
{% endblock %}