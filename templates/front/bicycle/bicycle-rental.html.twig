{% extends 'front/base.html.twig' %}

{% block title %}Bicycle Rentals - WamiaGo{% endblock %}

{% block page_stylesheets %}
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin=""/>
<link href="{{ asset('css/front/Bicycle/bicycle-rental.css') }}?v={{ 'now'|date('YmdHi') }}" rel="stylesheet">
{% endblock %}

{% block hero %}
<div class="hero-section bg-bicycle text-white">
    <div class="container">
        <div class="row align-items-center">
            <div class="col-md-6">
                <h1 class="display-4 fw-bold">Bicycle Rentals</h1>
                <p class="lead">Explore the city with our eco-friendly electric bicycles</p>
                <p class="mb-4">
                    <i class="fas fa-bolt me-2"></i> Powerful electric motors
                    <i class="fas fa-map-marked-alt mx-2"></i> Available across the city
                    <i class="fas fa-leaf mx-2"></i> 100% eco-friendly
                </p>
                <div class="d-flex">
                    <a href="#stations-section" class="btn btn-light btn-lg me-3">
                        Find a Bike <i class="fas fa-chevron-right ms-2"></i>
                    </a>
                    <a href="#how-it-works" class="btn btn-outline-light btn-lg">
                        How It Works
                    </a>
                </div>
            </div>
            <div class="col-md-6 d-none d-md-block">
                <img src="{{ asset('images/front/rentals/bike.png') }}" alt="Electric Bicycle" class="img-fluid hero-image">
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block content %}
<section id="how-it-works" class="py-5">
    <div class="container">
        <h2 class="text-center mb-5">How It Works</h2>
        <div class="row g-4">
            <div class="col-md-4">
                <div class="card h-100 border-0 shadow-sm">
                    <div class="card-body text-center p-4">
                        <div class="icon-box mb-3 bg-bicycle-light mx-auto">
                            <i class="fas fa-map-marker-alt text-bicycle"></i>
                        </div>
                        <h4>Find a Station</h4>
                        <p class="text-muted">Locate the nearest bicycle station using our interactive map or station list.</p>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card h-100 border-0 shadow-sm">
                    <div class="card-body text-center p-4">
                        <div class="icon-box mb-3 bg-bicycle-light mx-auto">
                            <i class="fas fa-bicycle text-bicycle"></i>
                        </div>
                        <h4>Reserve a Bicycle</h4>
                        <p class="text-muted">Choose your bike, check its battery level and range, then reserve it instantly.</p>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card h-100 border-0 shadow-sm">
                    <div class="card-body text-center p-4">
                        <div class="icon-box mb-3 bg-bicycle-light mx-auto">
                            <i class="fas fa-hand-peace text-bicycle"></i>
                        </div>
                        <h4>Enjoy Your Ride</h4>
                        <p class="text-muted">Unlock your bike with the provided code and return it to any station when finished.</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

{# Find a Bicycle Station Section #}
<section id="stations-section" class="py-5 bg-light">
    <div class="container">
        <h2 class="text-center mb-5">Find a Bicycle Station</h2>
        
        <div class="row mb-4">
            <div class="col-lg-12">
                <div class="card border-0 shadow-sm">
                    <div class="card-body p-4">
                        <div class="input-group input-group-lg">
                            <span class="input-group-text bg-bicycle text-white border-0">
                                <i class="fas fa-search"></i>
                            </span>
                            <input type="text" id="stationSearchInput" class="form-control form-control-lg border-start-0 shadow-none" placeholder="Search for stations by name, address or area...">
                            <button class="btn btn-bicycle" type="button" id="clearSearchBtn">
                                <i class="fas fa-times"></i> Clear
                            </button>
                        </div>
                        <div class="mt-3 d-flex flex-wrap justify-content-between align-items-center">
                            <div class="mb-2 mb-md-0">
                                <span class="badge bg-bicycle rounded-pill py-2 px-3 me-2">
                                    <i class="fas fa-map-marker-alt me-1"></i>
                                    <span id="searchResultsCount">{{ stations|length }}</span> stations found
                                </span>
                                
                                <div class="btn-group btn-group-sm filter-buttons ms-2 d-inline-flex">
                                    <button type="button" class="btn btn-outline-bicycle active" data-filter="all">All</button>
                                    <button type="button" class="btn btn-outline-bicycle" data-filter="available">Available</button>
                                    <button type="button" class="btn btn-outline-bicycle" data-filter="nearest">Nearest</button>
                                </div>
                            </div>
                            <div class="form-check form-switch">
                                <input class="form-check-input" type="checkbox" id="showAvailableOnlyCheck">
                                <label class="form-check-label" for="showAvailableOnlyCheck">
                                    <span class="d-none d-sm-inline">Show stations with </span>available bikes only
                                </label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="row">
            {# Map on the left - Fixed height with overflow #}
            <div class="col-lg-8 mb-4">
                <div class="card h-100 border-0 shadow-sm">
                    <div class="card-body p-0">
                        <div id="bicycleMap" class="map-container" style="height: 600px; min-height: 600px;">
                            {# Map will be initialized with JavaScript #}
                        </div>
                    </div>
                </div>
            </div>
            
            {# Station list on the right - With scrollable container #}
            <div class="col-lg-4">
                <div class="card border-0 shadow-sm" style="height: 600px;">
                    <div class="card-header bg-bicycle text-white d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Available Stations</h5>
                        <span class="badge bg-white text-bicycle">{{ stations|length }} Found</span>
                    </div>
                    <div class="card-body p-0" style="height: calc(600px - 53px); overflow: hidden;">
                        <div class="station-list" style="height: 100%; overflow-y: auto; scrollbar-width: thin;">
                            {% if stations is empty %}
                                <div class="text-center py-4">
                                    <p class="text-muted">No bicycle stations available</p>
                                </div>
                            {% else %}
                                {% for station in stations %}
                                    <div class="station-item p-3 border-bottom" 
                                         data-station-name="{{ station.name|lower }}" 
                                         data-station-address="{{ station.location ? station.location.address|lower : '' }}"
                                         data-available-bikes="{{ station.availableBikes }}">
                                        <h5 class="mb-1">{{ station.name }}</h5>
                                        <p class="text-muted mb-2">
                                            {% if station.location %}
                                                {{ station.location.address }}
                                            {% else %}
                                                No address available
                                            {% endif %}
                                        </p>
                                        <div class="d-flex justify-content-between mb-2">
                                            <div>
                                                <small class="me-3">
                                                    <i class="fas fa-bicycle me-1 text-bicycle"></i> {{ station.availableBikes }} available
                                                </small>
                                                <small>
                                                    <i class="fas fa-parking me-1"></i> {{ station.availableDocks }} docks
                                                </small>
                                            </div>
                                            <a href="{{ path('app_front_services_bicycle_station', {'id': station.idStation}) }}" class="btn btn-sm btn-bicycle">
                                                View Bicycles
                                            </a>
                                        </div>
                                        
                                        {# Weather information for this station #}
                                        <div class="station-weather mt-2 p-2 border-top" data-station-id="{{ station.idStation }}" data-lat="{{ station.location ? station.location.latitude : 36.8065 }}" data-lon="{{ station.location ? station.location.longitude : 10.1815 }}">
                                            <div class="d-flex align-items-center">
                                                <div class="weather-icon me-2">
                                                    <i class="fas fa-sync fa-spin text-bicycle"></i>
                                                </div>
                                                <small class="text-muted">Loading weather...</small>
                                            </div>
                                        </div>
                                    </div>
                                {% endfor %}
                            {% endif %}
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

{# Bicycle Types Section #}
<section class="py-5">
    <div class="container">
        <h2 class="text-center mb-5">Our Bicycle Types</h2>
        <div class="row g-4">
    <div class="col-md-6">
        <div class="card h-100 border-0 shadow-sm">
            <div class="row g-0">
                <div class="col-md-5">
                    <div class="bicycle-type-img h-100 d-flex align-items-center justify-content-center bg-bicycle-light">
                        <i class="fas fa-bicycle text-bicycle" style="font-size: 6rem;"></i>
                    </div>
                </div>
                <div class="col-md-7">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <h4 class="card-title">
                                <i class="fas fa-bolt me-2 text-bicycle"></i>Standard E-Bike
                            </h4>
                            <span class="badge bg-bicycle">10.50 TND/hr</span>
                        </div>
                        <p class="card-text text-muted">Perfect for everyday urban commuting with reliable battery life and comfortable design.</p>
                        <ul class="list-unstyled mt-3">
                            <li class="mb-2"><i class="fas fa-check-circle text-bicycle me-2"></i> Up to 30km range</li>
                            <li class="mb-2"><i class="fas fa-check-circle text-bicycle me-2"></i> 25 km/h top speed</li>
                            <li class="mb-2"><i class="fas fa-check-circle text-bicycle me-2"></i> Basket included</li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card h-100 border-0 shadow-sm">
            <div class="row g-0">
                <div class="col-md-5">
                    <div class="bicycle-type-img h-100 d-flex align-items-center justify-content-center bg-bicycle-light position-relative">
                        <i class="fas fa-bicycle text-bicycle" style="font-size: 6rem;"></i>
                        <i class="fas fa-star text-warning position-absolute" style="font-size: 2rem; top: 10px; right: 10px;"></i>
                    </div>
                </div>
                <div class="col-md-7">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <h4 class="card-title">
                                <i class="fas fa-star me-2 text-warning"></i>Premium E-Bike
                            </h4>
                            <span class="badge bg-bicycle">15.00 TND/hr</span>
                        </div>
                        <p class="card-text text-muted">Our high-end model with extended range, faster speed and premium features for demanding riders.</p>
                        <ul class="list-unstyled mt-3">
                            <li class="mb-2"><i class="fas fa-check-circle text-bicycle me-2"></i> Up to 45km range</li>
                            <li class="mb-2"><i class="fas fa-check-circle text-bicycle me-2"></i> 30 km/h top speed</li>
                            <li class="mb-2"><i class="fas fa-check-circle text-bicycle me-2"></i> Smart LED display</li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
        </div>
    </div>
</section>

{# Pricing Section #}
<section class="py-5 bg-light">
    <div class="container">
        <h2 class="text-center mb-5">Rental Pricing</h2>
        <div class="row justify-content-center">
            <div class="col-lg-8">
                <div class="card border-0 shadow-sm">
                    <div class="card-body p-0">
                        <table class="table pricing-table mb-0">
                            <thead>
                                <tr>
                                    <th>Duration</th>
                                    <th>Standard E-Bike</th>
                                    <th>Premium E-Bike</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>1 hour</td>
                                    <td>10.50 TND</td>
                                    <td>15.00 TND</td>
                                </tr>
                                <tr>
                                    <td>3 hours</td>
                                    <td>27.00 TND</td>
                                    <td>39.00 TND</td>
                                </tr>
                                <tr>
                                    <td>Full day (24 hours)</td>
                                    <td>72.00 TND</td>
                                    <td>105.00 TND</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
                <p class="text-center text-muted mt-3">
                    <i class="fas fa-info-circle me-1"></i>
                    All rentals include helmet, lock, and basic insurance.
                </p>
            </div>
        </div>
    </div>
</section>

{# My Reservations Section (only for logged in users) - Direct from controller #}
{% if app.user %}
    <section class="py-5">
        <div class="container">

            
            {% if activeRentals is defined and activeRentals|length > 0 %}
                <div class="row g-4">
                    {% for rental in activeRentals %}
                        <div class="col-md-6 col-lg-4">
                            <div class="card h-100 border-0 shadow-sm">
                                <div class="card-header bg-bicycle text-white">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <h5 class="mb-0">Reservation #{{ rental.idUserRental }}</h5>
                                        <span class="badge bg-light text-bicycle">Active</span>
                                    </div>
                                </div>
                                <div class="card-body">
                                    <p class="mb-2">
                                        <i class="fas fa-bicycle me-2 text-bicycle"></i>
                                        {{ rental.bicycle.batteryLevel > 90 ? 'Premium' : 'Standard' }} E-Bike
                                    </p>
                                    <p class="mb-2">
                                        <i class="fas fa-map-marker-alt me-2 text-bicycle"></i>
                                        {{ rental.startStation.name }}
                                    </p>
                                    <p class="mb-2">
                                        <i class="fas fa-calendar me-2 text-bicycle"></i>
                                        {{ rental.startTime|date('M d, Y, h:i a') }}
                                    </p>
                                    <p class="mb-3">
                                        <i class="fas fa-tag me-2 text-bicycle"></i>
                                        {{ rental.cost|number_format(2) }} TND
                                    </p>
                                    <div class="d-flex justify-content-between">
                                        <a href="{{ path('app_front_show_rental_code', {'id': rental.idUserRental}) }}" class="btn btn-outline-bicycle btn-sm me-2">
                                            <i class="fas fa-qrcode me-1"></i> Show QR Code
                                        </a>
                                        <a href="{{ path('app_front_cancel_rental', {'id': rental.idUserRental}) }}" class="btn btn-outline-danger btn-sm cancel-rental-btn">
                                            <i class="fas fa-times me-1"></i> Cancel
                                        </a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    {% endfor %}
                </div>
            {% else %}
                <div class="text-center py-5 bg-light rounded shadow-sm">
                    <div class="mb-4">
                        <i class="fas fa-bicycle text-muted" style="font-size: 3rem;"></i>
                    </div>
                    <h4>No Active Reservations</h4>
                    <p class="text-muted mb-4">You don't have any active bicycle reservations at the moment.</p>
                </div>
            {% endif %}
        </div>
    </section>
{% endif %}

{# FAQ Section #}
<section class="py-5 bg-light">
    <div class="container">
        <h2 class="text-center mb-5">Frequently Asked Questions</h2>
        <div class="row justify-content-center">
            <div class="col-lg-10">
                <div class="accordion" id="bicycleFaq">
                    <div class="accordion-item">
                        <h2 class="accordion-header" id="headingOne">
                            <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                                How do I unlock my reserved bicycle?
                            </button>
                        </h2>
                        <div id="collapseOne" class="accordion-collapse collapse show" aria-labelledby="headingOne" data-bs-parent="#bicycleFaq">
                            <div class="accordion-body">
                                After making a reservation, you'll receive a QR code. Scan this code at the station's kiosk to unlock your bicycle. Alternatively, you can enter the 6-digit code that appears in your reservation details.
                            </div>
                        </div>
                    </div>
                    <div class="accordion-item">
                        <h2 class="accordion-header" id="headingTwo">
                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
                                Can I return my bicycle to a different station?
                            </button>
                        </h2>
                        <div id="collapseTwo" class="accordion-collapse collapse" aria-labelledby="headingTwo" data-bs-parent="#bicycleFaq">
                            <div class="accordion-body">
                                Yes! You can return your bicycle to any WamiaGo bicycle station with available docks. Just secure the bicycle to an available dock, and the system will automatically detect the return.
                            </div>
                        </div>
                    </div>
                    <div class="accordion-item">
                        <h2 class="accordion-header" id="headingThree">
                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseThree" aria-expanded="false" aria-controls="collapseThree">
                                What if I encounter a problem with my bicycle?
                            </button>
                        </h2>
                        <div id="collapseThree" class="accordion-collapse collapse" aria-labelledby="headingThree" data-bs-parent="#bicycleFaq">
                            <div class="accordion-body">
                                If you encounter any issues with your bicycle, please return it to the nearest station and report the problem through our app or website. Select the bicycle and click on "Report Issue". We'll make sure it gets fixed promptly.
                            </div>
                        </div>
                    </div>
                    <div class="accordion-item">
                        <h2 class="accordion-header" id="headingFour">
                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseFour" aria-expanded="false" aria-controls="collapseFour">
                                What happens if I exceed my rental time?
                            </button>
                        </h2>
                        <div id="collapseFour" class="accordion-collapse collapse" aria-labelledby="headingFour" data-bs-parent="#bicycleFaq">
                            <div class="accordion-body">
                                If you exceed your reserved time, your account will be automatically charged at the standard hourly rate for the additional time. You'll receive a notification if you're approaching the end of your reservation time.
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

{# Call to Action Section #}
<section class="py-5 bg-bicycle text-white text-center">
    <div class="container">
        <h2 class="mb-3">Ready to Start Riding?</h2>
        <p class="lead mb-4">Join thousands of happy riders exploring the city on our eco-friendly bicycles.</p>
        {% if not app.user %}
            <div class="d-flex justify-content-center">
                <a href="#" class="btn btn-light btn-lg me-3">
                    <i class="fas fa-user-plus me-2"></i> Sign Up
                </a>
                <a href="#" class="btn btn-outline-light btn-lg">
                    <i class="fas fa-sign-in-alt me-2"></i> Log In
                </a>
            </div>
        {% else %}
            <a href="#stations-section" class="btn btn-light btn-lg">
                <i class="fas fa-bicycle me-2"></i> Find a Bicycle Now
            </a>
        {% endif %}
    </div>
</section>
<div id="reservationsButton" style="position: fixed; bottom: 30px; right: 30px; z-index: 9999; transition: all 0.3s ease;">
    <a href="{{ path('app_front_my_reservations') }}" class="btn btn-success btn-lg rounded-circle shadow-lg d-flex align-items-center justify-content-center" style="width: 65px; height: 65px;">
        <i class="fas fa-bicycle" style="font-size: 1.8rem;"></i>
    </a>
</div>
{% endblock %}

{% block page_javascripts %}
<!-- Load Leaflet JS -->
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin=""></script>
<script src="{{ asset('js/front/bicycle/weatherService.js') }}?v={{ 'now'|date('YmdHi') }}"></script>
<script>
// Map initialization
document.addEventListener('DOMContentLoaded', function() {
    initializeMap();
    initializeFloatingButton();
    initializeWeatherService();
    initializeSearch();
});

// Initialize weather service for all stations
async function initializeWeatherService() {
    console.log("Initializing weather service...");
    
    // Create a new weather service instance
    const weatherService = new WeatherService();
    
    // Initialize the API key from the backend
    await weatherService.init();
    
    // Get all station weather containers
    const stationWeatherElements = document.querySelectorAll('.station-weather');
    
    // Load weather for each station
    stationWeatherElements.forEach(async function(stationWeatherEl) {
        const stationId = stationWeatherEl.getAttribute('data-station-id');
        const latitude = parseFloat(stationWeatherEl.getAttribute('data-lat'));
        const longitude = parseFloat(stationWeatherEl.getAttribute('data-lon'));
        
        try {
            // Get weather data for this station's location
            const weatherData = await weatherService.getWeatherData(latitude, longitude);
            
            // Get weather factor class
            let weatherFactorClass = 'text-success';
            if (weatherData.weatherFactor > 1.3) weatherFactorClass = 'text-danger';
            else if (weatherData.weatherFactor > 1.2) weatherFactorClass = 'text-warning';
            else if (weatherData.weatherFactor > 1.1) weatherFactorClass = 'text-info';
            else if (weatherData.weatherFactor > 1.0) weatherFactorClass = 'text-primary';
            
            // Update the weather UI for this station
            stationWeatherEl.innerHTML = `
                <div class="d-flex justify-content-between align-items-center">
                    <div class="d-flex align-items-center">
                        <div class="weather-icon me-2">
                            <i class="fas ${weatherData.icon}"></i>
                        </div>
                        <div>
                            <small class="d-block">${weatherData.temperature}°C, ${weatherData.description}</small>
                            <small class="d-block ${weatherFactorClass}">
                                ${weatherService.getWeatherDescription(weatherData.weatherFactor)}
                            </small>
                        </div>
                    </div>
                    <div>
                        <small class="text-muted">Wind: ${weatherData.windSpeed} m/s</small>
                    </div>
                </div>
            `;
        } catch (error) {
            console.error(`Failed to load weather for station ${stationId}:`, error);
            
            // Show error state
            stationWeatherEl.innerHTML = `
                <div class="d-flex align-items-center">
                    <div class="weather-icon me-2">
                        <i class="fas fa-sun"></i>
                    </div>
                    <small class="text-muted">Weather data unavailable</small>
                </div>
            `;
        }
    });
    
    console.log("Weather service initialized for all stations");
}

// Initialize search functionality
function initializeSearch() {
    console.log("Initializing station search...");
    
    const searchInput = document.getElementById('stationSearchInput');
    const clearButton = document.getElementById('clearSearchBtn');
    const showAvailableOnlyCheck = document.getElementById('showAvailableOnlyCheck');
    const searchResultsCount = document.getElementById('searchResultsCount');
    const stationItems = document.querySelectorAll('.station-item');
    const filterButtons = document.querySelectorAll('.filter-buttons .btn');
    
    if (!searchInput || !clearButton || !showAvailableOnlyCheck) {
        console.error("Search elements not found");
        return;
    }
    
    // Current filter type
    let activeFilter = 'all';
    let userLocation = null;
    
    // Get user's location for "nearest" filter
    function getUserLocation() {
        return new Promise((resolve, reject) => {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(
                    position => {
                        userLocation = {
                            lat: position.coords.latitude,
                            lng: position.coords.longitude
                        };
                        resolve(userLocation);
                    },
                    error => {
                        console.error("Error getting user location:", error);
                        reject(error);
                    }
                );
            } else {
                const error = new Error("Geolocation is not supported by this browser");
                console.error(error);
                reject(error);
            }
        });
    }
    
    // Calculate distance between two points using Haversine formula
    function calculateDistance(lat1, lon1, lat2, lon2) {
        const R = 6371; // Radius of the earth in km
        const dLat = deg2rad(lat2 - lat1);
        const dLon = deg2rad(lon2 - lon1);
        const a = 
            Math.sin(dLat/2) * Math.sin(dLat/2) +
            Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * 
            Math.sin(dLon/2) * Math.sin(dLon/2); 
        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); 
        const distance = R * c; // Distance in km
        return distance;
    }
    
    function deg2rad(deg) {
        return deg * (Math.PI/180);
    }
    
    // Function to filter stations based on search criteria
    function filterStations() {
        const searchTerm = searchInput.value.toLowerCase().trim();
        const showAvailableOnly = showAvailableOnlyCheck.checked;
        
        let visibleCount = 0;
        let stations = Array.from(stationItems);
        
        // If we're using the nearest filter, sort stations by distance from user
        if (activeFilter === 'nearest' && userLocation) {
            stations.sort((a, b) => {
                const aLat = parseFloat(a.querySelector('.station-weather').getAttribute('data-lat'));
                const aLon = parseFloat(a.querySelector('.station-weather').getAttribute('data-lon'));
                const bLat = parseFloat(b.querySelector('.station-weather').getAttribute('data-lat'));
                const bLon = parseFloat(b.querySelector('.station-weather').getAttribute('data-lon'));
                
                const distanceA = calculateDistance(userLocation.lat, userLocation.lng, aLat, aLon);
                const distanceB = calculateDistance(userLocation.lat, userLocation.lng, bLat, bLon);
                
                return distanceA - distanceB;
            });
        }
        
        stations.forEach(function(station) {
            const stationName = station.getAttribute('data-station-name');
            const stationAddress = station.getAttribute('data-station-address');
            const availableBikes = parseInt(station.getAttribute('data-available-bikes'));
            
            // Check if station matches search criteria
            const matchesSearch = searchTerm === '' || 
                stationName.includes(searchTerm) || 
                stationAddress.includes(searchTerm);
            
            // Check if station has available bikes (if that filter is active)
            const hasAvailableBikes = !showAvailableOnly || availableBikes > 0;
            
            // Check if station matches the current filter type
            let matchesFilter = true;
            if (activeFilter === 'available' && availableBikes <= 0) {
                matchesFilter = false;
            }
            
            // Show or hide based on combined filters
            if (matchesSearch && hasAvailableBikes && matchesFilter) {
                station.style.display = 'block';
                
                // Highlight search terms in the station name and address
                if (searchTerm !== '') {
                    highlightSearchTerms(station, searchTerm);
                } else {
                    // Reset highlighting when search is cleared
                    resetHighlighting(station);
                }
                
                visibleCount++;
            } else {
                station.style.display = 'none';
            }
        });
        
        // When using 'nearest', reorder the stations in the DOM to match our sorted array
        if (activeFilter === 'nearest' && userLocation) {
            const stationList = document.querySelector('.station-list');
            stations.forEach(station => {
                stationList.appendChild(station);
            });
        }
        
        // Update the results count
        searchResultsCount.textContent = visibleCount;
    }
    
    // Highlight search terms in text
    function highlightSearchTerms(stationElement, searchTerm) {
        const stationName = stationElement.querySelector('h5');
        const stationAddress = stationElement.querySelector('p.text-muted');
        
        if (stationName) {
            const originalName = stationName.getAttribute('data-original-text') || stationName.textContent;
            stationName.setAttribute('data-original-text', originalName);
            stationName.innerHTML = highlightText(originalName, searchTerm);
        }
        
        if (stationAddress) {
            const originalAddress = stationAddress.getAttribute('data-original-text') || stationAddress.textContent;
            stationAddress.setAttribute('data-original-text', originalAddress);
            stationAddress.innerHTML = highlightText(originalAddress, searchTerm);
        }
    }
    
    // Reset highlighting
    function resetHighlighting(stationElement) {
        const stationName = stationElement.querySelector('h5');
        const stationAddress = stationElement.querySelector('p.text-muted');
        
        if (stationName && stationName.hasAttribute('data-original-text')) {
            stationName.textContent = stationName.getAttribute('data-original-text');
        }
        
        if (stationAddress && stationAddress.hasAttribute('data-original-text')) {
            stationAddress.textContent = stationAddress.getAttribute('data-original-text');
        }
    }
    
    // Highlight text helper function
    function highlightText(text, searchTerm) {
        const regex = new RegExp('(' + escapeRegExp(searchTerm) + ')', 'gi');
        return text.replace(regex, '<span class="search-highlight">$1</span>');
    }
    
    // Escape regex special characters
    function escapeRegExp(string) {
        return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    }
    
    // Filter button click handler
    filterButtons.forEach(button => {
        button.addEventListener('click', function() {
            const filterType = this.getAttribute('data-filter');
            
            // Remove active class from all buttons
            filterButtons.forEach(btn => btn.classList.remove('active'));
            
            // Add active class to clicked button
            this.classList.add('active');
            
            // Set the active filter
            activeFilter = filterType;
            
            // If nearest filter is selected, get user location
            if (filterType === 'nearest' && !userLocation) {
                getUserLocation()
                    .then(() => filterStations())
                    .catch((error) => {
                        console.error("Could not get user location:", error);
                        alert("Could not get your location. Please allow location access to use this filter.");
                        
                        // Reset to 'all' filter if location access is denied
                        filterButtons.forEach(btn => {
                            if (btn.getAttribute('data-filter') === 'all') {
                                btn.classList.add('active');
                                activeFilter = 'all';
                            } else {
                                btn.classList.remove('active');
                            }
                        });
                    });
            } else {
                // Run the filter
                filterStations();
            }
        });
    });
    
    // Add event listeners
    searchInput.addEventListener('input', filterStations);
    showAvailableOnlyCheck.addEventListener('change', filterStations);
    clearButton.addEventListener('click', function() {
        searchInput.value = '';
        stationItems.forEach(resetHighlighting);
        filterStations();
    });
    
    console.log("Station search initialized successfully");
}

function initializeMap() {
    const mapElement = document.getElementById('bicycleMap');
    if (!mapElement) return;
    
    console.log("Initializing map...");
    
    const map = L.map('bicycleMap').setView([40.7128, -74.006], 13);
    
    // Add OpenStreetMap tiles
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
        maxZoom: 19
    }).addTo(map);
    
    // Make sure map renders properly
    setTimeout(function() {
        map.invalidateSize();
    }, 100);
    
    // Ensure map fills container on window resize
    window.addEventListener('resize', function() {
        setTimeout(function() {
            map.invalidateSize();
        }, 100);
    });
    
    // Station icon definition
    const stationIcon = L.divIcon({
        className: 'station-marker-icon',
        html: '<div><i class="fas fa-bicycle"></i></div>',
        iconSize: [36, 36],
        iconAnchor: [18, 18]
    });
    
    // Bounds for auto-zoom
    const bounds = L.latLngBounds();
    
    // Add station markers
    {% for station in stations %}
        {% if station.location %}
            // Create marker
            const marker{{ station.idStation }} = L.marker(
                [{{ station.location.latitude|default(0) }}, {{ station.location.longitude|default(0) }}], 
                {
                    icon: stationIcon,
                    title: "{{ station.name }}"
                }
            ).addTo(map);
            
            // Extend bounds for auto-zoom
            bounds.extend([{{ station.location.latitude|default(0) }}, {{ station.location.longitude|default(0) }}]);
            
            // Create popup
            marker{{ station.idStation }}.bindPopup(`
                <div class="station-info p-2">
                    <h5>{{ station.name }}</h5>
                    <p>{{ station.location.address|default('No address available') }}</p>
                    <div class="d-flex justify-content-between mb-2">
                        <span>Available bikes:</span>
                        <span class="fw-bold">{{ station.availableBikes }}</span>
                    </div>
                    <div class="d-flex justify-content-between mb-2">
                        <span>Available docks:</span>
                        <span class="fw-bold">{{ station.availableDocks }}</span>
                    </div>
                    <a href="{{ path('app_front_services_bicycle_station', {'id': station.idStation}) }}" class="btn btn-sm btn-bicycle mt-2 w-100">
                        View Station Details
                    </a>
                </div>
            `);
        {% endif %}
    {% endfor %}
    
    // Fit map to bounds if we have stations
    if(bounds.isValid()) {
        map.fitBounds(bounds);
    }
    
    console.log("Map initialized successfully");
}

function initializeFloatingButton() {
    console.log("Initializing floating button...");
    
    const reservationsBtn = document.getElementById('reservationsButton');
    if (!reservationsBtn) {
        console.error("Floating button element not found");
        return;
    }
    
    // Apply direct styling for visibility
    reservationsBtn.style.opacity = '0';
    reservationsBtn.style.transform = 'translateY(20px)';
    
    // Add hover effect to button
    const buttonLink = reservationsBtn.querySelector('a');
    if (buttonLink) {
        buttonLink.style.transition = 'transform 0.2s ease';
        
        buttonLink.addEventListener('mouseenter', function() {
            this.style.transform = 'scale(1.1)';
        });
        
        buttonLink.addEventListener('mouseleave', function() {
            this.style.transform = 'scale(1.0)';
        });
    }
    
    // Function to update button visibility based on scroll position
    function updateButtonVisibility() {
        const scrollPosition = window.pageYOffset || document.documentElement.scrollTop;
        if (scrollPosition > 300) {
            reservationsBtn.style.opacity = '1';
            reservationsBtn.style.transform = 'translateY(0)';
        } else {
            reservationsBtn.style.opacity = '0';
            reservationsBtn.style.transform = 'translateY(20px)';
        }
    }
    
    // Set initial state

    
    // Add scroll event listener
    window.addEventListener('scroll', updateButtonVisibility);
    
    console.log("Floating button initialized successfully");
    
    // Force a refresh of the button state after a short delay
    setTimeout(updateButtonVisibility, 200);
}   
</script>
<script>
// Force floating button to appear
document.addEventListener('DOMContentLoaded', function() {
    const forceButton = function() {
        const btn = document.getElementById('reservationsButton');
        if (btn) {
            btn.style.position = 'fixed';
            btn.style.bottom = '30px';
            btn.style.right = '30px';
            btn.style.zIndex = '100000';
            btn.style.backgroundColor = '#28a745';
            btn.style.borderRadius = '50%';
            btn.style.width = '65px';
            btn.style.height = '65px';
            btn.style.display = 'flex';
            btn.style.alignItems = 'center';
            btn.style.justifyContent = 'center';
            btn.style.boxShadow = '0 4px 10px rgba(0,0,0,0.3)';
            btn.style.opacity = '1';
            btn.style.transform = 'none';
            
            console.log('FORCE APPLIED TO BUTTON');
        } else {
            console.error('Button not found for force fix');
        }
    };
    
    setTimeout(forceButton, 1000);
    document.addEventListener('scroll', function() {
        forceButton();
    });
});
</script>
{% endblock %}