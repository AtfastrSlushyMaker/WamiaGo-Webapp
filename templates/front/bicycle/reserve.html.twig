{% extends 'front/base.html.twig' %}

{% block title %}Reserve a Bicycle - WamiaGo{% endblock %}

{% block page_stylesheets %}
    <link href="{{ asset('css/front/Bicycle/bicycle-rental.css') }}?v={{ 'now'|date('YmdHi') }}" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        .bicycle-details {
            background-color: #f8f9fa;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
        }
        
        .battery-indicator {
            width: 100%;
            height: 20px;
            background-color: #e9ecef;
            border-radius: 10px;
            overflow: hidden;
            margin: 10px 0;
        }
        
        .battery-level {
            height: 100%;
            background-color: #28a745;
        }
        
        .reservation-form {
            background-color: white;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 0 15px rgba(0,0,0,0.1);
        }
        
        .price-calculation {
            background-color: #e9f7ef;
            padding: 15px;
            border-radius: 10px;
            margin: 20px 0;
        }
        
        .btn-reserve {
            background-color: #28a745;
            border-color: #28a745;
            color: white;
            padding: 10px 20px;
            font-weight: bold;
        }
        
        .weather-info {
            background-color: #f0f8ff;
            border-radius: 8px;
            padding: 12px;
            margin-top: 15px;
            display: flex;
            align-items: center;
        }
        
        .weather-icon {
            font-size: 2rem;
            margin-right: 15px;
        }
        
        .rental-info-box {
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 20px;
            background-color: #f9f9f9;
        }
        
        .rental-info-label {
            font-weight: bold;
            color: #555;
        }
        
        .estimated-return-info {
            margin-top: 10px;
            padding-top: 10px;
            border-top: 1px dashed #ccc;
        }
        
        .return-station-selector {
            margin-top: 15px;
        }

        .weather-loading {
            color: #6c757d;
            font-style: italic;
        }

        .weather-factor {
            font-weight: bold;
            padding: 3px 8px;
            border-radius: 4px;
            display: inline-block;
        }

        .weather-factor-good {
            background-color: #d4edda;
            color: #155724;
        }

        .weather-factor-mild {
            background-color: #fff3cd;
            color: #856404;
        }

        .weather-factor-moderate {
            background-color: #ffe6cc;
            color: #8a5d19;
        }

        .weather-factor-challenging {
            background-color: #f8d7da;
            color: #721c24;
        }

        .weather-factor-difficult {
            background-color: #f5c2c7;
            color: #58151c;
        }
    </style>
{% endblock %}

{% block content %}
    <div class="container py-5">
        <div class="row mb-4">
            <div class="col">
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item"><a href="{{ path('app_front_services_bicycle') }}">Bicycle Rentals</a></li>
                        <li class="breadcrumb-item"><a href="{{ path('app_front_services_bicycle_station', {'id': bicycle.bicycleStation.idStation}) }}">{{ bicycle.bicycleStation.name }}</a></li>
                        <li class="breadcrumb-item active" aria-current="page">Reserve Bicycle</li>
                    </ol>
                </nav>
                <h1>Reserve a Bicycle</h1>
            </div>
        </div>

        {% for message in app.flashes('error') %}
            <div class="alert alert-danger">
                {{ message }}
            </div>
        {% endfor %}

        <div class="row">
            <div class="col-md-6">
                <div class="bicycle-details">
                    <h3>{{ bicycleType }}</h3>
                    <p class="text-muted">ID: #{{ bicycle.idBike }}</p>
                    
                    <div class="mt-4">
                        <p><strong>Battery Level:</strong></p>
                        <div class="battery-indicator">
                            <div class="battery-level" style="width: {{ bicycle.batteryLevel }}%;"></div>
                        </div>
                        <p>{{ bicycle.batteryLevel }}%</p>
                    </div>
                    
                    <div class="mt-3">
                        <p><strong>Estimated Range:</strong> {{ bicycle.rangeKm }} km</p>
                        <p><strong>Station:</strong> {{ bicycle.bicycleStation.name }}</p>
                        <p><strong>Hourly Rate:</strong> {{ (hourlyRate)|number_format(3) }} TND</p>
                    </div>
                    
                    <div class="weather-info" id="weather-container">
                        <div class="weather-icon">
                            <i class="fas fa-spinner fa-pulse"></i>
                        </div>
                        <div>
                            <p class="mb-0"><strong>Current Weather:</strong> <span class="weather-loading">Loading...</span></p>
                            <p class="mb-0 weather-loading">Checking conditions...</p>
                            <small class="text-muted weather-loading">Weather affects pricing</small>
                        </div>
                    </div>
                    
                    <div class="rental-info-box mt-4">
                        <p class="mb-2"><span class="rental-info-label">How it works:</span></p>
                        <ol>
                            <li>Reserve the bicycle now</li>
                            <li>Go to "My Reservations" page to activate your reservation</li>
                            <li>Click the "Start Ride" button to begin using the bicycle</li>
                            <li>Use it for as long as you need</li>
                            <li>Return it to any available station</li>
                            <li>The final cost will be calculated when you return the bicycle</li>
                        </ol>
                    </div>
                </div>
            </div>
            
            <div class="col-md-6">
                <div class="reservation-form">
                    <h3>Reservation Details</h3>
                    
                    <form method="post" id="reservationForm" >
                        <div class="form-group mb-3">
                            <label>Current Date and Time:</label>
                            <input type="text" class="form-control" 
                                   value="{{ "now"|date('Y-m-d H:i') }}" readonly>
                            <small class="form-text text-muted">Your rental will be reserved now but will only start when you activate it from "My Reservations" page.</small>
                        </div>
                              
                        <div class="price-calculation">
                            <p><strong>Hourly Rate:</strong> {{ hourlyRate|number_format(3) }} TND</p>
                            <p><strong>Weather Conditions:</strong> <span id="weatherCondition">Loading...</span></p>
                            <p class="font-italic">The final price will be calculated when you return the bicycle.</p>
                            <hr>
                            <p class="h5"><strong>Estimated Deposit:</strong> <span id="totalCost">{{ hourlyRate|number_format(3) }}</span> TND</p>
                            <p class="small text-muted">This is a pre-authorization amount. You'll only be charged for the actual time used after activating the reservation.</p>
                            <input type="hidden" name="estimatedCost" id="estimatedCost" value="{{ hourlyRate }}">
                            <input type="hidden" name="duration" id="duration" value="1">
                        </div>
                        
                        <div class="form-group">
                            <p class="text-muted small">By reserving this bicycle, you agree to our <a href="#">Terms and Conditions</a>.</p>
                            <button type="submit" class="btn btn-reserve btn-lg w-100">Reserve Now</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    {# Station coordinates for weather API #}
    <input type="hidden" id="stationLatitude" value="{{ bicycle.bicycleStation.latitude|default(36.8065) }}">
    <input type="hidden" id="stationLongitude" value="{{ bicycle.bicycleStation.longitude|default(10.1815) }}">
{% endblock %}

{% block page_javascripts %}
    <script src="{{ asset('js/front/bicycle/weatherService.js') }}?v={{ 'now'|date('YmdHi') }}"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const totalCostSpan = document.getElementById('totalCost');
            const estimatedCostInput = document.getElementById('estimatedCost');
            const weatherConditionSpan = document.getElementById('weatherCondition');
            const weatherContainer = document.getElementById('weather-container');
            
            const hourlyRate = {{ hourlyRate }};
            let weatherFactor = 1.0; // Default factor
            
            // Initialize the weather service (it will fetch its API key from the backend)
            const weatherService = new WeatherService();
            
            // Get the station coordinates from the hidden inputs
            const latitude = parseFloat(document.getElementById('stationLatitude').value);
            const longitude = parseFloat(document.getElementById('stationLongitude').value);
            
            // Fetch weather data for the bicycle station location
            async function loadWeatherData() {
                try {
                    // Initialize the weather service first (this fetches the API key)
                    await weatherService.init();
                    
                    const weatherData = await weatherService.getWeatherData(latitude, longitude);
                    
                    // Update the weather factor for price calculation
                    weatherFactor = weatherData.weatherFactor;
                    
                    // Update the weather UI
                    updateWeatherUI(weatherData);
                    
                    // Recalculate price with new weather factor
                    updatePriceCalculation();
                } catch (error) {
                    console.error('Failed to load weather data:', error);
                    // Use default values in case of error
                    weatherFactor = 1.0;
                    updateWeatherUIError();
                    updatePriceCalculation();
                }
            }
            
            function updateWeatherUI(weatherData) {
                // Get the appropriate CSS class based on weather factor
                let weatherFactorClass = 'weather-factor-good';
                if (weatherFactor > 1.3) weatherFactorClass = 'weather-factor-difficult';
                else if (weatherFactor > 1.2) weatherFactorClass = 'weather-factor-challenging';
                else if (weatherFactor > 1.1) weatherFactorClass = 'weather-factor-moderate';
                else if (weatherFactor > 1.0) weatherFactorClass = 'weather-factor-mild';
                
                // Create weather HTML
                weatherContainer.innerHTML = `
                    <div class="weather-icon">
                        <i class="fas ${weatherData.icon}"></i>
                    </div>
                    <div>
                        <p class="mb-0"><strong>Current Weather:</strong> ${weatherData.description}</p>
                        <p class="mb-0">${weatherData.temperature}°C, Wind: ${weatherData.windSpeed} m/s</p>
                        <p class="mt-1 mb-0">
                            <span class="weather-factor ${weatherFactorClass}">
                                ${weatherService.getWeatherDescription(weatherFactor)}
                            </span>
                        </p>
                    </div>
                `;
            }
            
            function updateWeatherUIError() {
                weatherContainer.innerHTML = `
                    <div class="weather-icon">
                        <i class="fas fa-sun"></i>
                    </div>
                    <div>
                        <p class="mb-0"><strong>Current Weather:</strong> Not available</p>
                        <p class="mb-0">Using default conditions</p>
                        <small class="text-muted">No weather surcharge applied</small>
                    </div>
                `;
            }
            
            function updatePriceCalculation() {
                // We use a multiplier to ensure there's enough deposit for longer rentals
                const depositMultiplier = 1.5; // 50% buffer for unexpected extended usage
                const estimatedDeposit = (hourlyRate * weatherFactor * depositMultiplier).toFixed(3);
                
                // Update display
                totalCostSpan.textContent = estimatedDeposit;
                estimatedCostInput.value = estimatedDeposit;
                
                // Update weather condition text
                weatherConditionSpan.textContent = weatherService.getWeatherDescription(weatherFactor);
            }
            
            // Load initial weather data
            loadWeatherData();
        });
    </script>
{% endblock %}