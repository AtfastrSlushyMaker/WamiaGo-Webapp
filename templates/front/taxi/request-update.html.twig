{# filepath: d:\WamiaGo-Webapp - Copie (3)\templates\front\taxi\taxi-management.html.twig #}
{% extends 'front/base.html.twig' %}

{% block title %}Update your Request- WamiaGo{% endblock %}

{% block page_stylesheets %}
<link href="{{ asset('css/front/taxi/request.css') }}?v={{ 'now'|date('YmdHi') }}" rel="stylesheet">
<link href="https://unpkg.com/leaflet/dist/leaflet.css" rel="stylesheet">
<style>
    .form-container {
        background: #fff;
        padding: 30px;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .map-container {
        height: 400px;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }
</style>
{% endblock %}

{% block hero %}
<div class="hero-section text-white py-5">
    <div class="container text-start">
        <h1 class="display-4 fw-bold">Update Your Taxi Request</h1>
        <p class="lead">Modify your existing taxi request details quickly and effortlessly</p>
        <div class="d-flex">
            <a href="#requests-section" class="btn btn-light btn-lg me-3">
                <i class="fas fa-taxi me-2"></i> Back to Request List <i class="fas fa-chevron-right ms-2"></i>
            </a>
        </div>
    </div>
</div>
{% endblock %}

{% block content %}
<div class="container py-5">
    <div class="row">
        <div class="col-md-6">
            <div class="form-container">
                <h3>Update Your Taxi Request</h3>
               <form id="requestForm" action="{{ path('update_request', { id: requestId }) }}" method="POST" onsubmit="return handleFormSubmit(event)">
    <!-- Pickup Location -->
    <div class="mb-3">
        <label for="pickupLocation" class="form-label">Pickup Location</label>
        <input type="text" 
               class="form-control {% if validationErrors is defined and validationErrors['pickupLocation'] is defined %}is-invalid{% endif %}" 
               id="pickupLocation" 
               name="pickupLocation" 
               value="{{ request.departureLocation.address|default('') }}"
               placeholder="Select on the map" 
               required 
               readonly>
        {% if validationErrors is defined and validationErrors['pickupLocation'] is defined %}
            <div class="invalid-feedback">
                {{ validationErrors['pickupLocation'] }}
            </div>
        {% endif %}
    </div>
    <!-- Pickup Latitude and Longitude (hidden) -->
    <input type="hidden" 
           id="pickupLat" 
           name="pickupLat"
           value="{{ request.departureLocation.latitude|default('') }}">
    <input type="hidden" 
           id="pickupLng" 
           name="pickupLng"
           value="{{ request.departureLocation.longitude|default('') }}">

    <!-- Arrival Location -->
    <div class="mb-3">
        <label for="arrivalLocation" class="form-label">Arrival Location</label>
        <input type="text" 
               class="form-control {% if validationErrors is defined and validationErrors['arrivalLocation'] is defined %}is-invalid{% endif %}" 
               id="arrivalLocation" 
               name="arrivalLocation" 
               value="{{ request.arrivalLocation.address|default('') }}"
               placeholder="Select on the map" 
               required 
               readonly>
        {% if validationErrors is defined and validationErrors['arrivalLocation'] is defined %}
            <div class="invalid-feedback">
                {{ validationErrors['arrivalLocation'] }}
            </div>
        {% endif %}
    </div>
    <!-- Arrival Latitude and Longitude (hidden) -->
    <input type="hidden" 
           id="arrivalLat" 
           name="arrivalLat"
           value="{{ request.arrivalLocation.latitude|default('') }}">
    <input type="hidden" 
           id="arrivalLng" 
           name="arrivalLng"
           value="{{ request.arrivalLocation.longitude|default('') }}">

    <!-- Display other validation errors -->
    {% if validationErrors is defined and validationErrors|length > 0 %}
        {% set otherErrors = [] %}
        {% for key, error in validationErrors %}
            {% if key != 'pickupLocation' and key != 'arrivalLocation' %}
                {% set otherErrors = otherErrors|merge([error]) %}
            {% endif %}
        {% endfor %}
        
        {% if otherErrors|length > 0 %}
            <div class="alert alert-danger mb-3">
                <ul class="mb-0">
                    {% for error in otherErrors %}
                        <li>{{ error }}</li>
                    {% endfor %}
                </ul>
            </div>
        {% endif %}
    {% endif %}

    <!-- Display flash messages -->
    {% for label, messages in app.flashes %}
        {% for message in messages %}
            <div class="alert alert-{{ label == 'error' ? 'danger' : label }} alert-dismissible fade show mb-3">
                {{ message }}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        {% endfor %}
    {% endfor %}

    <button type="submit" class="btn btn-primary w-100">Update Request</button>
</form>
                <button class="btn btn-secondary mt-3" onclick="resetFormAndMap()">Reset Map</button>
            </div>
        </div>

        <!-- Map Section -->
        <div class="col-md-6">
            <div id="map" class="map-container"></div>
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
{{ parent() }}
<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    // Initialize map
    var map = L.map('map', {
        center: [36.8065, 10.1815],
        zoom: 12,
        minZoom: 12,
        maxZoom: 16,
        maxBounds: [
            [36.6, 9.9],
            [37.0, 10.5]
        ],
        maxBoundsViscosity: 1.0
    });

    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
    }).addTo(map);

    var pickupMarker, arrivalMarker;

    // Set initial markers if coordinates exist
    document.addEventListener('DOMContentLoaded', function() {
        const pickupLat = document.getElementById('pickupLat').value;
        const pickupLng = document.getElementById('pickupLng').value;
        if (pickupLat && pickupLng) {
            pickupMarker = L.marker([pickupLat, pickupLng])
                .addTo(map)
                .bindPopup('Pickup Location')
                .openPopup();
        }

        const arrivalLat = document.getElementById('arrivalLat').value;
        const arrivalLng = document.getElementById('arrivalLng').value;
        if (arrivalLat && arrivalLng) {
            arrivalMarker = L.marker([arrivalLat, arrivalLng])
                .addTo(map)
                .bindPopup('Arrival Location')
                .openPopup();
        }

        // Center map on pickup location if it exists
        if (pickupLat && pickupLng) {
            map.setView([pickupLat, pickupLng], 13);
        }
    });

    // Handle map clicks
    map.on('click', function(e) {
        var lat = e.latlng.lat;
        var lon = e.latlng.lng;

        if (lat < 36.6 || lat > 37.0 || lon < 9.9 || lon > 10.5) {
            Swal.fire({
                icon: 'error',
                title: 'Invalid Location',
                text: 'Please select a location within the Grand Tunis area.',
                confirmButtonText: 'OK'
            });
            return;
        }

        var geocodeUrl = `https://nominatim.openstreetmap.org/reverse?lat=${lat}&lon=${lon}&format=json`;

        fetch(geocodeUrl)
            .then(response => response.json())
            .then(data => {
                var address = data.display_name || 'Unknown Address';

                if (!document.getElementById('pickupLocation').value) {
                    document.getElementById('pickupLocation').value = address;
                    document.getElementById('pickupLat').value = lat;
                    document.getElementById('pickupLng').value = lon;

                    if (pickupMarker) {
                        map.removeLayer(pickupMarker);
                    }
                    pickupMarker = L.marker([lat, lon]).addTo(map).bindPopup('Pickup Location').openPopup();
                } else {
                    document.getElementById('arrivalLocation').value = address;
                    document.getElementById('arrivalLat').value = lat;
                    document.getElementById('arrivalLng').value = lon;

                    if (arrivalMarker) {
                        map.removeLayer(arrivalMarker);
                    }
                    arrivalMarker = L.marker([lat, lon]).addTo(map).bindPopup('Arrival Location').openPopup();
                }
            })
            .catch(error => {
                console.error('Reverse geocoding error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Unable to fetch the address. Please try again.',
                    confirmButtonText: 'OK'
                });
            });
    });

    function resetFormAndMap() {
        document.getElementById('pickupLocation').value = '';
        document.getElementById('arrivalLocation').value = '';
        document.getElementById('pickupLat').value = '';
        document.getElementById('pickupLng').value = '';
        document.getElementById('arrivalLat').value = '';
        document.getElementById('arrivalLng').value = '';

        if (pickupMarker) {
            map.removeLayer(pickupMarker);
        }
        if (arrivalMarker) {
            map.removeLayer(arrivalMarker);
        }

        map.setView([36.8065, 10.1815], 12);
    }

   /* function handleFormSubmit(event) {
        event.preventDefault();

        const pickupLocation = document.getElementById('pickupLocation').value;
        const arrivalLocation = document.getElementById('arrivalLocation').value;

        if (!pickupLocation || !arrivalLocation) {
            Swal.fire({
                icon: 'warning',
                title: 'Incomplete Form',
                text: 'Please select both pickup and arrival locations on the map.',
                confirmButtonText: 'OK'
            });
            return false;
        }

        Swal.fire({
            icon: 'success',
            title: 'Request Updated!',
            text: 'Your taxi request has been successfully updated.',
            showConfirmButton: false,
            timer: 2000
        });

        setTimeout(() => {
            event.target.submit();
        }, 2000);
    }*/
</script>
{% endblock %}