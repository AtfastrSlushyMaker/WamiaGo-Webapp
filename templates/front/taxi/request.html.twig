{# filepath: d:\WamiaGo-Webapp - Copie (3)\templates\front\taxi\taxi-management.html.twig #}
{% extends 'front/base.html.twig' %}

{% block title %}Taxi Management - WamiaGo{% endblock %}

{% block page_stylesheets %}
<link href="{{ asset('css/front/taxi/taxi-management.css') }}?v={{ 'now'|date('YmdHi') }}" rel="stylesheet">
<link href="https://unpkg.com/leaflet/dist/leaflet.css" rel="stylesheet">
<style>
    .hero-section {
        background-image: url('{{ asset('images/front/taxi/hero-bg.jpg') }}');
        background-size: cover;
        background-position: center;
        padding: 50px 0;
    }

    .hero-section .container {
        padding-top: 60px;
    }
.form-label {
    color: #999;  /* Une couleur claire (gris clair) */
}
    .form-container {
        background: #fff;
        padding: 30px;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .form-container h3 {
        font-size: 1.8rem;
        margin-bottom: 20px;
    }

    .form-control {
        border-radius: 5px;
        border: 1px solid #ddd;
        padding: 10px;
        margin-bottom: 15px;
    }

    .form-control:focus {
        border-color: #007bff;
        box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
    }

    .btn-primary {
        background-color: #66b3ff;  /* Light blue background */
        border: none;
        padding: 12px 24px;
        font-size: 16px;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

    .btn-primary:hover {
        background-color: #3380cc;  /* Darker blue on hover */
    }

    .map-container {
        height: 400px;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }
</style>
{% endblock %}

{% block hero %}
<div class="hero-section text-white py-5">
    <div class="container text-start">
        <h1 class="display-4 fw-bold">Request a Taxi</h1>
        <p class="lead">Easily manage your taxi requests and find the perfect ride with just a few clicks</p>
        <div class="d-flex">
            <a href="#requests-section" class="btn btn-light btn-lg me-3">
                <i class="fas fa-taxi me-2"></i> Back to Request List <i class="fas fa-chevron-right ms-2"></i>
            </a>

        </div>
    </div>
</div>
{% endblock %}



{% block content %}
<div class="container py-5" id="requests-section">
    <div class="row">
        <div class="col-md-6">
            <div class="form-container">
                <h3>Request a Taxi</h3>
                <form id="requestForm" action="#" method="POST">
                    <!-- Pickup Location -->
                    <div class="mb-3">
                        <label for="pickupLocation" class="form-label">Pickup Location</label>
                        <input type="text" class="form-control" id="pickupLocation" name="pickupLocation" required readonly>
                    </div>
                    <!-- Pickup Latitude and Longitude (hidden) -->
                    <input type="hidden" id="pickupLat" name="pickupLat">
                    <input type="hidden" id="pickupLng" name="pickupLng">

                    <!-- Arrival Location -->
                    <div class="mb-3">
                        <label for="arrivalLocation" class="form-label">Arrival Location</label>
                        <input type="text" class="form-control" id="arrivalLocation" name="arrivalLocation" required readonly>
                    </div>
                    <!-- Arrival Latitude and Longitude (hidden) -->
                    <input type="hidden" id="arrivalLat" name="arrivalLat">
                    <input type="hidden" id="arrivalLng" name="arrivalLng">

                    <button type="submit" class="btn btn-primary w-100">Submit Request</button>
                    <button type="button" id="resetMap" class="btn btn-secondary w-100 mt-3">Reset Map</button>
                </form>
            </div>
        </div>

        <!-- Map Section -->
        <div class="col-md-6">
            <div id="map" class="map-container"></div>
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
{{ parent() }}
<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
<script>
    // Initialiser la carte (Leaflet.js, centrée sur la Grande Tunis)
    var map = L.map('map').setView([36.8065, 10.1815], 12); // Centré sur la Grande Tunis (latitude: 36.8065, longitude: 10.1815)

    // Ajouter les tuiles OpenStreetMap à la carte
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
    }).addTo(map);

    // Variables pour stocker les marqueurs de Pickup et Arrival
    var pickupMarker, arrivalMarker;

    // Fonction pour mettre à jour la carte avec les lieux sélectionnés
    function updateMap(pickupCoords, arrivalCoords) {
        // Supprimer les marqueurs existants (si présents)
        if (pickupMarker) {
            map.removeLayer(pickupMarker);
        }
        if (arrivalMarker) {
            map.removeLayer(arrivalMarker);
        }

        // Ajouter les marqueurs pour les emplacements de prise en charge et d'arrivée
        var pickupLocation = pickupCoords.split(',');
        var arrivalLocation = arrivalCoords.split(',');

        // Ajouter le marqueur pour le lieu de prise en charge
        pickupMarker = L.marker([parseFloat(pickupLocation[0]), parseFloat(pickupLocation[1])])
            .addTo(map)
            .bindPopup('Pickup Location')
            .openPopup();

        // Ajouter le marqueur pour le lieu d'arrivée
        arrivalMarker = L.marker([parseFloat(arrivalLocation[0]), parseFloat(arrivalLocation[1])])
            .addTo(map)
            .bindPopup('Arrival Location');

        // Ajuster la vue de la carte pour inclure les deux marqueurs
        var bounds = [
            [parseFloat(pickupLocation[0]), parseFloat(pickupLocation[1])],
            [parseFloat(arrivalLocation[0]), parseFloat(arrivalLocation[1])]
        ];
        map.fitBounds(bounds);
    }

    // Écouter le clic sur la carte pour mettre à jour le formulaire
    map.on('click', function(e) {
        var lat = e.latlng.lat;  // Latitude du point cliqué
        var lon = e.latlng.lng;  // Longitude du point cliqué

        // Utiliser l'API de géocodage inverse pour obtenir l'adresse
        var geocodeUrl = `https://nominatim.openstreetmap.org/reverse?lat=${lat}&lon=${lon}&format=json`;

        fetch(geocodeUrl)
            .then(response => response.json())
            .then(data => {
                var address = data.display_name || 'Adresse inconnue'; // Récupérer l'adresse ou une valeur par défaut

                // Vérifier si l'adresse sélectionnée est pour Pickup ou Arrival
                if (!document.getElementById('pickupLocation').value) {
                    // Si le champ Pickup est vide, assigner l'adresse au Pickup Location
                    document.getElementById('pickupLocation').value = address;
                    document.getElementById('pickupLat').value = lat; // Enregistrer la latitude du pickup
                    document.getElementById('pickupLng').value = lon; // Enregistrer la longitude du pickup
                    updateMap(lat + ',' + lon, lat + ',' + lon);  // Mettre à jour uniquement le Pickup
                } else {
                    // Sinon, assigner l'adresse au Arrival Location
                    document.getElementById('arrivalLocation').value = address;
                    document.getElementById('arrivalLat').value = lat; // Enregistrer la latitude de l'arrivée
                    document.getElementById('arrivalLng').value = lon; // Enregistrer la longitude de l'arrivée
                    updateMap(document.getElementById('pickupLocation').value, lat + ',' + lon);  // Mettre à jour avec Pickup et Arrival
                }

                // Après avoir sélectionné l'adresse, zoomer sur la Grande Tunis
                map.setView([36.8065, 10.1815], 12);  // Centrer sur la Grande Tunis et faire un zoom arrière
            })
            .catch(error => {
                console.error('Erreur lors du géocodage inverse:', error);
            });
    });

    // Fonction pour réinitialiser la carte
    function resetMap() {
        // Supprimer les marqueurs existants (si présents)
        if (pickupMarker) {
            map.removeLayer(pickupMarker);
        }
        if (arrivalMarker) {
            map.removeLayer(arrivalMarker);
        }

        // Réinitialiser les champs de l'adresse
        document.getElementById('pickupLocation').value = '';
        document.getElementById('arrivalLocation').value = '';

        // Réinitialiser les coordonnées
        document.getElementById('pickupLat').value = '';
        document.getElementById('pickupLng').value = '';
        document.getElementById('arrivalLat').value = '';
        document.getElementById('arrivalLng').value = '';

        // Recentrer la carte sur la Grande Tunis avec un zoom adapté
        map.setView([36.8065, 10.1815], 12);
    }

    // Ajout de l'écouteur pour le bouton de réinitialisation de la carte
    document.getElementById('resetMap').addEventListener('click', resetMap);

    // Écouter la soumission du formulaire pour mettre à jour la carte avec les données
    document.getElementById('requestForm').addEventListener('submit', function(event) {
        event.preventDefault();

        var pickupLocation = document.getElementById('pickupLocation').value;
        var arrivalLocation = document.getElementById('arrivalLocation').value;

        if (pickupLocation && arrivalLocation) {
            updateMap(pickupLocation, arrivalLocation);

            // Après avoir sélectionné l'adresse, zoomer sur la Grande Tunis
            map.setView([36.8065, 10.1815], 12);  // Centrer sur la Grande Tunis et faire un zoom arrière
        }
    });
</script>
{% endblock %}
