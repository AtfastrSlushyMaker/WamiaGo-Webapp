<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Reset Password | WamiaGo</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
<style>
    :root {
            --primary-color: #4A6FFF;
            --primary-gradient: linear-gradient(135deg, #4A6FFF 0%, #5E89FF 100%);
            --primary-dark: #385BD9;
            --primary-light: #7A9CFF;
            --accent-color: #FF7A5A;
            --accent-gradient: linear-gradient(135deg, #FF7A5A 0%, #FFA26B 100%);
            --success-color: #00C896;
            --danger-color: #FF5A5A;
            --gray-light: #F9FAFF;
            --gray-medium: #E6EBFF;
            --gray-dark: #B0B7D0;
            --text-dark: #1E2B4D;
            --text-medium: #637094;
            --text-light: #8A93AD;
            --white: #FFFFFF;
            --card-shadow: 0 15px 35px rgba(74, 111, 255, 0.1);
            --input-shadow: 0 5px 15px rgba(74, 111, 255, 0.05);
            --border-radius: 16px;
            --animation-duration: 0.4s;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        @keyframes scaleIn {
            from { transform: scale(0.95); opacity: 0; }
            to { transform: scale(1); opacity: 1; }
        }
        
        @keyframes slideIn {
            from { transform: translateX(-20px); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }
        
        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }
        
        @keyframes ripple {
            0% {
                transform: scale(0, 0);
                opacity: 0.5;
            }
            20% {
                transform: scale(25, 25);
                opacity: 0.3;
            }
            100% {
                opacity: 0;
                transform: scale(40, 40);
            }
    }
    
    body {
            background-color: var(--gray-light);
            background-image: radial-gradient(circle at top right, rgba(74, 111, 255, 0.1) 0%, transparent 60%),
                          radial-gradient(circle at bottom left, rgba(255, 122, 90, 0.1) 0%, transparent 60%);
        min-height: 100vh;
        font-family: 'Poppins', 'Segoe UI', sans-serif;
            margin: 0;
            padding: 0;
            display: flex;
            justify-content: center;
            align-items: center;
    }
    
    .container {
            max-width: 900px;
            width: 100%;
            padding: 30px 15px;
            z-index: 10;
    }
    
    .card {
            background-color: var(--white);
            border-radius: var(--border-radius);
        overflow: hidden;
            box-shadow: var(--card-shadow);
            position: relative;
            animation: scaleIn var(--animation-duration) ease-out;
        }
        
        .card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 6px;
            background: var(--primary-gradient);
    }
    
    .card-header {
            padding: 32px 30px 20px;
            border-bottom: 1px solid var(--gray-medium);
        position: relative;
    }
    
    .card-header h3 {
            margin: 0;
            color: var(--text-dark);
            font-size: 28px;
        font-weight: 700;
        position: relative;
            display: inline-block;
        }
        
        .card-header h3::after {
            content: '';
            position: absolute;
            bottom: -8px;
            left: 0;
            width: 40px;
            height: 3px;
            background: var(--accent-gradient);
            border-radius: 10px;
    }
    
    .card-body {
            padding: 35px 30px;
        }
        
        .form-group {
            margin-bottom: 24px;
            position: relative;
            animation: fadeIn calc(var(--animation-duration) + 0.1s) ease-out;
    }
    
    .form-group label {
            display: block;
            color: var(--text-medium);
        font-weight: 600;
            margin-bottom: 10px;
            font-size: 15px;
            animation: slideIn var(--animation-duration) ease-out;
    }
    
    .form-control {
            width: 100%;
            height: 56px;
        border: 2px solid var(--gray-medium);
            border-radius: 12px;
            padding: 0 20px;
            font-size: 16px;
            color: var(--text-dark);
            background-color: var(--white);
            box-shadow: var(--input-shadow);
        transition: all 0.3s ease;
            box-sizing: border-box;
    }
    
    .form-control:focus {
        border-color: var(--primary-color);
            box-shadow: 0 0 0 4px rgba(74, 111, 255, 0.1);
            outline: none;
        }
        
        .password-container {
            position: relative;
            width: 100%;
        }
        
        .password-container input {
            width: 100%;
            padding-right: 45px;
        }
        
        .toggle-password {
            position: absolute;
            top: 50%;
            right: 15px;
            transform: translateY(-50%);
            width: 24px;
            height: 24px;
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 10;
            border: none;
            background: none;
            color: #555;
            cursor: pointer;
            padding: 0;
        }
        
        .toggle-password:focus {
            outline: none;
            color: #333;
        }
        
        .toggle-password svg {
            width: 24px;
            height: 24px;
            pointer-events: none;
        }
        
        /* COMPLETELY REVISED EYE ANIMATION */
        .toggle-password .eye-svg {
            overflow: visible;
        }
        
        .toggle-password .eye-shape {
            transition: all 0.2s ease;
        }
        
        .toggle-password .eye-ball {
            transition: all 0.2s ease;
            transform-origin: center;
            fill: currentColor;
        }
        
        .toggle-password .eye-pupil {
            fill: #333;
            transition: all 0.2s ease;
        }
        
        .toggle-password .eye-lash {
            opacity: 0;
            stroke: currentColor;
            stroke-width: 1.5;
            stroke-linecap: round;
            transition: opacity 0.2s ease;
        }
        
        .toggle-password[aria-pressed="true"] .eye-shape {
            d: path('M1 12C1 12 5 20 12 20C19 20 23 12 23 12');
        }
        
        .toggle-password[aria-pressed="true"] .eye-ball,
        .toggle-password[aria-pressed="true"] .eye-pupil {
            opacity: 0 !important;
            transform: scale(0);
            visibility: hidden;
        }
        
        .toggle-password[aria-pressed="true"] .eye-lash {
            opacity: 1;
        }
        
        .password-container input.reveal {
            animation: ripple 0.6s ease-out;
        }
        
        @keyframes ripple {
            0% {
                box-shadow: 0 0 0 0 rgba(74, 111, 255, 0.3);
            }
            70% {
                box-shadow: 0 0 0 10px rgba(74, 111, 255, 0);
            }
            100% {
                box-shadow: 0 0 0 0 rgba(74, 111, 255, 0);
            }
        }
        
        .sr-only {
            position: absolute;
            width: 1px;
            height: 1px;
            padding: 0;
            margin: -1px;
            overflow: hidden;
            clip: rect(0, 0, 0, 0);
            border: 0;
        }
        
    .password-strength {
            height: 6px;
        background-color: var(--gray-medium);
            border-radius: 3px;
            margin-top: 8px;
        overflow: hidden;
        position: relative;
    }
    
    .password-strength-meter {
        height: 100%;
            border-radius: 3px;
        transition: width 0.3s ease, background-color 0.3s ease;
            width: 0;
    }
    
    .password-strength-text {
        font-size: 12px;
            font-weight: 600;
        text-align: right;
            margin-top: 8px;
            color: var(--text-light);
            transition: color 0.3s ease;
    }
    
    .strength-weak {
            background-color: var(--danger-color);
        width: 25%;
    }
    
    .strength-medium {
            background-color: var(--accent-color);
        width: 50%;
    }
    
    .strength-strong {
            background-color: var(--primary-color);
        width: 75%;
    }
    
    .strength-very-strong {
            background-color: var(--success-color);
            width: 100%;
        }
        
        .btn {
            display: inline-block;
            font-weight: 600;
            text-align: center;
            white-space: nowrap;
            vertical-align: middle;
            user-select: none;
            border: none;
            padding: 0 25px;
            font-size: 16px;
            line-height: 54px;
            border-radius: 12px;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        width: 100%;
    }
    
    .btn-primary {
            background: var(--primary-gradient);
            color: var(--white);
            box-shadow: 0 10px 20px rgba(74, 111, 255, 0.3);
    }
    
    .btn-primary:hover {
            background: linear-gradient(135deg, #385BD9 0%, #4A6FFF 100%);
            box-shadow: 0 15px 25px rgba(74, 111, 255, 0.4);
        transform: translateY(-2px);
    }
    
    .btn-primary:active {
        transform: translateY(0);
            box-shadow: 0 5px 15px rgba(74, 111, 255, 0.2);
        }
        
        .btn-primary::after {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 5px;
            height: 5px;
            background: rgba(255, 255, 255, 0.5);
            opacity: 0;
            border-radius: 100%;
            transform: scale(1, 1) translate(-50%);
            transform-origin: 50% 50%;
        }
        
        .btn-primary:focus:not(:active)::after {
            animation: ripple 1s ease-out;
    }
    
    .alert {
            padding: 16px 20px;
            border-radius: 12px;
            margin-bottom: 25px;
            font-size: 15px;
        display: flex;
        align-items: center;
            animation: fadeIn var(--animation-duration) ease-out;
        }
        
        .alert-icon {
            margin-right: 15px;
            font-size: 20px;
    }
    
    .alert-danger {
            background-color: rgba(255, 90, 90, 0.1);
        color: var(--danger-color);
        border-left: 4px solid var(--danger-color);
    }
    
        .back-to-login {
            display: inline-flex;
            align-items: center;
            color: var(--text-medium);
            font-weight: 600;
            text-decoration: none;
            font-size: 15px;
            margin-top: 25px;
            transition: color 0.3s ease;
        }
        
        .back-to-login:hover {
            color: var(--primary-color);
        }
        
        .back-to-login i {
            margin-right: 8px;
            transition: transform 0.3s ease;
        }
        
        .back-to-login:hover i {
            transform: translateX(-3px);
        }
        
        .password-match-error {
            color: var(--danger-color);
            font-size: 13px;
            margin-top: 8px;
            animation: fadeIn 0.3s ease-out;
        }
        
        /* Animated background shapes */
        .bg-shapes {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
            overflow: hidden;
        }
        
        .shape {
            position: absolute;
            opacity: 0.2;
            border-radius: 50%;
        }
        
        .shape-1 {
            width: 300px;
            height: 300px;
            background: var(--primary-light);
            top: -150px;
            right: 10%;
            animation: float 30s infinite alternate ease-in-out;
        }
        
        .shape-2 {
            width: 200px;
            height: 200px;
            background: var(--accent-color);
            bottom: -100px;
            left: 10%;
            animation: float 25s infinite alternate-reverse ease-in-out;
        }
        
        .shape-3 {
            width: 150px;
            height: 150px;
            background: var(--primary-color);
            top: 40%;
            left: -75px;
            animation: float 20s infinite alternate ease-in-out;
        }
        
        @keyframes float {
            0% { transform: translate(0, 0) rotate(0deg); }
            25% { transform: translate(10px, 15px) rotate(5deg); }
            50% { transform: translate(20px, 0) rotate(10deg); }
            75% { transform: translate(10px, -15px) rotate(5deg); }
            100% { transform: translate(0, 0) rotate(0deg); }
        }
        
        .password-requirements {
            background-color: var(--gray-light);
            border-radius: 12px;
            padding: 16px 20px;
            margin-bottom: 24px;
        }
        
        .password-requirements h6 {
            color: var(--text-dark);
            font-weight: 600;
            margin-top: 0;
            margin-bottom: 10px;
            font-size: 15px;
        }
        
        .password-requirements ul {
            margin: 0;
            padding-left: 20px;
            color: var(--text-medium);
            font-size: 14px;
        }
        
        .password-requirements li {
            margin-bottom: 6px;
        }
        
        @media (max-width: 767px) {
            .container {
                padding: 20px 15px;
            }
            
            .card-header {
                padding: 25px 20px 15px;
            }
            
            .card-header h3 {
                font-size: 24px;
            }
            
            .card-body {
                padding: 25px 20px;
            }
            
            .form-control {
                height: 50px;
            }
            
            .btn {
                line-height: 50px;
                font-size: 15px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="card">
            <div class="card-header">
                <h3>Set New Password</h3>
            </div>
            <div class="card-body">
                {% for flash_error in app.flashes('danger') %}
                    <div class="alert alert-danger" role="alert">
                        <span class="alert-icon"><i class="fas fa-exclamation-circle"></i></span>
                        <span>{{ flash_error }}</span>
                    </div>
                {% endfor %}

                <p style="margin-bottom: 24px; color: var(--text-medium);">Create a strong, unique password to protect your account.</p>

                {{ form_start(resetForm) }}
                    <div class="form-group">
                        {{ form_label(resetForm.plainPassword.first, 'New Password') }}
                        <div class="password-container">
                            {{ form_widget(resetForm.plainPassword.first, {'attr': {'class': 'form-control', 'placeholder': 'Enter your new password', 'autocomplete': 'new-password'}}) }}
                            <button type="button" class="toggle-password" aria-label="Reveal password" aria-pressed="false">
                                <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="eye-svg">
                                    <path class="eye-shape" d="M1 12C1 12 5 4 12 4C19 4 23 12 23 12" stroke="currentColor"
                                        stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
                                    <path class="eye-shape" d="M1 12C1 12 5 20 12 20C19 20 23 12 23 12" stroke="currentColor"
                                        stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
                                    <circle class="eye-ball" cx="12" cy="12" r="4" />
                                    <circle class="eye-pupil" cx="13" cy="11" r="1" />
                                    <!-- Eyelashes for lower lid -->
                                    <path class="eye-lash" d="M7 17C7 17 7 19 6 20" />
                                    <path class="eye-lash" d="M11 18C11 18 11 20 11 21" />
                                    <path class="eye-lash" d="M15 18C15 18 16 19 17 20" />
                                </svg>
                                <span class="sr-only">Reveal</span>
                            </button>
                        </div>
                        {{ form_errors(resetForm.plainPassword.first) }}
                    <div class="password-strength">
                        <div class="password-strength-meter"></div>
                    </div>
                    <div class="password-strength-text"></div>
                    </div>
                    <div class="form-group">
                        {{ form_label(resetForm.plainPassword.second, 'Confirm Password') }}
                        <div class="password-container">
                            {{ form_widget(resetForm.plainPassword.second, {'attr': {'class': 'form-control', 'placeholder': 'Confirm your new password', 'autocomplete': 'new-password'}}) }}
                            <button type="button" class="toggle-password" aria-label="Reveal password" aria-pressed="false">
                                <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="eye-svg">
                                    <path class="eye-shape" d="M1 12C1 12 5 4 12 4C19 4 23 12 23 12" stroke="currentColor"
                                        stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
                                    <path class="eye-shape" d="M1 12C1 12 5 20 12 20C19 20 23 12 23 12" stroke="currentColor"
                                        stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
                                    <circle class="eye-ball" cx="12" cy="12" r="4" />
                                    <circle class="eye-pupil" cx="13" cy="11" r="1" />
                                    <!-- Eyelashes for lower lid -->
                                    <path class="eye-lash" d="M7 17C7 17 7 19 6 20" />
                                    <path class="eye-lash" d="M11 18C11 18 11 20 11 21" />
                                    <path class="eye-lash" d="M15 18C15 18 16 19 17 20" />
                                </svg>
                                <span class="sr-only">Reveal</span>
                            </button>
                        </div>
                        {{ form_errors(resetForm.plainPassword.second) }}
                    </div>
                    <div class="password-requirements">
                        <h6>Password must include:</h6>
                        <ul>
                            <li>At least 8 characters</li>
                            <li>Upper and lowercase letters</li>
                            <li>At least one number</li>
                            <li>At least one special character</li>
                        </ul>
                    </div>
                    <div>
                        {{ form_widget(resetForm.submit, {'attr': {'class': 'btn btn-primary', 'value': 'Set New Password'}}) }}
                    </div>
                {{ form_end(resetForm) }}
                
                <div style="text-align: center; margin-top: 25px;">
                    <a href="{{ path('app_login') }}" class="back-to-login">
                        <i class="fas fa-arrow-left"></i> Back to login
                    </a>
                </div>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Create animated background shapes
            const bgShapes = document.createElement('div');
            bgShapes.className = 'bg-shapes';
            bgShapes.innerHTML = `
                <div class="shape shape-1"></div>
                <div class="shape shape-2"></div>
                <div class="shape shape-3"></div>
            `;
            document.body.appendChild(bgShapes);
            
            // Initialize password toggle buttons with animation
            document.querySelectorAll('.toggle-password').forEach(button => {
                // Find password input
                const input = button.previousElementSibling;
                
                // Ensure it's a password input
                if (!input || (input.type !== 'password' && input.type !== 'text')) return;
                
                // Animation state
                let busy = false;
                
                // Eye elements
                const eyeBall = button.querySelector('.eye-ball');
                const eyePupil = button.querySelector('.eye-pupil');
                const eyeShape = button.querySelectorAll('.eye-shape');
                
                // Mouse tracking for eye movement
                document.addEventListener('mousemove', (e) => {
                    // Skip if busy with animation or password is visible (eye closed)
                    if (busy || input.type !== 'password' || !eyeBall || !eyePupil) return;
                    
                    // Get the entire input field area
                    const inputRect = input.getBoundingClientRect();
                    const buttonRect = button.getBoundingClientRect();
                    
                    // Check if the input field is visible and has focus or cursor is near it
                    const buffer = 300; // Much larger buffer area
                    
                    // Check if the input has focus
                    const hasFocus = document.activeElement === input;
                    
                    // Track eye even when typing if input has focus
                    if (hasFocus || (
                        e.clientX >= inputRect.left - buffer && 
                        e.clientX <= inputRect.right + buffer && 
                        e.clientY >= inputRect.top - buffer && 
                        e.clientY <= inputRect.bottom + buffer
                    )) {
                        const buttonCenterX = buttonRect.left + buttonRect.width / 2;
                        const buttonCenterY = buttonRect.top + buttonRect.height / 2;
                        
                        // Calculate distance from button center
                        const distX = e.clientX - buttonCenterX;
                        const distY = e.clientY - buttonCenterY;
                        
                        // Increased tracking range and responsiveness
                        const distance = Math.sqrt(distX * distX + distY * distY);
                        
                        // Always move eye when input has focus, otherwise use distance check
                        if (hasFocus || distance < 400) {
                            // Map distance to movement with increased range
                            const moveX = (distX / 80) * 2.5;
                            const moveY = (distY / 80) * 2.5;
                            
                            // Expanded movement range
                            const limitedX = Math.min(3, Math.max(-3, moveX));
                            const limitedY = Math.min(3, Math.max(-3, moveY));
                            
                            // Apply movement with smoother transition
                            eyeBall.style.transition = 'transform 0.2s ease-out';
                            eyePupil.style.transition = 'transform 0.2s ease-out';
                            eyeBall.style.transform = `translate(${limitedX}px, ${limitedY}px)`;
                            // Make pupil move more for better effect
                            eyePupil.style.transform = `translate(${limitedX * 2}px, ${limitedY * 2}px)`;
                        } else {
                            // Reset eye position if mouse is far from this input
                            eyeBall.style.transition = 'transform 0.5s ease';
                            eyePupil.style.transition = 'transform 0.5s ease';
                            eyeBall.style.transform = 'translate(0, 0)';
                            eyePupil.style.transform = 'translate(0, 0)';
                        }
                    } else {
                        // Reset eye position if mouse is outside input area
                        eyeBall.style.transform = 'translate(0, 0)';
                        eyePupil.style.transform = 'translate(0, 0)';
                    }
                });
                
                // Random blink for each eye (independent)
                let blinkTimeout;
                
                function randomBlink() {
                    // Only blink when password is hidden (eye is open)
                    if (input.type !== 'password') return;
                    
                    // Random delay between 2 and 6 seconds
                    const delay = Math.random() * 4000 + 2000;
                    
                    blinkTimeout = setTimeout(() => {
                        // Quick blink animation - hide the eyeball briefly
                        if (eyeBall && eyePupil && input.type === 'password') {
                            eyeBall.style.opacity = '0';
                            eyePupil.style.opacity = '0';
                            
                            // Open eye after blinking
                            setTimeout(() => {
                                if (input.type === 'password') { // Check again in case it changed
                                    eyeBall.style.opacity = '1';
                                    eyePupil.style.opacity = '1';
                                }
                            }, 150);
                        }
                        
                        // Schedule next blink
                        randomBlink();
                    }, delay);
                }
                
                // Start random blinking for each eye
                randomBlink();
                
                // Handle click event
                button.addEventListener('click', () => {
                    // Prevent multiple clicks during animation
                    if (busy) return;
                    busy = true;
                    
                    const isPassword = input.type === 'password';
                    
                    // Update ARIA state immediately
                    button.setAttribute('aria-pressed', isPassword);
                    
                    // Force hide pupil immediately when closing eye
                    if (isPassword && eyePupil) {
                        eyePupil.style.opacity = '0';
                        eyePupil.style.visibility = 'hidden';
                    }
                    
                    // The CSS transitions will handle the animations automatically
                    
                    // Change input type with a short delay
                    setTimeout(() => {
                        input.type = isPassword ? 'text' : 'password';
                        
                        // When opening eye, make pupil visible again
                        if (!isPassword && eyePupil) {
                            eyePupil.style.opacity = '1';
                            eyePupil.style.visibility = 'visible';
                        }
                        
                        if (isPassword) {
                            // Add ripple animation class
                            input.classList.add('reveal');
                            
                            // Remove class after animation completes
                            setTimeout(() => {
                                input.classList.remove('reveal');
                            }, 600);
                        }
                        
                        busy = false;
                        
                        // If going back to password, restart blinking
                        if (!isPassword) {
                            clearTimeout(blinkTimeout);
                            randomBlink();
                        }
                    }, 100);
                });
                
                // Clean up event listeners when needed
                return () => {
                    clearTimeout(blinkTimeout);
                };
            });
            
            // Password strength meter
            const passwordField = document.querySelector('input[name="resetForm[plainPassword][first]"]');
            
            if (passwordField) {
                const strengthMeter = document.querySelector('.password-strength-meter');
                const strengthText = document.querySelector('.password-strength-text');
                
                // Password strength checker
                passwordField.addEventListener('input', function() {
                    const password = this.value;
                    let strength = 0;
                    
                    if (password.length > 7) strength += 1; // Length
                    if (/[A-Z]/.test(password)) strength += 1; // Uppercase
                    if (/[a-z]/.test(password)) strength += 1; // Lowercase
                    if (/[0-9]/.test(password)) strength += 1; // Numbers
                    if (/[^A-Za-z0-9]/.test(password)) strength += 1; // Special chars
                    
                    // Update UI
                    strengthMeter.className = 'password-strength-meter';
                    strengthText.textContent = '';
                    
                    if (password.length === 0) {
                        strengthMeter.style.width = '0';
                        strengthText.textContent = '';
                    } else if (strength < 2) {
                        strengthMeter.classList.add('strength-weak');
                        strengthText.textContent = 'Weak';
                        strengthText.style.color = 'var(--danger-color)';
                    } else if (strength < 4) {
                        strengthMeter.classList.add('strength-medium');
                        strengthText.textContent = 'Medium';
                        strengthText.style.color = 'var(--accent-color)';
                    } else if (strength < 5) {
                        strengthMeter.classList.add('strength-strong');
                        strengthText.textContent = 'Strong';
                        strengthText.style.color = 'var(--primary-color)';
                    } else {
                        strengthMeter.classList.add('strength-very-strong');
                        strengthText.textContent = 'Very Strong';
                        strengthText.style.color = 'var(--success-color)';
                    }
                });
                
                // Check password match
                const confirmField = document.querySelector('input[name="resetForm[plainPassword][second]"]');
                if (confirmField) {
                    confirmField.addEventListener('input', function() {
                        if (this.value && this.value !== passwordField.value) {
                            // Create or show match error
                            let matchError = this.parentNode.nextElementSibling.nextElementSibling;
                            if (!matchError || !matchError.classList.contains('password-match-error')) {
                                matchError = document.createElement('div');
                                matchError.className = 'password-match-error';
                                this.parentNode.parentNode.appendChild(matchError);
                            }
                            matchError.textContent = 'Passwords do not match';
                            matchError.style.display = 'block';
                        } else {
                            // Hide match error if it exists
                            const matchError = this.parentNode.parentNode.querySelector('.password-match-error');
                            if (matchError) {
                                matchError.style.display = 'none';
                            }
                        }
                    });
                }
            }
            
            // Add button hover effect
            const buttons = document.querySelectorAll('.btn');
            buttons.forEach(function(button) {
                button.addEventListener('mouseenter', function() {
                    this.style.animation = 'pulse 0.5s ease-in-out';
                });
                
                button.addEventListener('animationend', function() {
                    this.style.animation = '';
                });
            });
    });
</script>
</body>
</html>
