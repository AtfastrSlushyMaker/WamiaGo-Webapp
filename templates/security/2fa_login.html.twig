<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Two-Factor Authentication</title>
    
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    
    <!-- FontAwesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    
    <style>
        body {
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            font-family: 'Poppins', sans-serif;
            padding: 20px
        }
        
        .auth-container {
            max-width: 550px;
            width: 100%;
            margin: 0 auto;
        }
        
        .card {
            border: none;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            border-radius: 16px;
            overflow: hidden;
            background: white;
            backdrop-filter: blur(10px);
        }
        
        .card-header {
            background: linear-gradient(135deg, #4e73df 0%, #224abe 100%);
            border-bottom: none;
            padding: 2rem 1.5rem;
            position: relative;
            overflow: hidden;
        }
        
        .card-header::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, rgba(255,255,255,0) 80%);
            opacity: 0.3;
        }
        
        .card-header h3 {
            position: relative;
            font-weight: 700;
            letter-spacing: 0.5px;
        }
        
        .card-body {
            padding: 2.5rem;
        }
        
        .verification-inputs {
            margin: 2rem auto;
        }
        
        .verification-digit {
            width: 56px !important;
            height: 68px !important;
            font-size: 1.8rem !important;
            font-weight: 600;
            text-align: center;
            border: 2px solid #e2e8f0;
            border-radius: 12px;
            margin: 0 0.25rem;
            transition: all 0.2s;
            background-color: #f8fafc;
        }
        
        .verification-digit:focus {
            border-color: #4e73df;
            box-shadow: 0 0 0 0.25rem rgba(78, 115, 223, 0.25);
            background-color: white;
        }
        
        .form-check-input:checked {
            background-color: #4e73df;
            border-color: #4e73df;
        }
        
        .auth-app-icon {
            font-size: 4rem;
            color: #4e73df;
            background: rgba(78, 115, 223, 0.1);
            height: 110px;
            width: 110px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            margin: 0 auto 1.5rem;
        }
        
        .auth-assistance {
            margin-top: 2rem;
            padding-top: 1.5rem;
            border-top: 1px solid #e0e0e0;
        }
        
        .btn-primary {
            background: linear-gradient(135deg, #4e73df 0%, #224abe 100%);
            border: none;
            box-shadow: 0 4px 10px rgba(78, 115, 223, 0.3);
            font-weight: 600;
            letter-spacing: 0.5px;
            transition: all 0.3s;
        }
        
        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 15px rgba(78, 115, 223, 0.4);
        }
        
        .btn-outline-secondary, .btn-outline-info {
            font-weight: 500;
            border-width: 2px;
            transition: all 0.3s;
        }
        
        .btn-outline-secondary:hover, .btn-outline-info:hover {
            transform: translateY(-2px);
        }
        
        .btn-outline-info {
            color: #36b9cc;
            border-color: #36b9cc;
        }
        
        .btn-outline-info:hover {
            background-color: #36b9cc;
            color: white;
        }
        
        h4 {
            font-weight: 700;
            color: #2d3748;
        }
        
        .lead {
            font-size: 1.1rem;
            color: #718096;
            margin-bottom: 0;
        }
        
        .alert-danger {
            background-color: #fff5f5;
            color: #e53e3e;
            border-color: #fed7d7;
            border-radius: 12px;
            font-weight: 500;
        }
        
        @media (max-width: 576px) {
            .verification-digit {
                width: 45px !important;
                height: 55px !important;
                font-size: 1.5rem !important;
            }
            
            .auth-actions {
                flex-direction: column;
                gap: 10px;
            }
            
            .card-body {
                padding: 1.5rem;
            }
        }
    </style>
</head>
<body>
    <div class="auth-container">
        <div class="card shadow">
            <div class="card-header bg-primary text-white">
                <h3 class="mb-0 text-center">Two-Factor Authentication</h3>
            </div>
            <div class="card-body">
                {% if error %}
                    <div class="alert alert-danger">
                        {{ error.messageKey|trans(error.messageData, 'security') }}
                    </div>
                {% endif %}
                
                <div class="text-center mb-4">
                    <div class="auth-app-icon">
                        <i class="fas fa-shield-alt"></i>
                    </div>
                    <h4>Verification Required</h4>
                    <p class="lead">Enter the 6-digit code from your authenticator app</p>
                </div>
                
                <form action="{{ path('2fa_login_check') }}" method="post" autocomplete="off">
                    <div class="verification-inputs d-flex justify-content-center">
                        <input type="text" class="form-control verification-digit" maxlength="1" pattern="[0-9]" inputmode="numeric" autocomplete="off" required autofocus>
                        <input type="text" class="form-control verification-digit" maxlength="1" pattern="[0-9]" inputmode="numeric" autocomplete="off" required>
                        <input type="text" class="form-control verification-digit" maxlength="1" pattern="[0-9]" inputmode="numeric" autocomplete="off" required>
                        <input type="text" class="form-control verification-digit" maxlength="1" pattern="[0-9]" inputmode="numeric" autocomplete="off" required>
                        <input type="text" class="form-control verification-digit" maxlength="1" pattern="[0-9]" inputmode="numeric" autocomplete="off" required>
                        <input type="text" class="form-control verification-digit" maxlength="1" pattern="[0-9]" inputmode="numeric" autocomplete="off" required>
                    </div>
                    <input type="hidden" name="_auth_code" id="verification-code">
                    
                    <div class="d-grid gap-2 mb-3">
                        <button type="submit" class="btn btn-primary btn-lg">
                            <i class="fas fa-unlock-alt me-2"></i> Verify
                        </button>
                    </div>
                    
                    <div class="form-check d-flex align-items-center justify-content-center mb-4">
                        <input class="form-check-input me-2" type="checkbox" name="_trusted" id="trusted">
                        <label class="form-check-label" for="trusted">
                            Trust this device for 60 days
                        </label>
                    </div>
                    
                    <div class="auth-assistance">
                        <div class="d-flex justify-content-between">
                            <a href="{{ path('app_logout') }}" class="btn btn-outline-secondary">
                                <i class="fas fa-sign-out-alt me-2"></i> Cancel and log out
                            </a>
                            <a href="#" id="use-backup-code" class="btn btn-outline-info">
                                <i class="fas fa-key me-2"></i> Use a backup code
                            </a>
                        </div>
                    </div>
                    
                    <input type="hidden" name="_csrf_token" value="{{ csrf_token('authenticate') }}">
                </form>
            </div>
        </div>
    </div>

    <!-- Bootstrap JS Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    
    <script>
    document.addEventListener('DOMContentLoaded', function() {
        // Handle verification code inputs
        const verificationInputs = document.querySelectorAll('.verification-digit');
        const verificationCodeInput = document.getElementById('verification-code');
        const form = document.querySelector('form');
        
        // Auto-focus first input on page load
        if (verificationInputs.length > 0) {
            verificationInputs[0].focus();
        }
        
        // Process inputs
        verificationInputs.forEach((input, index) => {
            // Handle input changes (typing)
            input.addEventListener('input', function(e) {
                // Only allow digits
                this.value = this.value.replace(/[^0-9]/g, '');
                
                // Move to next input when a digit is entered
                if (this.value && index < verificationInputs.length - 1) {
                    verificationInputs[index + 1].focus();
                }
                
                // If this is the last input and we just entered a value, submit the form
                if (this.value && index === verificationInputs.length - 1) {
                    // Wait a moment to let the value register
                    setTimeout(() => {
                        updateVerificationCode();
                        if (isCodeComplete()) {
                            form.submit();
                        }
                    }, 300);
                }
                
                // Update the hidden input with the complete code
                updateVerificationCode();
            });
            
            // Handle keyboard navigation
            input.addEventListener('keydown', function(e) {
                // Backspace
                if (e.key === 'Backspace') {
                    if (!this.value && index > 0) {
                        // Empty field and pressed backspace, go to previous field
                        verificationInputs[index - 1].focus();
                        e.preventDefault();
                    }
                }
                
                // Left arrow
                if (e.key === 'ArrowLeft' && index > 0) {
                    verificationInputs[index - 1].focus();
                    e.preventDefault();
                }
                
                // Right arrow
                if (e.key === 'ArrowRight' && index < verificationInputs.length - 1) {
                    verificationInputs[index + 1].focus();
                    e.preventDefault();
                }
                
                // Enter key - submit form if all digits are entered
                if (e.key === 'Enter') {
                    updateVerificationCode();
                    if (isCodeComplete()) {
                        e.preventDefault();
                        form.submit();
                    }
                }
            });
            
            // Handle paste event
            input.addEventListener('paste', function(e) {
                e.preventDefault();
                const pasteData = e.clipboardData.getData('text').trim();
                
                // If we have a 6-digit code, distribute it across inputs
                if (/^\d{6}$/.test(pasteData)) {
                    for (let i = 0; i < Math.min(6, pasteData.length); i++) {
                        verificationInputs[i].value = pasteData[i];
                    }
                    updateVerificationCode();
                    verificationInputs[5].focus();
                    
                    // Submit the form automatically after paste
                    setTimeout(() => {
                        if (isCodeComplete()) {
                            form.submit();
                        }
                    }, 300);
                }
            });
        });
        
        // Update the hidden field with all digits
        function updateVerificationCode() {
            const code = Array.from(verificationInputs).map(input => input.value).join('');
            if (verificationCodeInput) {
                verificationCodeInput.value = code;
            }
        }
        
        // Check if the code is complete (6 digits)
        function isCodeComplete() {
            const code = verificationCodeInput.value;
            return code.length === 6 && /^\d{6}$/.test(code);
        }
        
        // Handle form submission
        form.addEventListener('submit', function(e) {
            // Update the verification code one last time before submitting
            updateVerificationCode();
            
            // If code is incomplete, prevent submission
            const code = verificationCodeInput.value;
            if (!isCodeComplete()) {
                e.preventDefault();
                alert('Please enter a complete 6-digit verification code');
                verificationInputs[0].focus();
            }
        });
        
        // Toggle for backup code option
        const useBackupLink = document.getElementById('use-backup-code');
        if (useBackupLink) {
            useBackupLink.addEventListener('click', function(e) {
                e.preventDefault();
                const useBackup = confirm('Do you want to use a backup code instead?');
                if (useBackup) {
                    const backupCode = prompt('Please enter your backup code:');
                    if (backupCode) {
                        verificationCodeInput.value = backupCode;
                        form.submit();
                    }
                }
            });
        }
    });
    </script>
</body>
</html>
